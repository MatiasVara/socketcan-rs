var searchIndex = {};
searchIndex["socketcan"] = {"doc":"socketCAN support.","items":[[3,"CANSocket","socketcan","A socket for a CAN device.",null,null],[3,"CANFrame","","CANFrame",null,null],[4,"CANSocketOpenError","","Errors opening socket",null,null],[13,"LookupError","","Device could not be found",0,null],[13,"IOError","","System error while trying to look up device name",0,null],[4,"ConstructionError","","Error that occurs when creating CAN packets",null,null],[13,"IDTooLarge","","CAN ID was outside the range of valid IDs",1,null],[13,"TooMuchData","","More than 8 Bytes of payload data were passed in",1,null],[0,"dump","","candump format parsing",null,null],[3,"Reader","socketcan::dump","A CAN log reader.",null,null],[3,"CanDumpRecords","","Record iterator",null,null],[3,"CanDumpRecord","","Recorded CAN frame.",null,null],[12,"t_us","","",2,null],[12,"device","","",2,null],[12,"frame","","",2,null],[4,"ParseError","","candump line parse error",null,null],[13,"Io","","",3,null],[13,"UnexpectedEndOfLine","","",3,null],[13,"InvalidTimestamp","","",3,null],[13,"InvalidDeviceName","","",3,null],[13,"InvalidCanFrame","","",3,null],[13,"ConstructionError","","",3,null],[11,"fmt","","",4,null],[11,"from_reader","","",4,{"inputs":[{"name":"r"}],"output":{"name":"reader"}}],[11,"from_file","","",4,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"fmt","","",5,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"parseerror"}}],[11,"from","","",3,{"inputs":[{"name":"constructionerror"}],"output":{"name":"parseerror"}}],[11,"records","","Returns an iterator over all records",4,null],[11,"next_record","","Advance state, returning next record.",4,null],[11,"next","","",5,null],[17,"EFF_FLAG","socketcan","if set, indicate 29 bit extended format",null,null],[17,"RTR_FLAG","","remote transmission request flag",null,null],[17,"ERR_FLAG","","error flag",null,null],[17,"SFF_MASK","","valid bits in standard frame id",null,null],[17,"EFF_MASK","","valid bits in extended frame id",null,null],[17,"ERR_MASK","","valid bits in error frame",null,null],[8,"ShouldRetry","","Check an error return value for timeouts.",null,null],[10,"should_retry","","Check for timeout",6,null],[11,"should_retry","std::io::error","",7,null],[11,"should_retry","socketcan","",8,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"cansocketopenerror"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"cansocketopenerror"}}],[11,"open","","Open a named CAN device.",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"open_if","","Open CAN device by interface number.",9,{"inputs":[{"name":"c_uint"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout on the socket",9,null],[11,"set_write_timeout","","Sets the write timeout on the socket",9,null],[11,"read_frame","","Blocking read a single can frame.",9,null],[11,"write_frame","","Blocking write a single can frame.",9,null],[11,"drop","","",9,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"new","","",10,null],[11,"id","","Return the actual CAN ID (without EFF/RTR/ERR flags)",10,null],[11,"err","","Return the error message",10,null],[11,"is_extended","","Check if frame uses 29 bit extended frame format",10,null],[11,"is_error","","Check if frame is an error message",10,null],[11,"is_rtr","","Check if frame is a remote transmission request",10,null],[11,"data","","A slice into the actual data. Slice will always be &lt;= 8 bytes in length",10,null],[11,"fmt","","",10,null]],"paths":[[4,"CANSocketOpenError"],[4,"ConstructionError"],[3,"CanDumpRecord"],[4,"ParseError"],[3,"Reader"],[3,"CanDumpRecords"],[8,"ShouldRetry"],[3,"Error"],[6,"Result"],[3,"CANSocket"],[3,"CANFrame"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[3,"Dedup","itertools","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both\nrun out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until\none of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single\nitem to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple\nitems in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"GroupBy","","An iterator adaptor that groups iterator elements. Consecutive elements\nthat map to the same key (“runs”), are returned as the iterator elements.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator\nfor each iteration.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","An iterator adaptor that allows the user to peek at multiple *.next()*\nvalues without advancing itself.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"MendSlices","","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"Combinations","","An iterator to iterate through all the combinations of pairs in a `Clone`-able iterator.",null,null],[3,"CombinationsN","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatDefault","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"ChunksLazy","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupByLazy","","`GroupByLazy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",null,null],[3,"ISlice","","An iterator adaptor that yields a subset (a slice) of the base iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order.\nIf all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"Linspace","","An iterator of a sequence of evenly spaced floats.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling\nmissing elements using a closure.",null,null],[3,"RcIter","","A wrapper for `Rc&lt;RefCell&lt;I&gt;&gt;`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",0,null],[3,"RepeatN","","An iterator that repeats an element exactly *n* times.",null,null],[3,"RepeatCall","","An iterator source that produces elements indefinitely by calling\na given closure.",null,null],[3,"Unfold","","`Unfold` is a general iterator builder: it has a mutable state value,\nand a closure with access to the state that produces the next value.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",1,null],[3,"Stride","","An iterator similar to the slice iterator, but with a certain number of steps\n(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,null],[3,"ZipSlices","","An iterator which iterates two slices simultaneously.",null,null],[4,"Diff","","A type returned by the [`diff_with`](./fn.diff_with.html) function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator&#39;s remaining elements\nstarting with the first mis-match.",2,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",2,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",2,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\nmore detail.",null,null],[13,"NoElements","","Empty iterator",3,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",3,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger\nthan the second",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`.\nContains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the parameter iterator.",4,null],[4,"Partition","","Classifies the result of the `.partition_map()` closure into a\npartition.",null,null],[13,"Left","","Classify into the left partition.",5,null],[13,"Right","","Classify into the right partition.",5,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",6,null],[13,"Done","","Fold is complete and will return this value",6,null],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and\nreturns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"linspace","","Return an iterator of evenly spaced floats.",null,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"linspace"}}],[5,"equal","","Return `true` if both iterators produce equal sequences\n(elements pairwise equal and sequences of the same length),\n`false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same\nsemantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements\nthat map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[11,"clone","","",7,null],[11,"new","","Creat a new `Interleave` iterator.",7,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"next","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new `InterleaveShortest` iterator.",8,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"clone","","",9,null],[11,"new","","Iterator element type is `A`",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"with_value","","Create a `PutBack` along with the `value` to put back.",9,{"inputs":[{"name":"item"},{"name":"i"}],"output":{"name":"self"}}],[11,"into_parts","","Split the `PutBack` into its parts.",9,null],[11,"put_back","","Put back a single value to the front of the iterator.",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"new","","Iterator element type is `A`",10,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"put_back","","Puts x in front of the iterator.\nThe values are yielded in order.",10,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"new","","Create a new cartesian product iterator",11,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"self"}}],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"clone","","",12,null],[11,"new","","Create a new Batching iterator.",12,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"batching"}}],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"clone","","",13,null],[11,"new","","Create a new `GroupBy` iterator.",13,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"clone","","",14,null],[11,"new","","Create a `Step` iterator.",14,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"clone","","",15,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"clone","","",16,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"clone","","",17,null],[11,"new","","Create a `MultiPeek` iterator.",17,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[11,"peek","","Works exactly like *.next()* with the only difference that it doesn&#39;t\nadvance itself. *.peek()* can be called multiple times, to peek\nfurther ahead.",17,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"clone","","",18,null],[11,"new","","Create a new `Coalesce`.",18,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",18,null],[11,"size_hint","","",18,null],[11,"clone","","",19,null],[11,"new","","Create a new `Dedup`.",19,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",19,null],[11,"size_hint","","",19,null],[11,"clone","","",20,null],[11,"new","","Create a new `MendSlices`.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,null],[11,"size_hint","","",20,null],[11,"new","","Create a new `TakeWhileRef` from a reference to clonable iterator.",21,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",21,null],[11,"size_hint","","",21,null],[11,"clone","","",22,null],[11,"new","","Create a new `WhileSome&lt;I&gt;`.",22,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",22,null],[11,"size_hint","","",22,null],[11,"clone","","",23,null],[11,"new","","Create a new `Combinations` from a clonable iterator.",23,{"inputs":[{"name":"i"}],"output":{"name":"combinations"}}],[11,"next","","",23,null],[11,"size_hint","","",23,null],[11,"new","","Create a new `CombinationsN` from a clonable iterator.",24,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"next","","",24,null],[11,"clone","","",25,null],[11,"new","","Create a new `UniqueBy` iterator.",25,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"clone","","",26,null],[11,"new","","Create a new `Flatten` iterator.",27,{"inputs":[{"name":"i"}],"output":{"name":"flatten"}}],[11,"next","","",27,null],[11,"next_back","","",27,null],[11,"clone","","",27,null],[0,"free","","Free functions that create iterator adaptors or call iterator methods.",null,null],[5,"enumerate","itertools::free","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable&#39;s elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"clone","itertools","",28,null],[11,"fmt","","",29,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"next","","",30,null],[11,"drop","","",31,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"drop","","",33,null],[11,"next","","",33,null],[11,"clone","","",34,null],[11,"new","","Create a new Intersperse iterator",34,{"inputs":[{"name":"i"},{"name":"item"}],"output":{"name":"self"}}],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"clone","","",35,null],[11,"new","","Create a new **ISlice**.",35,{"inputs":[{"name":"i"},{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"clone","","",36,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"fmt","","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"next_back","","",37,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option`\nhas variant `None` if and only if the `MinMaxResult` has variant\n`NoElements`. Otherwise variant `Some(x, y)` is returned where `x &lt;= y`.\nIf `MinMaxResult` has variant `OneElement(x)`, performing this operation\nwill make one clone of `x`.",3,null],[0,"misc","","A module of helper traits and iterators that are not intended to be used\ndirectly.",null,null],[3,"FlatTuples","itertools::misc","A helper iterator that maps an iterator of tuples like\n`((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[8,"IntoIteratorTuple","","Apply `IntoIterator` on each element of a tuple.",null,null],[16,"Output","","Tuple of values that implement `Iterator`.",38,null],[10,"into_iterator_tuple","","Return a tuple of iterators.",38,null],[8,"AppendTuple","","A helper trait for (x, y, z) ++ w =&gt; (x, y, z, w),\nused for implementing `iproduct!`.",null,null],[16,"Result","","Resulting tuple type",39,null],[10,"append","","“Append” value `x` to a tuple.",39,null],[8,"GenericRange","","`GenericRange` is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `a..`, `..b` or `c..d`.",null,null],[8,"ToFloat","","Helper trait to convert usize to floating point type.",null,null],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Slice","","A helper trait to let `ZipSlices` accept both `&amp;[T]` and `&amp;mut [T]`.",null,null],[16,"Item","","The type of a reference to the slice&#39;s elements",40,null],[11,"clone","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next_back","","",41,null],[11,"start","core::ops","",42,null],[11,"end","","",43,null],[11,"start","","",44,null],[11,"end","","",44,null],[11,"clone","itertools","",45,null],[11,"new","","Create a new **PadUsing** iterator.",45,{"inputs":[{"name":"i"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"new","","Create a new RcIter.",0,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"new","","Create a new **RepeatN** with **n** repetitions.",46,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"new","","Create a new `RepeatCall` from a closure.",47,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"next_back","","",47,null],[11,"clone","","",1,null],[11,"new","","Creates a new iterator with the specified closure as the &quot;iterator\nfunction&quot; and an initial state to eventually pass to the closure",1,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",1,null],[11,"size_hint","","",1,null],[0,"size_hint","","Arithmetic on **Iterator** *.size_hint()* values.",null,null],[5,"add","itertools::size_hint","Add **SizeHint** correctly.",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"add_scalar","","Add **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"sub_scalar","","Sbb **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul_scalar","","Multiply **x** correctly with a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul","","Multiply **SizeHint** correctly",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"max","","Return the maximum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"min","","Return the minimum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[6,"SizeHint","","**SizeHint** is the return type of **Iterator::size_hint()**.",null,null],[11,"from_ptr_len","itertools","Create a Stride iterator from a raw pointer.",48,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",49,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",48,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",48,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",48,null],[11,"len","","Return the number of elements in the iterator.",48,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",48,null],[11,"next","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"index","","Return a reference to the element at a given index.",48,null],[11,"fmt","","",48,null],[11,"len","","",48,null],[11,"get_unchecked","","",48,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",49,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",49,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",49,null],[11,"len","","Return the number of elements in the iterator.",49,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"index","","Return a reference to the element at a given index.",49,null],[11,"fmt","","",49,null],[11,"len","","",49,null],[11,"get_unchecked","","",49,null],[11,"clone","","",48,null],[11,"get_mut","","Return a mutable reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",49,null],[11,"index_mut","","Return a mutable reference to the element at a given index.",49,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"clone","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"clone","","",52,null],[11,"new","","Create a new `ZipLongest` iterator.",52,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"ziplongest"}}],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"clone","","",53,null],[11,"new","","Create a new `Zip` from a tuple of iterators.",53,{"inputs":[{"name":"t"}],"output":{"name":"zip"}}],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"clone","","",54,null],[11,"new","","Create a new `ZipSlices` from slices `a` and `b`.",54,null],[11,"from_slices","","Create a new `ZipSlices` from slices `a` and `b`.",54,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"next","","",54,null],[11,"size_hint","","",54,null],[11,"next_back","","",54,null],[11,"len","","",54,null],[11,"get_unchecked","","",54,null],[6,"MapFn","","The function pointer map iterator created with `.map_fn()`.",null,null],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",55,null],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",55,null],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",55,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",55,null],[11,"zip_eq","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of elements.",55,null],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",55,null],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",55,null],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",55,null],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",55,null],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",55,null],[11,"slice","","Return a sliced iterator.",55,null],[11,"into_rc","","Return an iterator inside a `Rc&lt;RefCell&lt;_&gt;&gt;` wrapper.",55,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",55,null],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",55,null],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",55,null],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.",55,null],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",55,null],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",55,null],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements.",55,null],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",55,null],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",55,null],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",55,null],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",55,null],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",55,null],[11,"while_some","","Return an iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",55,null],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",55,null],[11,"combinations_n","","Return an iterator adaptor that iterates over the `n`-length combinations of\nthe elements from an iterator.",55,null],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",55,null],[11,"flatten","","Unravel a nested iterator.",55,null],[11,"map_fn","","Like regular `.map()`, specialized to using a simple function pointer instead,\nso that the resulting `Map` iterator value can be cloned.",55,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",55,null],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",55,null],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",55,null],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",55,null],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",55,null],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",55,null],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",55,null],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",55,null],[11,"format_default","","Format all iterator elements, separated by `sep`.",55,null],[11,"format","","Format all iterator elements, separated by `sep`.",55,null],[11,"fold_results","","Fold `Result` values from an iterator.",55,null],[11,"fold_options","","Fold `Option` values from an iterator.",55,null],[11,"fold1","","Accumulator of the elements in the iterator.",55,null],[11,"fold_while","","An iterator adaptor that applies a function, producing a single, final value.",55,null],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it&#39;s possible to tell.",55,null],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",55,null],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",55,null],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",55,null],[11,"partition_map","","Collect all iterator elements into one of two\npartitions. Unlike `Iterator::partition`, each partition may\nhave a distinct type.",55,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",55,null],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by\nthe specified function.",55,null],[14,"iproduct!","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip!","","Create an iterator running multiple iterators in lockstep.",null,null]],"paths":[[3,"RcIter"],[3,"Unfold"],[4,"Diff"],[4,"MinMaxResult"],[4,"EitherOrBoth"],[4,"Partition"],[4,"FoldWhile"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"GroupBy"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"MultiPeek"],[3,"Coalesce"],[3,"Dedup"],[3,"MendSlices"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Combinations"],[3,"CombinationsN"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"FormatDefault"],[3,"Format"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"ISlice"],[3,"KMerge"],[3,"Linspace"],[8,"IntoIteratorTuple"],[8,"AppendTuple"],[8,"Slice"],[3,"FlatTuples"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"PadUsing"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Stride"],[3,"StrideMut"],[3,"Tee"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[3,"ZipSlices"],[8,"Itertools"]]};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[11,"clone","libc::unix","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","libc::unix::notbsd","",13,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","libc::unix::notbsd::linux","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","libc::unix::notbsd::linux::other","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",55,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",56,null],[11,"clone","","",57,null],[11,"clone","","",58,null],[11,"clone","","",59,null],[11,"clone","","",60,null],[6,"c_int","nix","",null,null],[4,"c_void","","",null,null],[4,"Errno","","",null,null],[13,"UnknownErrno","","",61,null],[13,"EPERM","","",61,null],[13,"ENOENT","","",61,null],[13,"ESRCH","","",61,null],[13,"EINTR","","",61,null],[13,"EIO","","",61,null],[13,"ENXIO","","",61,null],[13,"E2BIG","","",61,null],[13,"ENOEXEC","","",61,null],[13,"EBADF","","",61,null],[13,"ECHILD","","",61,null],[13,"EAGAIN","","",61,null],[13,"ENOMEM","","",61,null],[13,"EACCES","","",61,null],[13,"EFAULT","","",61,null],[13,"ENOTBLK","","",61,null],[13,"EBUSY","","",61,null],[13,"EEXIST","","",61,null],[13,"EXDEV","","",61,null],[13,"ENODEV","","",61,null],[13,"ENOTDIR","","",61,null],[13,"EISDIR","","",61,null],[13,"EINVAL","","",61,null],[13,"ENFILE","","",61,null],[13,"EMFILE","","",61,null],[13,"ENOTTY","","",61,null],[13,"ETXTBSY","","",61,null],[13,"EFBIG","","",61,null],[13,"ENOSPC","","",61,null],[13,"ESPIPE","","",61,null],[13,"EROFS","","",61,null],[13,"EMLINK","","",61,null],[13,"EPIPE","","",61,null],[13,"EDOM","","",61,null],[13,"ERANGE","","",61,null],[13,"EDEADLK","","",61,null],[13,"ENAMETOOLONG","","",61,null],[13,"ENOLCK","","",61,null],[13,"ENOSYS","","",61,null],[13,"ENOTEMPTY","","",61,null],[13,"ELOOP","","",61,null],[13,"ENOMSG","","",61,null],[13,"EIDRM","","",61,null],[13,"ECHRNG","","",61,null],[13,"EL2NSYNC","","",61,null],[13,"EL3HLT","","",61,null],[13,"EL3RST","","",61,null],[13,"ELNRNG","","",61,null],[13,"EUNATCH","","",61,null],[13,"ENOCSI","","",61,null],[13,"EL2HLT","","",61,null],[13,"EBADE","","",61,null],[13,"EBADR","","",61,null],[13,"EXFULL","","",61,null],[13,"ENOANO","","",61,null],[13,"EBADRQC","","",61,null],[13,"EBADSLT","","",61,null],[13,"EBFONT","","",61,null],[13,"ENOSTR","","",61,null],[13,"ENODATA","","",61,null],[13,"ETIME","","",61,null],[13,"ENOSR","","",61,null],[13,"ENONET","","",61,null],[13,"ENOPKG","","",61,null],[13,"EREMOTE","","",61,null],[13,"ENOLINK","","",61,null],[13,"EADV","","",61,null],[13,"ESRMNT","","",61,null],[13,"ECOMM","","",61,null],[13,"EPROTO","","",61,null],[13,"EMULTIHOP","","",61,null],[13,"EDOTDOT","","",61,null],[13,"EBADMSG","","",61,null],[13,"EOVERFLOW","","",61,null],[13,"ENOTUNIQ","","",61,null],[13,"EBADFD","","",61,null],[13,"EREMCHG","","",61,null],[13,"ELIBACC","","",61,null],[13,"ELIBBAD","","",61,null],[13,"ELIBSCN","","",61,null],[13,"ELIBMAX","","",61,null],[13,"ELIBEXEC","","",61,null],[13,"EILSEQ","","",61,null],[13,"ERESTART","","",61,null],[13,"ESTRPIPE","","",61,null],[13,"EUSERS","","",61,null],[13,"ENOTSOCK","","",61,null],[13,"EDESTADDRREQ","","",61,null],[13,"EMSGSIZE","","",61,null],[13,"EPROTOTYPE","","",61,null],[13,"ENOPROTOOPT","","",61,null],[13,"EPROTONOSUPPORT","","",61,null],[13,"ESOCKTNOSUPPORT","","",61,null],[13,"EOPNOTSUPP","","",61,null],[13,"EPFNOSUPPORT","","",61,null],[13,"EAFNOSUPPORT","","",61,null],[13,"EADDRINUSE","","",61,null],[13,"EADDRNOTAVAIL","","",61,null],[13,"ENETDOWN","","",61,null],[13,"ENETUNREACH","","",61,null],[13,"ENETRESET","","",61,null],[13,"ECONNABORTED","","",61,null],[13,"ECONNRESET","","",61,null],[13,"ENOBUFS","","",61,null],[13,"EISCONN","","",61,null],[13,"ENOTCONN","","",61,null],[13,"ESHUTDOWN","","",61,null],[13,"ETOOMANYREFS","","",61,null],[13,"ETIMEDOUT","","",61,null],[13,"ECONNREFUSED","","",61,null],[13,"EHOSTDOWN","","",61,null],[13,"EHOSTUNREACH","","",61,null],[13,"EALREADY","","",61,null],[13,"EINPROGRESS","","",61,null],[13,"ESTALE","","",61,null],[13,"EUCLEAN","","",61,null],[13,"ENOTNAM","","",61,null],[13,"ENAVAIL","","",61,null],[13,"EISNAM","","",61,null],[13,"EREMOTEIO","","",61,null],[13,"EDQUOT","","",61,null],[13,"ENOMEDIUM","","",61,null],[13,"EMEDIUMTYPE","","",61,null],[13,"ECANCELED","","",61,null],[13,"ENOKEY","","",61,null],[13,"EKEYEXPIRED","","",61,null],[13,"EKEYREVOKED","","",61,null],[13,"EKEYREJECTED","","",61,null],[13,"EOWNERDEAD","","",61,null],[13,"ENOTRECOVERABLE","","",61,null],[13,"ERFKILL","","",61,null],[13,"EHWPOISON","","",61,null],[4,"Error","","",null,null],[13,"Sys","","",62,null],[13,"InvalidPath","","",62,null],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",61,null],[13,"EPERM","","",61,null],[13,"ENOENT","","",61,null],[13,"ESRCH","","",61,null],[13,"EINTR","","",61,null],[13,"EIO","","",61,null],[13,"ENXIO","","",61,null],[13,"E2BIG","","",61,null],[13,"ENOEXEC","","",61,null],[13,"EBADF","","",61,null],[13,"ECHILD","","",61,null],[13,"EAGAIN","","",61,null],[13,"ENOMEM","","",61,null],[13,"EACCES","","",61,null],[13,"EFAULT","","",61,null],[13,"ENOTBLK","","",61,null],[13,"EBUSY","","",61,null],[13,"EEXIST","","",61,null],[13,"EXDEV","","",61,null],[13,"ENODEV","","",61,null],[13,"ENOTDIR","","",61,null],[13,"EISDIR","","",61,null],[13,"EINVAL","","",61,null],[13,"ENFILE","","",61,null],[13,"EMFILE","","",61,null],[13,"ENOTTY","","",61,null],[13,"ETXTBSY","","",61,null],[13,"EFBIG","","",61,null],[13,"ENOSPC","","",61,null],[13,"ESPIPE","","",61,null],[13,"EROFS","","",61,null],[13,"EMLINK","","",61,null],[13,"EPIPE","","",61,null],[13,"EDOM","","",61,null],[13,"ERANGE","","",61,null],[13,"EDEADLK","","",61,null],[13,"ENAMETOOLONG","","",61,null],[13,"ENOLCK","","",61,null],[13,"ENOSYS","","",61,null],[13,"ENOTEMPTY","","",61,null],[13,"ELOOP","","",61,null],[13,"ENOMSG","","",61,null],[13,"EIDRM","","",61,null],[13,"ECHRNG","","",61,null],[13,"EL2NSYNC","","",61,null],[13,"EL3HLT","","",61,null],[13,"EL3RST","","",61,null],[13,"ELNRNG","","",61,null],[13,"EUNATCH","","",61,null],[13,"ENOCSI","","",61,null],[13,"EL2HLT","","",61,null],[13,"EBADE","","",61,null],[13,"EBADR","","",61,null],[13,"EXFULL","","",61,null],[13,"ENOANO","","",61,null],[13,"EBADRQC","","",61,null],[13,"EBADSLT","","",61,null],[13,"EBFONT","","",61,null],[13,"ENOSTR","","",61,null],[13,"ENODATA","","",61,null],[13,"ETIME","","",61,null],[13,"ENOSR","","",61,null],[13,"ENONET","","",61,null],[13,"ENOPKG","","",61,null],[13,"EREMOTE","","",61,null],[13,"ENOLINK","","",61,null],[13,"EADV","","",61,null],[13,"ESRMNT","","",61,null],[13,"ECOMM","","",61,null],[13,"EPROTO","","",61,null],[13,"EMULTIHOP","","",61,null],[13,"EDOTDOT","","",61,null],[13,"EBADMSG","","",61,null],[13,"EOVERFLOW","","",61,null],[13,"ENOTUNIQ","","",61,null],[13,"EBADFD","","",61,null],[13,"EREMCHG","","",61,null],[13,"ELIBACC","","",61,null],[13,"ELIBBAD","","",61,null],[13,"ELIBSCN","","",61,null],[13,"ELIBMAX","","",61,null],[13,"ELIBEXEC","","",61,null],[13,"EILSEQ","","",61,null],[13,"ERESTART","","",61,null],[13,"ESTRPIPE","","",61,null],[13,"EUSERS","","",61,null],[13,"ENOTSOCK","","",61,null],[13,"EDESTADDRREQ","","",61,null],[13,"EMSGSIZE","","",61,null],[13,"EPROTOTYPE","","",61,null],[13,"ENOPROTOOPT","","",61,null],[13,"EPROTONOSUPPORT","","",61,null],[13,"ESOCKTNOSUPPORT","","",61,null],[13,"EOPNOTSUPP","","",61,null],[13,"EPFNOSUPPORT","","",61,null],[13,"EAFNOSUPPORT","","",61,null],[13,"EADDRINUSE","","",61,null],[13,"EADDRNOTAVAIL","","",61,null],[13,"ENETDOWN","","",61,null],[13,"ENETUNREACH","","",61,null],[13,"ENETRESET","","",61,null],[13,"ECONNABORTED","","",61,null],[13,"ECONNRESET","","",61,null],[13,"ENOBUFS","","",61,null],[13,"EISCONN","","",61,null],[13,"ENOTCONN","","",61,null],[13,"ESHUTDOWN","","",61,null],[13,"ETOOMANYREFS","","",61,null],[13,"ETIMEDOUT","","",61,null],[13,"ECONNREFUSED","","",61,null],[13,"EHOSTDOWN","","",61,null],[13,"EHOSTUNREACH","","",61,null],[13,"EALREADY","","",61,null],[13,"EINPROGRESS","","",61,null],[13,"ESTALE","","",61,null],[13,"EUCLEAN","","",61,null],[13,"ENOTNAM","","",61,null],[13,"ENAVAIL","","",61,null],[13,"EISNAM","","",61,null],[13,"EREMOTEIO","","",61,null],[13,"EDQUOT","","",61,null],[13,"ENOMEDIUM","","",61,null],[13,"EMEDIUMTYPE","","",61,null],[13,"ECANCELED","","",61,null],[13,"ENOKEY","","",61,null],[13,"EKEYEXPIRED","","",61,null],[13,"EKEYREVOKED","","",61,null],[13,"EKEYREJECTED","","",61,null],[13,"EOWNERDEAD","","",61,null],[13,"ENOTRECOVERABLE","","",61,null],[13,"ERFKILL","","",61,null],[13,"EHWPOISON","","",61,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"eq","nix","",61,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[17,"EWOULDBLOCK","nix::errno","",null,null],[17,"EDEADLOCK","","",null,null],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed\ninformation about the error can be found in `errno`",null,null],[10,"sentinel","","",63,{"inputs":[],"output":{"name":"self"}}],[11,"last","nix","",61,{"inputs":[],"output":{"name":"self"}}],[11,"desc","","",61,null],[11,"from_i32","","",61,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",61,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This\nshould not be used when `-1` is not the errno sentinel value.",61,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"description","","",61,null],[11,"fmt","","",61,null],[11,"from","std::io::error","",64,{"inputs":[{"name":"errno"}],"output":{"name":"self"}}],[0,"features","nix","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"SpliceFFlags","nix::fcntl","",null,null],[3,"OFlag","","",null,null],[3,"FdFlag","","",null,null],[3,"SealFlag","","",null,null],[3,"flock","","",null,null],[12,"l_type","","",65,null],[12,"l_whence","","",65,null],[12,"l_start","","",65,null],[12,"l_len","","",65,null],[12,"l_pid","","",65,null],[12,"l_sysid","","",65,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",66,null],[13,"F_DUPFD_CLOEXEC","","",66,null],[13,"F_GETFD","","",66,null],[13,"F_SETFD","","",66,null],[13,"F_GETFL","","",66,null],[13,"F_SETFL","","",66,null],[13,"F_SETLK","","",66,null],[13,"F_SETLKW","","",66,null],[13,"F_GETLK","","",66,null],[13,"F_OFD_SETLK","","",66,null],[13,"F_OFD_SETLKW","","",66,null],[13,"F_OFD_GETLK","","",66,null],[13,"F_ADD_SEALS","","",66,null],[13,"F_GET_SEALS","","",66,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",67,null],[13,"LockExclusive","","",67,null],[13,"Unlock","","",67,null],[13,"LockSharedNonblock","","",67,null],[13,"LockExclusiveNonblock","","",67,null],[13,"UnlockNonblock","","",67,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[5,"splice","","",null,{"inputs":[{"name":"rawfd"},{"name":"option"},{"name":"rawfd"},{"name":"option"},{"name":"usize"},{"name":"splicefflags"}],"output":{"name":"result"}}],[5,"tee","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"usize"},{"name":"splicefflags"}],"output":{"name":"result"}}],[5,"vmsplice","","",null,null],[11,"fmt","","",65,null],[11,"default","","",65,{"inputs":[],"output":{"name":"flock"}}],[11,"clone","","",65,null],[11,"hash","","",68,null],[11,"cmp","","",68,null],[11,"partial_cmp","","",68,null],[11,"lt","","",68,null],[11,"le","","",68,null],[11,"gt","","",68,null],[11,"ge","","",68,null],[11,"clone","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"fmt","","",68,null],[11,"empty","","Returns an empty set of flags.",68,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"all","","Returns the set containing all flags.",68,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",68,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",68,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",68,{"inputs":[{"name":"c_uint"}],"output":{"name":"splicefflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",68,null],[11,"is_all","","Returns `true` if all flags are currently set.",68,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",68,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",68,null],[11,"insert","","Inserts the specified flags in-place.",68,null],[11,"remove","","Removes the specified flags in-place.",68,null],[11,"toggle","","Toggles the specified flags in-place.",68,null],[11,"bitor","","Returns the union of the two sets of flags.",68,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",68,null],[11,"bitand","","Returns the intersection between the two sets of flags.",68,null],[11,"sub","","Returns the set difference of the two sets of flags.",68,null],[11,"not","","Returns the complement of this set of flags.",68,null],[11,"from_iter","","",68,{"inputs":[{"name":"t"}],"output":{"name":"splicefflags"}}],[11,"hash","","",69,null],[11,"cmp","","",69,null],[11,"partial_cmp","","",69,null],[11,"lt","","",69,null],[11,"le","","",69,null],[11,"gt","","",69,null],[11,"ge","","",69,null],[11,"clone","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"fmt","","",69,null],[11,"empty","","Returns an empty set of flags.",69,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",69,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",69,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",69,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",69,{"inputs":[{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",69,null],[11,"is_all","","Returns `true` if all flags are currently set.",69,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",69,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",69,null],[11,"insert","","Inserts the specified flags in-place.",69,null],[11,"remove","","Removes the specified flags in-place.",69,null],[11,"toggle","","Toggles the specified flags in-place.",69,null],[11,"bitor","","Returns the union of the two sets of flags.",69,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",69,null],[11,"bitand","","Returns the intersection between the two sets of flags.",69,null],[11,"sub","","Returns the set difference of the two sets of flags.",69,null],[11,"not","","Returns the complement of this set of flags.",69,null],[11,"from_iter","","",69,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"hash","","",70,null],[11,"cmp","","",70,null],[11,"partial_cmp","","",70,null],[11,"lt","","",70,null],[11,"le","","",70,null],[11,"gt","","",70,null],[11,"ge","","",70,null],[11,"clone","","",70,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"fmt","","",70,null],[11,"empty","","Returns an empty set of flags.",70,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",70,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",70,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",70,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",70,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",70,null],[11,"is_all","","Returns `true` if all flags are currently set.",70,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",70,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",70,null],[11,"insert","","Inserts the specified flags in-place.",70,null],[11,"remove","","Removes the specified flags in-place.",70,null],[11,"toggle","","Toggles the specified flags in-place.",70,null],[11,"bitor","","Returns the union of the two sets of flags.",70,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",70,null],[11,"bitand","","Returns the intersection between the two sets of flags.",70,null],[11,"sub","","Returns the set difference of the two sets of flags.",70,null],[11,"not","","Returns the complement of this set of flags.",70,null],[11,"from_iter","","",70,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"hash","","",71,null],[11,"cmp","","",71,null],[11,"partial_cmp","","",71,null],[11,"lt","","",71,null],[11,"le","","",71,null],[11,"gt","","",71,null],[11,"ge","","",71,null],[11,"clone","","",71,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"fmt","","",71,null],[11,"empty","","Returns an empty set of flags.",71,{"inputs":[],"output":{"name":"sealflag"}}],[11,"all","","Returns the set containing all flags.",71,{"inputs":[],"output":{"name":"sealflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",71,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",71,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",71,{"inputs":[{"name":"c_int"}],"output":{"name":"sealflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",71,null],[11,"is_all","","Returns `true` if all flags are currently set.",71,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",71,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",71,null],[11,"insert","","Inserts the specified flags in-place.",71,null],[11,"remove","","Removes the specified flags in-place.",71,null],[11,"toggle","","Toggles the specified flags in-place.",71,null],[11,"bitor","","Returns the union of the two sets of flags.",71,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",71,null],[11,"bitand","","Returns the intersection between the two sets of flags.",71,null],[11,"sub","","Returns the set difference of the two sets of flags.",71,null],[11,"not","","Returns the complement of this set of flags.",71,null],[11,"from_iter","","",71,{"inputs":[{"name":"t"}],"output":{"name":"sealflag"}}],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"O_NDELAY","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[0,"mount","nix","",null,null],[3,"MsFlags","nix::mount","",null,null],[3,"MntFlags","","",null,null],[5,"mount","","",null,{"inputs":[{"name":"option"},{"name":"p2"},{"name":"option"},{"name":"msflags"},{"name":"option"}],"output":{"name":"result"}}],[5,"umount","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"umount2","","",null,{"inputs":[{"name":"p"},{"name":"mntflags"}],"output":{"name":"result"}}],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_VERBOSE","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_NOSEC","","",null,null],[17,"MS_BORN","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[11,"hash","","",72,null],[11,"cmp","","",72,null],[11,"partial_cmp","","",72,null],[11,"lt","","",72,null],[11,"le","","",72,null],[11,"gt","","",72,null],[11,"ge","","",72,null],[11,"clone","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"fmt","","",72,null],[11,"empty","","Returns an empty set of flags.",72,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",72,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",72,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",72,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",72,{"inputs":[{"name":"c_ulong"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",72,null],[11,"is_all","","Returns `true` if all flags are currently set.",72,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",72,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",72,null],[11,"insert","","Inserts the specified flags in-place.",72,null],[11,"remove","","Removes the specified flags in-place.",72,null],[11,"toggle","","Toggles the specified flags in-place.",72,null],[11,"bitor","","Returns the union of the two sets of flags.",72,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",72,null],[11,"bitand","","Returns the intersection between the two sets of flags.",72,null],[11,"sub","","Returns the set difference of the two sets of flags.",72,null],[11,"not","","Returns the complement of this set of flags.",72,null],[11,"from_iter","","",72,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[11,"hash","","",73,null],[11,"cmp","","",73,null],[11,"partial_cmp","","",73,null],[11,"lt","","",73,null],[11,"le","","",73,null],[11,"gt","","",73,null],[11,"ge","","",73,null],[11,"clone","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"fmt","","",73,null],[11,"empty","","Returns an empty set of flags.",73,{"inputs":[],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",73,{"inputs":[],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",73,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",73,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",73,{"inputs":[{"name":"c_int"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",73,null],[11,"is_all","","Returns `true` if all flags are currently set.",73,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",73,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",73,null],[11,"insert","","Inserts the specified flags in-place.",73,null],[11,"remove","","Removes the specified flags in-place.",73,null],[11,"toggle","","Toggles the specified flags in-place.",73,null],[11,"bitor","","Returns the union of the two sets of flags.",73,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",73,null],[11,"bitand","","Returns the intersection between the two sets of flags.",73,null],[11,"sub","","Returns the set difference of the two sets of flags.",73,null],[11,"not","","Returns the complement of this set of flags.",73,null],[11,"from_iter","","",73,{"inputs":[{"name":"t"}],"output":{"name":"mntflags"}}],[0,"mqueue","nix","Posix Message Queue functions",null,null],[3,"MQ_OFlag","nix::mqueue","",null,null],[3,"FdFlag","","",null,null],[3,"MqAttr","","",null,null],[12,"mq_flags","","",74,null],[12,"mq_maxmsg","","",74,null],[12,"mq_msgsize","","",74,null],[12,"mq_curmsgs","","",74,null],[5,"mq_open","","",null,{"inputs":[{"name":"cstring"},{"name":"mq_oflag"},{"name":"mode"},{"name":"option"}],"output":{"name":"result"}}],[5,"mq_unlink","","",null,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[5,"mq_close","","",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_setattr","","Set the attributes of the message queue. Only O_NONBLOCK can be set, everything else will be ignored\nReturns the old attributes\nIt is recommend to use the mq_set_nonblock() and mq_remove_nonblock() convenience functions as they are easier to use",null,{"inputs":[{"name":"mqd"},{"name":"mqattr"}],"output":{"name":"result"}}],[5,"mq_set_nonblock","","Convenience function.\nSets the O_NONBLOCK attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_remove_nonblock","","Convenience function.\nRemoves O_NONBLOCK attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[11,"hash","","",75,null],[11,"cmp","","",75,null],[11,"partial_cmp","","",75,null],[11,"lt","","",75,null],[11,"le","","",75,null],[11,"gt","","",75,null],[11,"ge","","",75,null],[11,"clone","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"fmt","","",75,null],[11,"empty","","Returns an empty set of flags.",75,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",75,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",75,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",75,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",75,{"inputs":[{"name":"c_int"}],"output":{"name":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",75,null],[11,"is_all","","Returns `true` if all flags are currently set.",75,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",75,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",75,null],[11,"insert","","Inserts the specified flags in-place.",75,null],[11,"remove","","Removes the specified flags in-place.",75,null],[11,"toggle","","Toggles the specified flags in-place.",75,null],[11,"bitor","","Returns the union of the two sets of flags.",75,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",75,null],[11,"bitand","","Returns the intersection between the two sets of flags.",75,null],[11,"sub","","Returns the set difference of the two sets of flags.",75,null],[11,"not","","Returns the complement of this set of flags.",75,null],[11,"from_iter","","",75,{"inputs":[{"name":"t"}],"output":{"name":"mq_oflag"}}],[11,"hash","","",76,null],[11,"cmp","","",76,null],[11,"partial_cmp","","",76,null],[11,"lt","","",76,null],[11,"le","","",76,null],[11,"gt","","",76,null],[11,"ge","","",76,null],[11,"clone","","",76,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"fmt","","",76,null],[11,"empty","","Returns an empty set of flags.",76,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",76,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",76,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",76,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",76,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",76,null],[11,"is_all","","Returns `true` if all flags are currently set.",76,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",76,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",76,null],[11,"insert","","Inserts the specified flags in-place.",76,null],[11,"remove","","Removes the specified flags in-place.",76,null],[11,"toggle","","Toggles the specified flags in-place.",76,null],[11,"bitor","","Returns the union of the two sets of flags.",76,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",76,null],[11,"bitand","","Returns the intersection between the two sets of flags.",76,null],[11,"sub","","Returns the set difference of the two sets of flags.",76,null],[11,"not","","Returns the complement of this set of flags.",76,null],[11,"from_iter","","",76,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[6,"MQd","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"new","","",74,{"inputs":[{"name":"c_long"},{"name":"c_long"},{"name":"c_long"},{"name":"c_long"}],"output":{"name":"mqattr"}}],[0,"poll","nix","",null,null],[3,"PollFd","nix::poll","",null,null],[12,"fd","","",77,null],[12,"events","","",77,null],[12,"revents","","",77,null],[3,"EventFlags","","",null,null],[5,"poll","","",null,null],[11,"hash","","",78,null],[11,"cmp","","",78,null],[11,"partial_cmp","","",78,null],[11,"lt","","",78,null],[11,"le","","",78,null],[11,"gt","","",78,null],[11,"ge","","",78,null],[11,"clone","","",78,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"fmt","","",78,null],[11,"empty","","Returns an empty set of flags.",78,{"inputs":[],"output":{"name":"eventflags"}}],[11,"all","","Returns the set containing all flags.",78,{"inputs":[],"output":{"name":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",78,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",78,{"inputs":[{"name":"c_short"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",78,{"inputs":[{"name":"c_short"}],"output":{"name":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",78,null],[11,"is_all","","Returns `true` if all flags are currently set.",78,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",78,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",78,null],[11,"insert","","Inserts the specified flags in-place.",78,null],[11,"remove","","Removes the specified flags in-place.",78,null],[11,"toggle","","Toggles the specified flags in-place.",78,null],[11,"bitor","","Returns the union of the two sets of flags.",78,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",78,null],[11,"bitand","","Returns the intersection between the two sets of flags.",78,null],[11,"sub","","Returns the set difference of the two sets of flags.",78,null],[11,"not","","Returns the complement of this set of flags.",78,null],[11,"from_iter","","",78,{"inputs":[{"name":"t"}],"output":{"name":"eventflags"}}],[11,"fmt","","",77,null],[11,"clone","","",77,null],[6,"nfds_t","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[0,"net","nix","",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[5,"if_nametoindex","nix::net::if_","Resolve an interface into a interface number.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[0,"sched","nix","",null,null],[3,"CloneFlags","nix::sched","",null,null],[3,"CpuSet","","",null,null],[5,"sched_setaffinity","","",null,{"inputs":[{"name":"isize"},{"name":"cpuset"}],"output":{"name":"result"}}],[5,"clone","","",null,null],[5,"unshare","","",null,{"inputs":[{"name":"cloneflags"}],"output":{"name":"result"}}],[5,"setns","","",null,{"inputs":[{"name":"rawfd"},{"name":"cloneflags"}],"output":{"name":"result"}}],[6,"CloneCb","","",null,null],[6,"CpuMask","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[11,"hash","","",79,null],[11,"cmp","","",79,null],[11,"partial_cmp","","",79,null],[11,"lt","","",79,null],[11,"le","","",79,null],[11,"gt","","",79,null],[11,"ge","","",79,null],[11,"clone","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"fmt","","",79,null],[11,"empty","","Returns an empty set of flags.",79,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"all","","Returns the set containing all flags.",79,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",79,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",79,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",79,{"inputs":[{"name":"c_int"}],"output":{"name":"cloneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",79,null],[11,"is_all","","Returns `true` if all flags are currently set.",79,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",79,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",79,null],[11,"insert","","Inserts the specified flags in-place.",79,null],[11,"remove","","Removes the specified flags in-place.",79,null],[11,"toggle","","Toggles the specified flags in-place.",79,null],[11,"bitor","","Returns the union of the two sets of flags.",79,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",79,null],[11,"bitand","","Returns the intersection between the two sets of flags.",79,null],[11,"sub","","Returns the set difference of the two sets of flags.",79,null],[11,"not","","Returns the complement of this set of flags.",79,null],[11,"from_iter","","",79,{"inputs":[{"name":"t"}],"output":{"name":"cloneflags"}}],[11,"clone","","",80,null],[11,"new","","",80,{"inputs":[],"output":{"name":"cpuset"}}],[11,"set","","",80,null],[11,"unset","","",80,null],[0,"sys","nix","",null,null],[0,"epoll","nix::sys","",null,null],[3,"EpollEventKind","nix::sys::epoll","",null,null],[3,"EpollEvent","","",null,null],[12,"events","","",81,null],[12,"data","","",81,null],[4,"EpollOp","","",null,null],[13,"EpollCtlAdd","","",82,null],[13,"EpollCtlDel","","",82,null],[13,"EpollCtlMod","","",82,null],[5,"epoll_create","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"epoll_ctl","","",null,{"inputs":[{"name":"rawfd"},{"name":"epollop"},{"name":"rawfd"},{"name":"epollevent"}],"output":{"name":"result"}}],[5,"epoll_wait","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"EPOLLET","","",null,null],[11,"hash","","",83,null],[11,"cmp","","",83,null],[11,"partial_cmp","","",83,null],[11,"lt","","",83,null],[11,"le","","",83,null],[11,"gt","","",83,null],[11,"ge","","",83,null],[11,"clone","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"fmt","","",83,null],[11,"empty","","Returns an empty set of flags.",83,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",83,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",83,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",83,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",83,{"inputs":[{"name":"u32"}],"output":{"name":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",83,null],[11,"is_all","","Returns `true` if all flags are currently set.",83,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",83,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",83,null],[11,"insert","","Inserts the specified flags in-place.",83,null],[11,"remove","","Removes the specified flags in-place.",83,null],[11,"toggle","","Toggles the specified flags in-place.",83,null],[11,"bitor","","Returns the union of the two sets of flags.",83,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",83,null],[11,"bitand","","Returns the intersection between the two sets of flags.",83,null],[11,"sub","","Returns the set difference of the two sets of flags.",83,null],[11,"not","","Returns the complement of this set of flags.",83,null],[11,"from_iter","","",83,{"inputs":[{"name":"t"}],"output":{"name":"epolleventkind"}}],[11,"clone","","",82,null],[11,"clone","","",81,null],[0,"memfd","nix::sys","",null,null],[3,"MemFdCreateFlag","nix::sys::memfd","",null,null],[5,"memfd_create","","",null,{"inputs":[{"name":"cstr"},{"name":"memfdcreateflag"}],"output":{"name":"result"}}],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[11,"hash","","",84,null],[11,"cmp","","",84,null],[11,"partial_cmp","","",84,null],[11,"lt","","",84,null],[11,"le","","",84,null],[11,"gt","","",84,null],[11,"ge","","",84,null],[11,"clone","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"fmt","","",84,null],[11,"empty","","Returns an empty set of flags.",84,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"all","","Returns the set containing all flags.",84,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",84,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",84,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",84,{"inputs":[{"name":"c_uint"}],"output":{"name":"memfdcreateflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",84,null],[11,"is_all","","Returns `true` if all flags are currently set.",84,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",84,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",84,null],[11,"insert","","Inserts the specified flags in-place.",84,null],[11,"remove","","Removes the specified flags in-place.",84,null],[11,"toggle","","Toggles the specified flags in-place.",84,null],[11,"bitor","","Returns the union of the two sets of flags.",84,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",84,null],[11,"bitand","","Returns the intersection between the two sets of flags.",84,null],[11,"sub","","Returns the set difference of the two sets of flags.",84,null],[11,"not","","Returns the complement of this set of flags.",84,null],[11,"from_iter","","",84,{"inputs":[{"name":"t"}],"output":{"name":"memfdcreateflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[4,"c_void","nix::sys::ioctl::libc","",null,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[5,"isalnum","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isalpha","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"iscntrl","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isgraph","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"islower","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isprint","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"ispunct","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isspace","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isupper","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isxdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"tolower","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"toupper","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"atof","","",null,null],[5,"labs","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"rand","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"srand","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[5,"ioctl","","",null,{"inputs":[{"name":"i32"},{"name":"u64"}],"output":{"name":"i32"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"epoll_create","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"recvfrom","","",null,null],[17,"ETIMEDOUT","","",null,null],[5,"sigdelset","","",null,null],[17,"PM_STR","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[6,"mqd_t","","",null,null],[5,"scanf","","",null,null],[17,"S_IXOTH","","",null,null],[6,"mode_t","","",null,null],[5,"pthread_cond_signal","","",null,null],[17,"VTIME","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[5,"if_nametoindex","","",null,null],[17,"VMIN","","",null,null],[5,"pthread_setspecific","","",null,null],[17,"MON_12","","",null,null],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[17,"QFMT_VFS_OLD","","",null,null],[6,"in_port_t","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[5,"chown","","",null,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",39,null],[12,"dqb_bsoftlimit","","",39,null],[12,"dqb_curspace","","",39,null],[12,"dqb_ihardlimit","","",39,null],[12,"dqb_isoftlimit","","",39,null],[12,"dqb_curinodes","","",39,null],[12,"dqb_btime","","",39,null],[12,"dqb_itime","","",39,null],[12,"dqb_valid","","",39,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[3,"cpu_set_t","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"LC_PAPER","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"SIGTRAP","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"DT_SOCK","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"IPC_SET","","",null,null],[5,"mkdir","","",null,null],[17,"O_EXCL","","",null,null],[5,"tcgetattr","","",null,null],[5,"mq_setattr","","",null,null],[17,"EHWPOISON","","",null,null],[5,"dladdr","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"SIGWINCH","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"MS_SHARED","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[5,"readahead","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"usize"}],"output":{"name":"isize"}}],[5,"pthread_attr_setstacksize","","",null,null],[5,"signalfd","","",null,null],[5,"opendir","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[5,"shmat","","",null,null],[17,"EDQUOT","","",null,null],[6,"blksize_t","","",null,null],[17,"MON_3","","",null,null],[17,"INLCR","","",null,null],[17,"SHUT_RD","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"ABMON_11","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"EL2HLT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"POLLERR","","",null,null],[5,"readv","","",null,null],[17,"IPC_RMID","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"MS_NOUSER","","",null,null],[3,"statfs","","",null,null],[12,"f_type","","",49,null],[12,"f_bsize","","",49,null],[12,"f_blocks","","",49,null],[12,"f_bfree","","",49,null],[12,"f_bavail","","",49,null],[12,"f_files","","",49,null],[12,"f_ffree","","",49,null],[12,"f_fsid","","",49,null],[12,"f_namelen","","",49,null],[12,"f_frsize","","",49,null],[17,"_SC_2_C_DEV","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[5,"preadv","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"MS_NODEV","","",null,null],[17,"TCIOFF","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIGTSTP","","",null,null],[5,"futimes","","",null,null],[17,"TCSETA","","",null,null],[17,"VEOL2","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",42,null],[12,"mq_maxmsg","","",42,null],[12,"mq_msgsize","","",42,null],[12,"mq_curmsgs","","",42,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[5,"dlsym","","",null,null],[5,"fstatfs","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"SHM_RND","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[5,"sysctl","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[5,"setlocale","","",null,null],[5,"madvise","","",null,null],[5,"cfgetispeed","","",null,null],[5,"tmpfile64","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"PTRACE_KILL","","",null,null],[6,"time_t","","",null,null],[17,"CLONE_VM","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SIGUSR1","","",null,null],[17,"TCP_CORK","","",null,null],[5,"utimensat","","",null,null],[5,"shutdown","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"S_IRWXO","","",null,null],[17,"MON_10","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[5,"alarm","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"pwrite64","","",null,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[17,"ELIBEXEC","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[5,"getsid","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"CR0","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[5,"nl_langinfo","","",null,null],[17,"ECHRNG","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[5,"printf","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"MADV_DOFORK","","",null,null],[4,"fpos64_t","","",null,null],[17,"SIGKILL","","",null,null],[3,"sigset_t","","",null,null],[17,"VWERASE","","",null,null],[5,"select","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"EPIPE","","",null,null],[5,"sched_getscheduler","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"SO_DONTROUTE","","",null,null],[5,"munlock","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[3,"lconv","","",null,null],[12,"decimal_point","","",27,null],[12,"thousands_sep","","",27,null],[12,"grouping","","",27,null],[12,"int_curr_symbol","","",27,null],[12,"currency_symbol","","",27,null],[12,"mon_decimal_point","","",27,null],[12,"mon_thousands_sep","","",27,null],[12,"mon_grouping","","",27,null],[12,"positive_sign","","",27,null],[12,"negative_sign","","",27,null],[12,"int_frac_digits","","",27,null],[12,"frac_digits","","",27,null],[12,"p_cs_precedes","","",27,null],[12,"p_sep_by_space","","",27,null],[12,"n_cs_precedes","","",27,null],[12,"n_sep_by_space","","",27,null],[12,"p_sign_posn","","",27,null],[12,"n_sign_posn","","",27,null],[12,"int_p_cs_precedes","","",27,null],[12,"int_p_sep_by_space","","",27,null],[12,"int_n_cs_precedes","","",27,null],[12,"int_n_sep_by_space","","",27,null],[12,"int_p_sign_posn","","",27,null],[12,"int_n_sign_posn","","",27,null],[5,"syscall","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[17,"ERA_D_FMT","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[5,"mmap64","","",null,null],[17,"TOSTOP","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"S_ISVTX","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"ENOTDIR","","",null,null],[17,"S_IEXEC","","",null,null],[17,"IEXTEN","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"PROT_READ","","",null,null],[17,"DAY_1","","",null,null],[17,"IXOFF","","",null,null],[5,"utime","","",null,null],[17,"LC_ALL_MASK","","",null,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",24,null],[12,"dli_fbase","","",24,null],[12,"dli_sname","","",24,null],[12,"dli_saddr","","",24,null],[17,"TCXONC","","",null,null],[5,"sched_setscheduler","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[5,"readdir_r","","",null,null],[17,"MS_MGC_MSK","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",60,null],[12,"uc_link","","",60,null],[12,"uc_stack","","",60,null],[12,"uc_mcontext","","",60,null],[12,"uc_sigmask","","",60,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"SIG_IGN","","",null,null],[5,"fchmod","","",null,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"i32"}}],[17,"MNT_FORCE","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",44,null],[12,"sa_mask","","",44,null],[12,"sa_flags","","",44,null],[5,"freeaddrinfo","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[5,"unshare","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"MAP_FIXED","","",null,null],[5,"getsockname","","",null,null],[5,"setxattr","","",null,null],[5,"getpgrp","","",null,{"inputs":[],"output":{"name":"i32"}}],[6,"wchar_t","","",null,null],[5,"posix_fadvise","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_2_C_BIND","","",null,null],[17,"S_IRGRP","","",null,null],[17,"EIDRM","","",null,null],[17,"VEOF","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"SYS_perf_event_open","","",null,null],[4,"DIR","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[5,"memrchr","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"ELIBBAD","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[5,"telldir","","",null,null],[17,"MON_7","","",null,null],[5,"FD_ZERO","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"TIOCINQ","","",null,null],[17,"ERESTART","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[5,"backtrace","","",null,null],[17,"IGNPAR","","",null,null],[5,"rewinddir","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[5,"forkpty","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"MAP_NORESERVE","","",null,null],[5,"dlerror","","",null,null],[5,"freopen64","","",null,null],[17,"ECHONL","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"TCOON","","",null,null],[5,"epoll_wait","","",null,null],[17,"S_IWOTH","","",null,null],[17,"TCGETA","","",null,null],[5,"openpty","","",null,null],[5,"execv","","",null,null],[17,"TIOCSTI","","",null,null],[17,"Q_SETINFO","","",null,null],[5,"pthread_attr_destroy","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"ABMON_6","","",null,null],[3,"fsid_t","","",null,null],[17,"SA_NODEFER","","",null,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",45,null],[12,"ss_flags","","",45,null],[12,"ss_size","","",45,null],[5,"fallocate","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i32"}}],[17,"SA_ONSTACK","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"SHM_W","","",null,null],[17,"EREMOTEIO","","",null,null],[5,"memalign","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[17,"SHUT_WR","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[5,"nanosleep","","",null,null],[4,"locale_t","","",null,null],[17,"D_T_FMT","","",null,null],[5,"mq_getattr","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[6,"sighandler_t","","",null,null],[17,"EADV","","",null,null],[17,"SIGTERM","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"EFBIG","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"ECHOE","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"ST_NOATIME","","",null,null],[5,"gettimeofday","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"POLLHUP","","",null,null],[17,"ENOPKG","","",null,null],[17,"ETOOMANYREFS","","",null,null],[5,"getrlimit","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"SIGIO","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"PENDIN","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[5,"sigemptyset","","",null,null],[17,"PTRACE_DETACH","","",null,null],[5,"snprintf","","",null,null],[17,"EMLINK","","",null,null],[17,"TCION","","",null,null],[17,"S_IFREG","","",null,null],[17,"CRNCYSTR","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"lseek64","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i64"}}],[17,"ABMON_12","","",null,null],[5,"pclose","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOCK_SH","","",null,null],[17,"TCSETAF","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"SIGIOT","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"LC_NUMERIC","","",null,null],[5,"pwritev","","",null,null],[17,"S_ISUID","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[3,"flock","","",null,null],[12,"l_type","","",52,null],[12,"l_whence","","",52,null],[12,"l_start","","",52,null],[12,"l_len","","",52,null],[12,"l_pid","","",52,null],[17,"EBADSLT","","",null,null],[5,"fstatvfs","","",null,null],[5,"setuid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[17,"Q_SYNC","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"T_FMT","","",null,null],[5,"realpath","","",null,null],[6,"fsblkcnt_t","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"LC_NAME","","",null,null],[5,"FD_ISSET","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"ST_RELATIME","","",null,null],[5,"sched_get_priority_min","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"ABMON_3","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"SCHED_BATCH","","",null,null],[5,"listxattr","","",null,null],[17,"SIGABRT","","",null,null],[17,"IMAXBEL","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"ENOEXEC","","",null,null],[6,"useconds_t","","",null,null],[3,"utsname","","",null,null],[12,"sysname","","",26,null],[12,"nodename","","",26,null],[12,"release","","",26,null],[12,"version","","",26,null],[12,"machine","","",26,null],[12,"domainname","","",26,null],[17,"ENOMEDIUM","","",null,null],[17,"TAB0","","",null,null],[17,"ENOCSI","","",null,null],[6,"blkcnt_t","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[5,"fgetxattr","","",null,null],[5,"fopen64","","",null,null],[17,"F_GETFD","","",null,null],[17,"SIGTTIN","","",null,null],[5,"clock_getres","","",null,null],[17,"SO_TYPE","","",null,null],[17,"IGNCR","","",null,null],[5,"listen","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"EADDRNOTAVAIL","","",null,null],[6,"fsfilcnt_t","","",null,null],[17,"TAB2","","",null,null],[5,"read","","",null,null],[17,"F_SETFD","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[5,"uname","","",null,null],[17,"ABDAY_4","","",null,null],[5,"pause","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"mkstemp","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[5,"getopt","","",null,null],[17,"EBADMSG","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"DT_DIR","","",null,null],[17,"Q_GETQUOTA","","",null,null],[5,"prctl","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"MS_POSIXACL","","",null,null],[5,"vmsplice","","",null,null],[17,"CLONE_FS","","",null,null],[17,"LOCK_UN","","",null,null],[17,"ICRNL","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGSTKFLT","","",null,null],[5,"clock_gettime","","",null,null],[17,"MON_6","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"IUTF8","","",null,null],[6,"shmatt_t","","",null,null],[17,"CS5","","",null,null],[5,"cfsetispeed","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOTCONN","","",null,null],[17,"EPERM","","",null,null],[17,"O_RSYNC","","",null,null],[17,"MAP_STACK","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"O_SYNC","","",null,null],[17,"EXFULL","","",null,null],[17,"CLONE_IO","","",null,null],[17,"MON_4","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"POLLIN","","",null,null],[6,"off64_t","","",null,null],[17,"SIGINT","","",null,null],[17,"MON_5","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[5,"setgid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[17,"SIGVTALRM","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[6,"speed_t","","",null,null],[17,"ISTRIP","","",null,null],[17,"SEEK_END","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[6,"c_char","","",null,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[17,"MON_9","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"E2BIG","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EILSEQ","","",null,null],[17,"AF_INET6","","",null,null],[17,"BS1","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[5,"sendto","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[6,"nlink_t","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"SOCK_STREAM","","",null,null],[5,"posix_madvise","","",null,null],[5,"readlink","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[5,"write","","",null,null],[5,"fstat","","",null,null],[6,"nfds_t","","",null,null],[17,"O_RDONLY","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[6,"gid_t","","",null,null],[17,"MON_8","","",null,null],[17,"FIONREAD","","",null,null],[5,"pthread_cond_wait","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"PROT_NONE","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"DT_CHR","","",null,null],[17,"PATH_MAX","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",56,null],[12,"st_ino","","",56,null],[12,"st_nlink","","",56,null],[12,"st_mode","","",56,null],[12,"st_uid","","",56,null],[12,"st_gid","","",56,null],[12,"st_rdev","","",56,null],[12,"st_size","","",56,null],[12,"st_blksize","","",56,null],[12,"st_blocks","","",56,null],[12,"st_atime","","",56,null],[12,"st_atime_nsec","","",56,null],[12,"st_mtime","","",56,null],[12,"st_mtime_nsec","","",56,null],[12,"st_ctime","","",56,null],[12,"st_ctime_nsec","","",56,null],[17,"ABMON_1","","",null,null],[5,"getgroups","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[5,"pwrite","","",null,null],[5,"setcontext","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EDOM","","",null,null],[17,"S_IFMT","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGSEGV","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[3,"pthread_cond_t","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"ENOMSG","","",null,null],[5,"flock","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"EPOLLONESHOT","","",null,null],[17,"EMFILE","","",null,null],[3,"fd_set","","",null,null],[17,"TIOCGPGRP","","",null,null],[5,"access","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[5,"chmod","","",null,null],[17,"MS_STRICTATIME","","",null,null],[6,"c_long","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"SIGUSR2","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"NL0","","",null,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",23,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[6,"loff_t","","",null,null],[5,"closedir","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"MADV_NORMAL","","",null,null],[5,"setsid","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"CR3","","",null,null],[5,"getpeername","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"O_DSYNC","","",null,null],[17,"EDEADLOCK","","",null,null],[5,"mq_receive","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"FF0","","",null,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[17,"ABDAY_6","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"L_tmpnam","","",null,null],[6,"pthread_t","","",null,null],[17,"EREMCHG","","",null,null],[6,"pid_t","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[5,"globfree","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"ENOLINK","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"VQUIT","","",null,null],[17,"ELIBMAX","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[5,"freeifaddrs","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"O_DIRECT","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"F_LOCK","","",null,null],[17,"SIGCHLD","","",null,null],[5,"readdir64_r","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"O_TRUNC","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[5,"fsetpos64","","",null,null],[17,"ENOTBLK","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"DAY_5","","",null,null],[17,"F_DUPFD","","",null,null],[17,"SIGTTOU","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[3,"pthread_rwlock_t","","",null,null],[17,"O_FSYNC","","",null,null],[17,"S_IRWXU","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"SIG_ERR","","",null,null],[5,"creat64","","",null,null],[3,"dirent64","","",null,null],[12,"d_ino","","",29,null],[12,"d_off","","",29,null],[12,"d_reclen","","",29,null],[12,"d_type","","",29,null],[12,"d_name","","",29,null],[17,"SO_REUSEPORT","","",null,null],[5,"mkfifo","","",null,null],[17,"DT_FIFO","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"W_OK","","",null,null],[5,"posix_memalign","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[5,"removexattr","","",null,null],[17,"SIGSYS","","",null,null],[17,"CR2","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"TCP_CONGESTION","","",null,null],[5,"fseeko64","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"PARENB","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"USRQUOTA","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[5,"sigaltstack","","",null,null],[17,"EPOLLET","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[5,"getlogin","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EOF","","",null,null],[5,"shm_unlink","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"ESRCH","","",null,null],[17,"MS_SLAVE","","",null,null],[5,"ftruncate64","","",null,{"inputs":[{"name":"i32"},{"name":"i64"}],"output":{"name":"i32"}}],[5,"pthread_attr_getguardsize","","",null,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"SEEK_SET","","",null,null],[17,"O_CREAT","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"EROFS","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"F_TEST","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"TCIOFLUSH","","",null,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"ucred","","",null,null],[12,"pid","","",48,null],[12,"uid","","",48,null],[12,"gid","","",48,null],[5,"mq_send","","",null,null],[17,"EPOLLERR","","",null,null],[17,"TAB3","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[6,"clockid_t","","",null,null],[17,"VREPRINT","","",null,null],[17,"VEOL","","",null,null],[17,"SHM_RDONLY","","",null,null],[5,"unsetenv","","",null,null],[17,"S_ISGID","","",null,null],[5,"open64","","",null,null],[6,"ino64_t","","",null,null],[5,"connect","","",null,null],[5,"dlopen","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"ICANON","","",null,null],[17,"TIOCMSET","","",null,null],[5,"llistxattr","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"F_SETLK","","",null,null],[17,"VDISCARD","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"EBADFD","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ERANGE","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"ENOSR","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"CR1","","",null,null],[17,"IXANY","","",null,null],[17,"CLOCAL","","",null,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[17,"IFF_LOOPBACK","","",null,null],[17,"S_IFIFO","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"QIF_ALL","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"EKEYREVOKED","","",null,null],[5,"mlock","","",null,null],[17,"TCFLSH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[17,"TCOFLUSH","","",null,null],[5,"CPU_SET","","",null,null],[17,"ENXIO","","",null,null],[17,"S_IFLNK","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"NL1","","",null,null],[17,"ENOBUFS","","",null,null],[5,"sigwaitinfo","","",null,null],[17,"ST_WRITE","","",null,null],[3,"termios","","",null,null],[12,"c_iflag","","",51,null],[12,"c_oflag","","",51,null],[12,"c_cflag","","",51,null],[12,"c_lflag","","",51,null],[12,"c_line","","",51,null],[12,"c_cc","","",51,null],[12,"c_ispeed","","",51,null],[12,"c_ospeed","","",51,null],[5,"sleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[17,"PROT_EXEC","","",null,null],[5,"sendfile","","",null,null],[6,"dev_t","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"EISDIR","","",null,null],[17,"VERASE","","",null,null],[17,"YESSTR","","",null,null],[17,"RLIMIT_RSS","","",null,null],[5,"setsockopt","","",null,null],[17,"EEXIST","","",null,null],[17,"DT_REG","","",null,null],[5,"tee","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"usize"},{"name":"u32"}],"output":{"name":"isize"}}],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"DT_BLK","","",null,null],[17,"MON_2","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"SA_RESTART","","",null,null],[5,"fstat64","","",null,null],[17,"ENOSYS","","",null,null],[17,"MAP_ANON","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"VSUSP","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"EUCLEAN","","",null,null],[17,"POLLPRI","","",null,null],[5,"lremovexattr","","",null,null],[5,"mlockall","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"sigwait","","",null,null],[17,"THOUSEP","","",null,null],[17,"FLUSHO","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ELOOP","","",null,null],[5,"pthread_sigmask","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"SEEK_CUR","","",null,null],[5,"ftello","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"TCSETAW","","",null,null],[17,"AF_PACKET","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"AM_STR","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"EIO","","",null,null],[17,"SOL_SOCKET","","",null,null],[5,"pread64","","",null,null],[5,"chdir","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"F_TLOCK","","",null,null],[17,"ELIBACC","","",null,null],[5,"ptrace","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i64"}}],[17,"BS0","","",null,null],[3,"stat64","","",null,null],[12,"st_dev","","",57,null],[12,"st_ino","","",57,null],[12,"st_nlink","","",57,null],[12,"st_mode","","",57,null],[12,"st_uid","","",57,null],[12,"st_gid","","",57,null],[12,"st_rdev","","",57,null],[12,"st_size","","",57,null],[12,"st_blksize","","",57,null],[12,"st_blocks","","",57,null],[12,"st_atime","","",57,null],[12,"st_atime_nsec","","",57,null],[12,"st_mtime","","",57,null],[12,"st_mtime_nsec","","",57,null],[12,"st_ctime","","",57,null],[12,"st_ctime_nsec","","",57,null],[6,"tcflag_t","","",null,null],[17,"MS_SILENT","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_DETACHED","","",null,null],[5,"cfgetospeed","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"BRKINT","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"S_IFBLK","","",null,null],[17,"ECHILD","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"TCP_INFO","","",null,null],[17,"IXON","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"EBADRQC","","",null,null],[6,"nl_item","","",null,null],[5,"getxattr","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"HUPCL","","",null,null],[5,"swapcontext","","",null,null],[17,"RAND_MAX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_UNIX","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"F_GETLK","","",null,null],[5,"mkdtemp","","",null,null],[17,"EPROTO","","",null,null],[5,"statvfs","","",null,null],[17,"MS_SYNC","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"QIF_ILIMITS","","",null,null],[5,"pipe2","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[5,"getppid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"sched_get_priority_max","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"pthread_detach","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"i32"}}],[17,"SFD_CLOEXEC","","",null,null],[5,"bind","","",null,null],[5,"uselocale","","",null,{"inputs":[{"name":"locale_t"}],"output":{"name":"locale_t"}}],[17,"TCSETSW","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[5,"getnameinfo","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"ECHO","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"CSIZE","","",null,null],[3,"pthread_mutex_t","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"IGNBRK","","",null,null],[5,"lstat","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[5,"globfree64","","",null,null],[17,"ECONNRESET","","",null,null],[5,"fdopen","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"GLOB_MARK","","",null,null],[5,"wait","","",null,null],[17,"RLIMIT_DATA","","",null,null],[5,"ftello64","","",null,null],[3,"msghdr","","",null,null],[12,"msg_name","","",50,null],[12,"msg_namelen","","",50,null],[12,"msg_iov","","",50,null],[12,"msg_iovlen","","",50,null],[12,"msg_control","","",50,null],[12,"msg_controllen","","",50,null],[12,"msg_flags","","",50,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"S_IWUSR","","",null,null],[5,"fseeko","","",null,null],[17,"S_IWRITE","","",null,null],[17,"EDESTADDRREQ","","",null,null],[5,"sched_yield","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"EINVAL","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"NOFLSH","","",null,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",40,null],[12,"ssi_errno","","",40,null],[12,"ssi_code","","",40,null],[12,"ssi_pid","","",40,null],[12,"ssi_uid","","",40,null],[12,"ssi_fd","","",40,null],[12,"ssi_tid","","",40,null],[12,"ssi_band","","",40,null],[12,"ssi_overrun","","",40,null],[12,"ssi_trapno","","",40,null],[12,"ssi_status","","",40,null],[12,"ssi_int","","",40,null],[12,"ssi_ptr","","",40,null],[12,"ssi_utime","","",40,null],[12,"ssi_stime","","",40,null],[12,"ssi_addr","","",40,null],[5,"tcdrain","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"CLONE_NEWNS","","",null,null],[5,"sigaction","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"DAY_2","","",null,null],[5,"epoll_ctl","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[5,"pthread_key_delete","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"getsockopt","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"ENOLCK","","",null,null],[17,"TAB1","","",null,null],[6,"rlim_t","","",null,null],[17,"ABDAY_7","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"INPCK","","",null,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[5,"gai_strerror","","",null,null],[17,"ABMON_10","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"dup3","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"EBUSY","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[5,"umount","","",null,null],[5,"duplocale","","",null,{"inputs":[{"name":"locale_t"}],"output":{"name":"locale_t"}}],[5,"mq_open","","",null,null],[17,"CODESET","","",null,null],[5,"writev","","",null,null],[5,"ttyname","","",null,null],[17,"ENOMEM","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"ABMON_2","","",null,null],[17,"O_APPEND","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"ENOTTY","","",null,null],[5,"setenv","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"ST_APPEND","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SIGSTOP","","",null,null],[5,"putenv","","",null,null],[17,"EAGAIN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"IPC_INFO","","",null,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[5,"gmtime_r","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[5,"lgetxattr","","",null,null],[17,"O_NONBLOCK","","",null,null],[5,"utimes","","",null,null],[5,"fgetpos64","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"SYS_gettid","","",null,null],[6,"pthread_key_t","","",null,null],[5,"splice","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"OPOST","","",null,null],[5,"clone","","",null,null],[17,"SIG_DFL","","",null,null],[5,"flistxattr","","",null,null],[17,"ESTALE","","",null,null],[5,"epoll_pwait","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"getuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[3,"siginfo_t","","",null,null],[12,"si_signo","","",46,null],[12,"si_errno","","",46,null],[12,"si_code","","",46,null],[12,"_pad","","",46,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"MNT_DETACH","","",null,null],[5,"mkstemps","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[5,"pthread_key_create","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"ECONNABORTED","","",null,null],[5,"open","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[5,"sigismember","","",null,null],[17,"S_IXUSR","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"ENOTUNIQ","","",null,null],[5,"link","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"glob","","",null,null],[17,"ERFKILL","","",null,null],[17,"ECHOCTL","","",null,null],[17,"SIGQUIT","","",null,null],[17,"DAY_4","","",null,null],[17,"PARMRK","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"socketpair","","",null,null],[5,"munlockall","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"SIGSTKSZ","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[5,"getrusage","","",null,null],[17,"ABMON_9","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"IPC_STAT","","",null,null],[5,"poll","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[5,"prlimit64","","",null,null],[17,"BUFSIZ","","",null,null],[5,"waitpid","","",null,null],[17,"IPPROTO_RAW","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[17,"S_IWGRP","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[5,"mincore","","",null,null],[17,"R_OK","","",null,null],[5,"kill","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"symlink","","",null,null],[17,"MAP_32BIT","","",null,null],[5,"fork","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"Q_QUOTAOFF","","",null,null],[17,"O_DIRECTORY","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"sethostname","","",null,null],[17,"LC_MONETARY","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"bool"}}],[17,"PTRACE_GETSIGINFO","","",null,null],[5,"prlimit","","",null,null],[17,"EUSERS","","",null,null],[17,"ENODATA","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[6,"sa_family_t","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[17,"NCCS","","",null,null],[5,"pathconf","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"F_ULOCK","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"pthread_attr_t","","",null,null],[17,"SIGFPE","","",null,null],[17,"TIOCCONS","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"sscanf","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[5,"lsetxattr","","",null,null],[17,"SIGCONT","","",null,null],[17,"RUSAGE_SELF","","",null,null],[5,"tcsendbreak","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"fsetxattr","","",null,null],[17,"SIGUNUSED","","",null,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[5,"if_indextoname","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"EPOLLMSG","","",null,null],[5,"fscanf","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[5,"pipe","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"QIF_INODES","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"TIOCNXCL","","",null,null],[3,"utimbuf","","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[17,"ISIG","","",null,null],[17,"EACCES","","",null,null],[17,"SCHED_OTHER","","",null,null],[5,"fremovexattr","","",null,null],[17,"ABDAY_3","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"WNOHANG","","",null,null],[5,"__errno_location","","",null,null],[6,"key_t","","",null,null],[5,"close","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"mktime","","",null,null],[5,"quotactl","","",null,null],[6,"rlim64_t","","",null,null],[17,"ENOENT","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"DAY_3","","",null,null],[17,"TCOOFF","","",null,null],[17,"_IOFBF","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"YESEXPR","","",null,null],[17,"LC_ALL","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[6,"uid_t","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[17,"IP_TTL","","",null,null],[5,"accept","","",null,null],[5,"setgroups","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[5,"sysconf","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i64"}}],[6,"c_ulong","","",null,null],[17,"S_IRWXG","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"EL3HLT","","",null,null],[17,"D_FMT","","",null,null],[5,"setrlimit","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[5,"setpgid","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"SIGURG","","",null,null],[17,"S_IFDIR","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"MAP_SHARED","","",null,null],[5,"pselect","","",null,null],[5,"statfs","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[5,"seekdir","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"PARODD","","",null,null],[5,"getrlimit64","","",null,null],[5,"shmget","","",null,{"inputs":[{"name":"i32"},{"name":"usize"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"creat","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"EFAULT","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"ST_NODEV","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"VINTR","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_IOLBF","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"EL2NSYNC","","",null,null],[5,"getdtablesize","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"PTRACE_SINGLESTEP","","",null,null],[5,"stat","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"MS_MOVE","","",null,null],[17,"SIGPIPE","","",null,null],[17,"F_SETFL","","",null,null],[17,"VT1","","",null,null],[5,"isatty","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_JOB_CONTROL","","",null,null],[17,"EPROTOTYPE","","",null,null],[5,"sendmsg","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMGET","","",null,null],[17,"EMSGSIZE","","",null,null],[5,"setrlimit64","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"F_OK","","",null,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[5,"CPU_ZERO","","",null,null],[17,"CSTOPB","","",null,null],[5,"execvp","","",null,null],[17,"ENOANO","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[5,"mq_unlink","","",null,null],[5,"pthread_getattr_np","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[5,"posix_fallocate","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i32"}}],[17,"ENAVAIL","","",null,null],[17,"SIGILL","","",null,null],[5,"sprintf","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[5,"shmctl","","",null,null],[3,"dirent","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[17,"ENOSPC","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"CLONE_THREAD","","",null,null],[5,"shmdt","","",null,null],[5,"fsync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"pthread_attr_init","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"CREAD","","",null,null],[5,"lseek","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i64"}}],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"EXTPROC","","",null,null],[5,"pread","","",null,null],[5,"fileno","","",null,null],[17,"ERA","","",null,null],[5,"sigaddset","","",null,null],[5,"sigtimedwait","","",null,null],[17,"EISNAM","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[5,"mmap","","",null,null],[17,"MS_REC","","",null,null],[5,"socket","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"getcwd","","",null,null],[17,"MAP_FILE","","",null,null],[5,"getpwuid_r","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"ECONNREFUSED","","",null,null],[5,"raise","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_2_FORT_DEV","","",null,null],[5,"getifaddrs","","",null,null],[5,"mkostemps","","",null,null],[17,"ESPIPE","","",null,null],[17,"FF1","","",null,null],[5,"getpid","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"ETIME","","",null,null],[17,"CS6","","",null,null],[17,"MCL_CURRENT","","",null,null],[6,"in_addr_t","","",null,null],[17,"ENOSTR","","",null,null],[17,"SHM_R","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"_IONBF","","",null,null],[17,"EBFONT","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_TIME","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"TCGETS","","",null,null],[17,"ABMON_8","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"FIONBIO","","",null,null],[5,"FD_CLR","","",null,null],[5,"tcflow","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"RLIMIT_CORE","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[17,"MS_BIND","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"TCSETS","","",null,null],[6,"clock_t","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"mprotect","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"ABDAY_2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"MON_1","","",null,null],[6,"socklen_t","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"ENODEV","","",null,null],[5,"pthread_join","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[5,"pthread_self","","",null,{"inputs":[],"output":{"name":"u64"}}],[17,"EISCONN","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"MS_REMOUNT","","",null,null],[5,"tcgetpgrp","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"EBADE","","",null,null],[17,"ECHOK","","",null,null],[17,"O_RDWR","","",null,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",30,null],[12,"rlim_max","","",30,null],[17,"TCSANOW","","",null,null],[17,"VSTART","","",null,null],[17,"NOSTR","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[5,"eventfd","","",null,{"inputs":[{"name":"u32"},{"name":"i32"}],"output":{"name":"i32"}}],[6,"cc_t","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",22,null],[12,"tm_min","","",22,null],[12,"tm_hour","","",22,null],[12,"tm_mday","","",22,null],[12,"tm_mon","","",22,null],[12,"tm_year","","",22,null],[12,"tm_wday","","",22,null],[12,"tm_yday","","",22,null],[12,"tm_isdst","","",22,null],[12,"tm_gmtoff","","",22,null],[12,"tm_zone","","",22,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"ECHOKE","","",null,null],[5,"pthread_create","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"S_IFCHR","","",null,null],[5,"recv","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RLIM_INFINITY","","",null,null],[5,"tcflush","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_2_UPE","","",null,null],[6,"suseconds_t","","",null,null],[5,"fdatasync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_OPEN_MAX","","",null,null],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"localeconv","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"ELIBSCN","","",null,null],[5,"chroot","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[17,"ENONET","","",null,null],[17,"ABMON_5","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[5,"fcntl","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"PROT_WRITE","","",null,null],[5,"signal","","",null,{"inputs":[{"name":"i32"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"makecontext","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"VLNEXT","","",null,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[17,"EBADF","","",null,null],[5,"rmdir","","",null,null],[5,"umask","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"fpathconf","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i64"}}],[17,"RLIMIT_SIGPENDING","","",null,null],[4,"timezone","","",null,null],[17,"VSTOP","","",null,null],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"SO_DEBUG","","",null,null],[17,"EWOULDBLOCK","","",null,null],[3,"ipc_perm","","",null,null],[12,"__key","","",53,null],[12,"uid","","",53,null],[12,"gid","","",53,null],[12,"cuid","","",53,null],[12,"cgid","","",53,null],[12,"mode","","",53,null],[12,"__seq","","",53,null],[6,"__fsword_t","","",null,null],[5,"getegid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"pthread_cond_destroy","","",null,null],[5,"dup","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"ENETRESET","","",null,null],[17,"POLLOUT","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"S_IRUSR","","",null,null],[5,"pthread_kill","","",null,{"inputs":[{"name":"u64"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"EMEDIUMTYPE","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"POLLNVAL","","",null,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",54,null],[12,"shm_segsz","","",54,null],[12,"shm_atime","","",54,null],[12,"shm_dtime","","",54,null],[12,"shm_ctime","","",54,null],[12,"shm_cpid","","",54,null],[12,"shm_lpid","","",54,null],[12,"shm_nattch","","",54,null],[17,"EL3RST","","",null,null],[17,"EREMOTE","","",null,null],[5,"munmap","","",null,null],[17,"EUNATCH","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"ENOKEY","","",null,null],[5,"send","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"LOCK_NB","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"ECOMM","","",null,null],[5,"cfsetospeed","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[5,"gethostname","","",null,null],[17,"CS8","","",null,null],[5,"msync","","",null,null],[17,"CLONE_VFORK","","",null,null],[5,"recvmsg","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"ABMON_4","","",null,null],[5,"glob64","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"SA_RESETHAND","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",37,null],[12,"pw_passwd","","",37,null],[12,"pw_uid","","",37,null],[12,"pw_gid","","",37,null],[12,"pw_gecos","","",37,null],[12,"pw_dir","","",37,null],[12,"pw_shell","","",37,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SIGBUS","","",null,null],[17,"MS_NOATIME","","",null,null],[5,"tcsetattr","","",null,null],[17,"X_OK","","",null,null],[17,"ECHOPRT","","",null,null],[3,"mcontext_t","","",null,null],[5,"freelocale","","",null,null],[5,"ftruncate","","",null,{"inputs":[{"name":"i32"},{"name":"i64"}],"output":{"name":"i32"}}],[17,"VT0","","",null,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",31,null],[12,"gl_pathv","","",31,null],[12,"gl_offs","","",31,null],[12,"gl_flags","","",31,null],[17,"DAY_7","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[5,"FD_SET","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[5,"sched_getaffinity","","",null,null],[17,"S_IROTH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"S_IREAD","","",null,null],[17,"ECANCELED","","",null,null],[17,"DT_LNK","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"ST_NODIRATIME","","",null,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",32,null],[12,"ifa_name","","",32,null],[12,"ifa_flags","","",32,null],[12,"ifa_addr","","",32,null],[12,"ifa_netmask","","",32,null],[12,"ifa_ifu","","",32,null],[12,"ifa_data","","",32,null],[17,"ESRMNT","","",null,null],[5,"dlclose","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"execve","","",null,null],[5,"shm_open","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"EDOTDOT","","",null,null],[17,"O_ACCMODE","","",null,null],[5,"newlocale","","",null,null],[17,"MAP_POPULATE","","",null,null],[6,"off_t","","",null,null],[17,"NOEXPR","","",null,null],[17,"EALREADY","","",null,null],[3,"epoll_event","","",null,null],[12,"events","","",25,null],[12,"u64","","",25,null],[17,"ENFILE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"TIOCLINUX","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"getaddrinfo","","",null,null],[17,"EXDEV","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"S_IXGRP","","",null,null],[17,"CBAUD","","",null,null],[5,"usleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[17,"EPOLL_CTL_ADD","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"F_GETOWN","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[5,"stat64","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"SO_LINGER","","",null,null],[17,"EKEYREJECTED","","",null,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",47,null],[12,"gl_pathv","","",47,null],[12,"gl_offs","","",47,null],[12,"gl_flags","","",47,null],[5,"popen","","",null,null],[17,"SIGXCPU","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"VKILL","","",null,null],[17,"EINTR","","",null,null],[5,"sigfillset","","",null,null],[5,"mknod","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOTNAM","","",null,null],[5,"mount","","",null,null],[17,"DAY_6","","",null,null],[5,"timegm","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"TCP_LINGER2","","",null,null],[5,"lstat64","","",null,null],[5,"fprintf","","",null,null],[5,"strerror_r","","",null,null],[17,"ETXTBSY","","",null,null],[17,"ELNRNG","","",null,null],[5,"localtime_r","","",null,null],[17,"F_GETFL","","",null,null],[17,"ABMON_7","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"EBADR","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"ABDAY_5","","",null,null],[5,"unlink","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_WRONLY","","",null,null],[17,"TMP_MAX","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"SIGPOLL","","",null,null],[6,"blkcnt64_t","","",null,null],[5,"mkostemp","","",null,null],[17,"GRPQUOTA","","",null,null],[5,"mq_close","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"RLIMIT_RTPRIO","","",null,null],[5,"futimens","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[5,"umount2","","",null,null],[6,"ino_t","","",null,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",38,null],[12,"f_frsize","","",38,null],[12,"f_blocks","","",38,null],[12,"f_bfree","","",38,null],[12,"f_bavail","","",38,null],[12,"f_files","","",38,null],[12,"f_ffree","","",38,null],[12,"f_favail","","",38,null],[12,"f_fsid","","",38,null],[12,"f_flag","","",38,null],[12,"f_namemax","","",38,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"CS7","","",null,null],[5,"getcontext","","",null,null],[17,"CRTSCTS","","",null,null],[17,"F_SETLKW","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"MON_11","","",null,null],[17,"FOPEN_MAX","","",null,null],[5,"pthread_attr_getstack","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"ONLCR","","",null,null],[5,"dup2","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"EPOLL_CTL_DEL","","",null,null],[17,"SIGHUP","","",null,null],[17,"TCSETSF","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"setns","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"ioc_dir","nix::sys::ioctl","Extracts the &quot;direction&quot; (read/write/none) from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[5,"ioc_type","","Extracts the type from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_nr","","Extracts the ioctl number from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_size","","Extracts the size from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[17,"NRBITS","","",null,null],[17,"TYPEBITS","","",null,null],[17,"NONE","","",null,null],[17,"READ","","",null,null],[17,"WRITE","","",null,null],[17,"SIZEBITS","","",null,null],[17,"DIRBITS","","",null,null],[17,"NRSHIFT","","",null,null],[17,"TYPESHIFT","","",null,null],[17,"SIZESHIFT","","",null,null],[17,"DIRSHIFT","","",null,null],[17,"NRMASK","","",null,null],[17,"TYPEMASK","","",null,null],[17,"SIZEMASK","","",null,null],[17,"DIRMASK","","",null,null],[17,"IN","","",null,null],[17,"OUT","","",null,null],[17,"INOUT","","",null,null],[17,"SIZE_MASK","","",null,null],[0,"sendfile","nix::sys","",null,null],[5,"sendfile","nix::sys::sendfile","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"option"},{"name":"usize"}],"output":{"name":"result"}}],[0,"signal","nix::sys","",null,null],[17,"SIGHUP","nix::sys::signal","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[3,"SaFlag","","",null,null],[3,"SigFlag","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[4,"SigHandler","","",null,null],[13,"SigDfl","","",85,null],[13,"SigIgn","","",85,null],[13,"Handler","","",85,null],[13,"SigAction","","",85,null],[5,"sigaction","","",null,{"inputs":[{"name":"signum"},{"name":"sigaction"}],"output":{"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"sigflag"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signum"}],"output":{"name":"result"}}],[5,"raise","","",null,{"inputs":[{"name":"signum"}],"output":{"name":"result"}}],[6,"SigNum","","",null,null],[17,"SIGEMT","","",null,null],[17,"NSIG","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[11,"hash","","",86,null],[11,"cmp","","",86,null],[11,"partial_cmp","","",86,null],[11,"lt","","",86,null],[11,"le","","",86,null],[11,"gt","","",86,null],[11,"ge","","",86,null],[11,"clone","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"fmt","","",86,null],[11,"empty","","Returns an empty set of flags.",86,{"inputs":[],"output":{"name":"saflag"}}],[11,"all","","Returns the set containing all flags.",86,{"inputs":[],"output":{"name":"saflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",86,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",86,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",86,{"inputs":[{"name":"c_int"}],"output":{"name":"saflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",86,null],[11,"is_all","","Returns `true` if all flags are currently set.",86,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",86,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",86,null],[11,"insert","","Inserts the specified flags in-place.",86,null],[11,"remove","","Removes the specified flags in-place.",86,null],[11,"toggle","","Toggles the specified flags in-place.",86,null],[11,"bitor","","Returns the union of the two sets of flags.",86,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",86,null],[11,"bitand","","Returns the intersection between the two sets of flags.",86,null],[11,"sub","","Returns the set difference of the two sets of flags.",86,null],[11,"not","","Returns the complement of this set of flags.",86,null],[11,"from_iter","","",86,{"inputs":[{"name":"t"}],"output":{"name":"saflag"}}],[11,"hash","","",87,null],[11,"cmp","","",87,null],[11,"partial_cmp","","",87,null],[11,"lt","","",87,null],[11,"le","","",87,null],[11,"gt","","",87,null],[11,"ge","","",87,null],[11,"clone","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"fmt","","",87,null],[11,"empty","","Returns an empty set of flags.",87,{"inputs":[],"output":{"name":"sigflag"}}],[11,"all","","Returns the set containing all flags.",87,{"inputs":[],"output":{"name":"sigflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",87,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",87,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",87,{"inputs":[{"name":"c_int"}],"output":{"name":"sigflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",87,null],[11,"is_all","","Returns `true` if all flags are currently set.",87,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",87,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",87,null],[11,"insert","","Inserts the specified flags in-place.",87,null],[11,"remove","","Removes the specified flags in-place.",87,null],[11,"toggle","","Toggles the specified flags in-place.",87,null],[11,"bitor","","Returns the union of the two sets of flags.",87,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",87,null],[11,"bitand","","Returns the intersection between the two sets of flags.",87,null],[11,"sub","","Returns the set difference of the two sets of flags.",87,null],[11,"not","","Returns the complement of this set of flags.",87,null],[11,"from_iter","","",87,{"inputs":[{"name":"t"}],"output":{"name":"sigflag"}}],[11,"clone","","",88,null],[11,"all","","",88,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",88,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",88,null],[11,"remove","","",88,null],[11,"contains","","",88,null],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",88,{"inputs":[],"output":{"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",88,null],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",88,null],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",88,null],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",88,null],[11,"wait","","Suspends execution of the calling thread until one of the signals in the\nsignal mask becomes pending, and returns the accepted signal.",88,null],[11,"as_ref","","",88,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",85,null],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the\ntype of the `handler` argument.",89,{"inputs":[{"name":"sighandler"},{"name":"saflag"},{"name":"sigset"}],"output":{"name":"sigaction"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"UnixAddr","","A wrapper around sockaddr_un. We track the length of sun_path,\nbecause it may not be null-terminated (unconnected and abstract\nsockets). Note that the actual sockaddr length is greater by\nsize_of::&lt;sa_family_t&gt;().",null,null],[12,"0","","",90,null],[12,"1","","",90,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",91,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",92,null],[3,"NetlinkAddr","","",null,null],[12,"0","","",93,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",94,null],[12,"imr_interface","","",94,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",95,null],[12,"ipv6mr_interface","","",95,null],[3,"MsgFlags","","",null,null],[3,"SockFlag","","",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The\nsize and alignment match that of a cmsghdr followed by a T, but the\nfields are not accessible, as the actual types will change on a call\nto recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",96,null],[12,"address","","",96,null],[12,"flags","","",96,null],[3,"CmsgIterator","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",97,null],[12,"l_linger","","",97,null],[3,"ucred","","",null,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",98,null],[13,"Inet","","",98,null],[13,"Inet6","","",98,null],[13,"Netlink","","",98,null],[13,"Packet","","",98,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",99,null],[13,"Unix","","",99,null],[13,"Netlink","","",99,null],[4,"InetAddr","","",null,null],[13,"V4","","",100,null],[13,"V6","","",100,null],[4,"IpAddr","","",null,null],[13,"V4","","",101,null],[13,"V6","","",101,null],[4,"SockType","","",null,null],[13,"Stream","","",102,null],[13,"Datagram","","",102,null],[13,"SeqPacket","","",102,null],[13,"Raw","","",102,null],[13,"Rdm","","",102,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may\nbe added to this enum; do not exhaustively pattern-match it.\n[Further reading](http://man7.org/linux/man-pages/man3/cmsg.3.html)",null,null],[13,"ScmRights","","A message of type SCM_RIGHTS, containing an array of file\ndescriptors passed between processes. See the description in the\n&quot;Ancillary messages&quot; section of the\n[unix(7) man page](http://man7.org/linux/man-pages/man7/unix.7.html).",103,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an\nargument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",104,null],[13,"Tcp","","",104,null],[13,"Ip","","",104,null],[13,"Ipv6","","",104,null],[13,"Udp","","",104,null],[13,"Netlink","","",104,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",105,null],[13,"Write","","Further  transmissions will be disallowed.",105,null],[13,"Both","","Further receptions and transmissions will be disallowed.",105,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied\nby ancillary data. Optionally direct the message at the given address,\nas with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and\noptionally receive ancillary data into the provided buffer.\nIf no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"c_int"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of\nbytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns\nthe number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"},{"name":"val"}],"output":{"name":"result"}}],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",93,null],[11,"eq","","",93,null],[11,"hash","","",93,null],[11,"new","","",93,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"netlinkaddr"}}],[11,"pid","","",93,null],[11,"groups","","",93,null],[11,"fmt","","",93,null],[11,"hash","","",98,null],[11,"fmt","","",98,null],[11,"eq","","",98,null],[11,"clone","","",98,null],[11,"from_std","","",100,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",100,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",100,null],[11,"port","","Gets the port number associated with this socket address",100,null],[11,"to_std","","",100,null],[11,"to_str","","",100,null],[11,"eq","","",100,null],[11,"hash","","",100,null],[11,"clone","","",100,null],[11,"fmt","","",100,null],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",101,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",101,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",101,null],[11,"new","","",91,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",91,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",91,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",91,null],[11,"to_std","","",91,null],[11,"eq","","",91,null],[11,"hash","","",91,null],[11,"clone","","",91,null],[11,"fmt","","",91,null],[11,"clone","","",92,null],[11,"new","","",92,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",92,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",92,null],[11,"to_std","","",92,null],[11,"fmt","","",92,null],[11,"new","","Create a new sockaddr_un representing a filesystem path.",90,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the\n&quot;abstract namespace&quot;. This is a Linux-specific extension,\nprimarily used to allow chrooted processes to communicate with\nspecific daemons.",90,null],[11,"path","","If this address represents a filesystem path, return that path.",90,null],[11,"eq","","",90,null],[11,"hash","","",90,null],[11,"clone","","",90,null],[11,"fmt","","",90,null],[11,"new_inet","","",99,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",99,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_netlink","","",99,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"sockaddr"}}],[11,"family","","",99,null],[11,"to_str","","",99,null],[11,"as_ffi_pair","","",99,null],[11,"eq","","",99,null],[11,"hash","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",99,null],[11,"hash","","",106,null],[11,"cmp","","",106,null],[11,"partial_cmp","","",106,null],[11,"lt","","",106,null],[11,"le","","",106,null],[11,"gt","","",106,null],[11,"ge","","",106,null],[11,"clone","","",106,null],[11,"eq","","",106,null],[11,"ne","","",106,null],[11,"fmt","","",106,null],[11,"empty","","Returns an empty set of flags.",106,{"inputs":[],"output":{"name":"msgflags"}}],[11,"all","","Returns the set containing all flags.",106,{"inputs":[],"output":{"name":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",106,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",106,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",106,{"inputs":[{"name":"c_int"}],"output":{"name":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",106,null],[11,"is_all","","Returns `true` if all flags are currently set.",106,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",106,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",106,null],[11,"insert","","Inserts the specified flags in-place.",106,null],[11,"remove","","Removes the specified flags in-place.",106,null],[11,"toggle","","Toggles the specified flags in-place.",106,null],[11,"bitor","","Returns the union of the two sets of flags.",106,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",106,null],[11,"bitand","","Returns the intersection between the two sets of flags.",106,null],[11,"sub","","Returns the set difference of the two sets of flags.",106,null],[11,"not","","Returns the complement of this set of flags.",106,null],[11,"from_iter","","",106,{"inputs":[{"name":"t"}],"output":{"name":"msgflags"}}],[11,"clone","","",94,null],[11,"fmt","","",94,null],[11,"new","","",94,{"inputs":[{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",95,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"PeerCredentials","","",null,null],[3,"TcpKeepIdle","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"RcvBufForce","","",null,null],[3,"SndBufForce","","",null,null],[3,"SockType","","",null,null],[3,"AcceptConn","","",null,null],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"set","","",107,null],[11,"get","","",107,null],[11,"fmt","","",108,null],[11,"clone","","",108,null],[11,"set","","",108,null],[11,"get","","",108,null],[11,"fmt","","",109,null],[11,"clone","","",109,null],[11,"set","","",109,null],[11,"get","","",109,null],[11,"fmt","","",110,null],[11,"clone","","",110,null],[11,"set","","",110,null],[11,"get","","",110,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"set","","",111,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"set","","",112,null],[11,"fmt","","",113,null],[11,"clone","","",113,null],[11,"set","","",113,null],[11,"fmt","","",114,null],[11,"clone","","",114,null],[11,"set","","",114,null],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"set","","",115,null],[11,"get","","",115,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"set","","",116,null],[11,"get","","",116,null],[11,"fmt","","",117,null],[11,"clone","","",117,null],[11,"set","","",117,null],[11,"get","","",117,null],[11,"fmt","","",118,null],[11,"clone","","",118,null],[11,"set","","",118,null],[11,"get","","",118,null],[11,"fmt","","",119,null],[11,"clone","","",119,null],[11,"set","","",119,null],[11,"get","","",119,null],[11,"fmt","","",120,null],[11,"clone","","",120,null],[11,"set","","",120,null],[11,"get","","",120,null],[11,"fmt","","",121,null],[11,"clone","","",121,null],[11,"get","","",121,null],[11,"fmt","","",122,null],[11,"clone","","",122,null],[11,"set","","",122,null],[11,"get","","",122,null],[11,"fmt","","",123,null],[11,"clone","","",123,null],[11,"get","","",123,null],[11,"fmt","","",124,null],[11,"clone","","",124,null],[11,"set","","",124,null],[11,"get","","",124,null],[11,"fmt","","",125,null],[11,"clone","","",125,null],[11,"set","","",125,null],[11,"get","","",125,null],[11,"fmt","","",126,null],[11,"clone","","",126,null],[11,"set","","",126,null],[11,"get","","",126,null],[11,"fmt","","",127,null],[11,"clone","","",127,null],[11,"set","","",127,null],[11,"fmt","","",128,null],[11,"clone","","",128,null],[11,"set","","",128,null],[11,"fmt","","",129,null],[11,"clone","","",129,null],[11,"get","","",129,null],[11,"fmt","","",130,null],[11,"clone","","",130,null],[11,"get","","",130,null],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_PACKET","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `getsockopt`",null,null],[16,"Val","","",131,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `setsockopt`",null,null],[16,"Val","","",132,null],[11,"fmt","","",102,null],[11,"eq","","",102,null],[11,"clone","","",102,null],[11,"hash","","",133,null],[11,"cmp","","",133,null],[11,"partial_cmp","","",133,null],[11,"lt","","",133,null],[11,"le","","",133,null],[11,"gt","","",133,null],[11,"ge","","",133,null],[11,"clone","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"fmt","","",133,null],[11,"empty","","Returns an empty set of flags.",133,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",133,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",133,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",133,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",133,{"inputs":[{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",133,null],[11,"is_all","","Returns `true` if all flags are currently set.",133,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",133,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",133,null],[11,"insert","","Inserts the specified flags in-place.",133,null],[11,"remove","","Removes the specified flags in-place.",133,null],[11,"toggle","","Toggles the specified flags in-place.",133,null],[11,"bitor","","Returns the union of the two sets of flags.",133,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",133,null],[11,"bitand","","Returns the intersection between the two sets of flags.",133,null],[11,"sub","","Returns the set difference of the two sets of flags.",133,null],[11,"not","","Returns the complement of this set of flags.",133,null],[11,"from_iter","","",133,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace&lt;T&gt;. The structure is used only for space, so\nthe fields are uninitialized.",134,{"inputs":[],"output":{"name":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this\nmsghdr.",96,null],[11,"next","","",135,null],[11,"fmt","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"clone","","",136,null],[11,"fmt","","",105,null],[11,"eq","","",105,null],[11,"clone","","",105,null],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",56,null],[12,"st_ino","","",56,null],[12,"st_nlink","","",56,null],[12,"st_mode","","",56,null],[12,"st_uid","","",56,null],[12,"st_gid","","",56,null],[12,"st_rdev","","",56,null],[12,"st_size","","",56,null],[12,"st_blksize","","",56,null],[12,"st_blocks","","",56,null],[12,"st_atime","","",56,null],[12,"st_atime_nsec","","",56,null],[12,"st_mtime","","",56,null],[12,"st_mtime_nsec","","",56,null],[12,"st_ctime","","",56,null],[12,"st_ctime_nsec","","",56,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"mkdev","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"dev_t"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[17,"S_IFREG","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"hash","","",137,null],[11,"cmp","","",137,null],[11,"partial_cmp","","",137,null],[11,"lt","","",137,null],[11,"le","","",137,null],[11,"gt","","",137,null],[11,"ge","","",137,null],[11,"clone","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"fmt","","",137,null],[11,"empty","","Returns an empty set of flags.",137,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",137,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",137,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",137,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",137,{"inputs":[{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",137,null],[11,"is_all","","Returns `true` if all flags are currently set.",137,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",137,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",137,null],[11,"insert","","Inserts the specified flags in-place.",137,null],[11,"remove","","Removes the specified flags in-place.",137,null],[11,"toggle","","Toggles the specified flags in-place.",137,null],[11,"bitor","","Returns the union of the two sets of flags.",137,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",137,null],[11,"bitand","","Returns the intersection between the two sets of flags.",137,null],[11,"sub","","Returns the set difference of the two sets of flags.",137,null],[11,"not","","Returns the complement of this set of flags.",137,null],[11,"from_iter","","",137,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"hash","","",138,null],[11,"cmp","","",138,null],[11,"partial_cmp","","",138,null],[11,"lt","","",138,null],[11,"le","","",138,null],[11,"gt","","",138,null],[11,"ge","","",138,null],[11,"clone","","",138,null],[11,"eq","","",138,null],[11,"ne","","",138,null],[11,"fmt","","",138,null],[11,"empty","","Returns an empty set of flags.",138,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",138,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",138,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",138,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",138,{"inputs":[{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",138,null],[11,"is_all","","Returns `true` if all flags are currently set.",138,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",138,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",138,null],[11,"insert","","Inserts the specified flags in-place.",138,null],[11,"remove","","Removes the specified flags in-place.",138,null],[11,"toggle","","Toggles the specified flags in-place.",138,null],[11,"bitor","","Returns the union of the two sets of flags.",138,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",138,null],[11,"bitand","","Returns the intersection between the two sets of flags.",138,null],[11,"sub","","Returns the set difference of the two sets of flags.",138,null],[11,"not","","Returns the complement of this set of flags.",138,null],[11,"from_iter","","",138,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[0,"syscall","nix::sys","Indirect system call",null,null],[5,"syscall","nix::sys::syscall","",null,null],[6,"Syscall","","",null,null],[7,"SYSPIVOTROOT","","",null,null],[7,"MEMFD_CREATE","","",null,null],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",139,null],[12,"c_oflag","","",139,null],[12,"c_cflag","","",139,null],[12,"c_lflag","","",139,null],[12,"c_line","","",139,null],[12,"c_cc","","",139,null],[12,"c_ispeed","","",139,null],[12,"c_ospeed","","",139,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",140,null],[13,"TCSADRAIN","","",140,null],[13,"TCSAFLUSH","","",140,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",141,null],[13,"TCOFLUSH","","",141,null],[13,"TCIOFLUSH","","",141,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",142,null],[13,"TCOON","","",142,null],[13,"TCIOFF","","",142,null],[13,"TCION","","",142,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"clone","","",139,null],[11,"hash","","",143,null],[11,"cmp","","",143,null],[11,"partial_cmp","","",143,null],[11,"lt","","",143,null],[11,"le","","",143,null],[11,"gt","","",143,null],[11,"ge","","",143,null],[11,"clone","","",143,null],[11,"eq","","",143,null],[11,"ne","","",143,null],[11,"fmt","","",143,null],[11,"empty","","Returns an empty set of flags.",143,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",143,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",143,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",143,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",143,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",143,null],[11,"is_all","","Returns `true` if all flags are currently set.",143,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",143,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",143,null],[11,"insert","","Inserts the specified flags in-place.",143,null],[11,"remove","","Removes the specified flags in-place.",143,null],[11,"toggle","","Toggles the specified flags in-place.",143,null],[11,"bitor","","Returns the union of the two sets of flags.",143,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",143,null],[11,"bitand","","Returns the intersection between the two sets of flags.",143,null],[11,"sub","","Returns the set difference of the two sets of flags.",143,null],[11,"not","","Returns the complement of this set of flags.",143,null],[11,"from_iter","","",143,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"hash","","",144,null],[11,"cmp","","",144,null],[11,"partial_cmp","","",144,null],[11,"lt","","",144,null],[11,"le","","",144,null],[11,"gt","","",144,null],[11,"ge","","",144,null],[11,"clone","","",144,null],[11,"eq","","",144,null],[11,"ne","","",144,null],[11,"fmt","","",144,null],[11,"empty","","Returns an empty set of flags.",144,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",144,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",144,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",144,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",144,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",144,null],[11,"is_all","","Returns `true` if all flags are currently set.",144,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",144,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",144,null],[11,"insert","","Inserts the specified flags in-place.",144,null],[11,"remove","","Removes the specified flags in-place.",144,null],[11,"toggle","","Toggles the specified flags in-place.",144,null],[11,"bitor","","Returns the union of the two sets of flags.",144,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",144,null],[11,"bitand","","Returns the intersection between the two sets of flags.",144,null],[11,"sub","","Returns the set difference of the two sets of flags.",144,null],[11,"not","","Returns the complement of this set of flags.",144,null],[11,"from_iter","","",144,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"hash","","",145,null],[11,"cmp","","",145,null],[11,"partial_cmp","","",145,null],[11,"lt","","",145,null],[11,"le","","",145,null],[11,"gt","","",145,null],[11,"ge","","",145,null],[11,"clone","","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"fmt","","",145,null],[11,"empty","","Returns an empty set of flags.",145,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",145,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",145,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",145,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",145,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",145,null],[11,"is_all","","Returns `true` if all flags are currently set.",145,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",145,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",145,null],[11,"insert","","Inserts the specified flags in-place.",145,null],[11,"remove","","Removes the specified flags in-place.",145,null],[11,"toggle","","Toggles the specified flags in-place.",145,null],[11,"bitor","","Returns the union of the two sets of flags.",145,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",145,null],[11,"bitand","","Returns the intersection between the two sets of flags.",145,null],[11,"sub","","Returns the set difference of the two sets of flags.",145,null],[11,"not","","Returns the complement of this set of flags.",145,null],[11,"from_iter","","",145,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"hash","","",146,null],[11,"cmp","","",146,null],[11,"partial_cmp","","",146,null],[11,"lt","","",146,null],[11,"le","","",146,null],[11,"gt","","",146,null],[11,"ge","","",146,null],[11,"clone","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"fmt","","",146,null],[11,"empty","","Returns an empty set of flags.",146,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",146,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",146,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",146,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",146,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",146,null],[11,"is_all","","Returns `true` if all flags are currently set.",146,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",146,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",146,null],[11,"insert","","Inserts the specified flags in-place.",146,null],[11,"remove","","Removes the specified flags in-place.",146,null],[11,"toggle","","Toggles the specified flags in-place.",146,null],[11,"bitor","","Returns the union of the two sets of flags.",146,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",146,null],[11,"bitand","","Returns the intersection between the two sets of flags.",146,null],[11,"sub","","Returns the set difference of the two sets of flags.",146,null],[11,"not","","Returns the complement of this set of flags.",146,null],[11,"from_iter","","",146,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",140,null],[11,"clone","","",141,null],[11,"clone","","",142,null],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[5,"uname","","",null,{"inputs":[],"output":{"name":"utsname"}}],[11,"clone","","",147,null],[11,"sysname","","",147,null],[11,"nodename","","",147,null],[11,"release","","",147,null],[11,"version","","",147,null],[11,"machine","","",147,null],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",148,null],[13,"Signaled","","",148,null],[13,"Stopped","","",148,null],[13,"Continued","","",148,null],[13,"StillAlive","","",148,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"name":"option"}],"output":{"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"name":"result"}}],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[11,"hash","","",149,null],[11,"cmp","","",149,null],[11,"partial_cmp","","",149,null],[11,"lt","","",149,null],[11,"le","","",149,null],[11,"gt","","",149,null],[11,"ge","","",149,null],[11,"clone","","",149,null],[11,"eq","","",149,null],[11,"ne","","",149,null],[11,"fmt","","",149,null],[11,"empty","","Returns an empty set of flags.",149,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",149,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",149,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",149,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",149,{"inputs":[{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",149,null],[11,"is_all","","Returns `true` if all flags are currently set.",149,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",149,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",149,null],[11,"insert","","Inserts the specified flags in-place.",149,null],[11,"remove","","Removes the specified flags in-place.",149,null],[11,"toggle","","Toggles the specified flags in-place.",149,null],[11,"bitor","","Returns the union of the two sets of flags.",149,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",149,null],[11,"bitand","","Returns the intersection between the two sets of flags.",149,null],[11,"sub","","Returns the set difference of the two sets of flags.",149,null],[11,"not","","Returns the complement of this set of flags.",149,null],[11,"from_iter","","",149,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"fmt","","",148,null],[11,"clone","","",148,null],[11,"eq","","",148,null],[11,"ne","","",148,null],[0,"mman","nix::sys","",null,null],[3,"MapFlags","nix::sys::mman","",null,null],[3,"MsFlags","","",null,null],[3,"ProtFlags","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically\na higher-level abstraction will hide the unsafe interactions with the mmap&#39;d region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"hash","","",150,null],[11,"cmp","","",150,null],[11,"partial_cmp","","",150,null],[11,"lt","","",150,null],[11,"le","","",150,null],[11,"gt","","",150,null],[11,"ge","","",150,null],[11,"clone","","",150,null],[11,"eq","","",150,null],[11,"ne","","",150,null],[11,"fmt","","",150,null],[11,"empty","","Returns an empty set of flags.",150,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",150,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",150,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",150,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",150,{"inputs":[{"name":"c_int"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",150,null],[11,"is_all","","Returns `true` if all flags are currently set.",150,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",150,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",150,null],[11,"insert","","Inserts the specified flags in-place.",150,null],[11,"remove","","Removes the specified flags in-place.",150,null],[11,"toggle","","Toggles the specified flags in-place.",150,null],[11,"bitor","","Returns the union of the two sets of flags.",150,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",150,null],[11,"bitand","","Returns the intersection between the two sets of flags.",150,null],[11,"sub","","Returns the set difference of the two sets of flags.",150,null],[11,"not","","Returns the complement of this set of flags.",150,null],[11,"from_iter","","",150,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"hash","","",151,null],[11,"cmp","","",151,null],[11,"partial_cmp","","",151,null],[11,"lt","","",151,null],[11,"le","","",151,null],[11,"gt","","",151,null],[11,"ge","","",151,null],[11,"clone","","",151,null],[11,"eq","","",151,null],[11,"ne","","",151,null],[11,"fmt","","",151,null],[11,"empty","","Returns an empty set of flags.",151,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",151,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",151,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",151,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",151,{"inputs":[{"name":"c_int"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",151,null],[11,"is_all","","Returns `true` if all flags are currently set.",151,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",151,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",151,null],[11,"insert","","Inserts the specified flags in-place.",151,null],[11,"remove","","Removes the specified flags in-place.",151,null],[11,"toggle","","Toggles the specified flags in-place.",151,null],[11,"bitor","","Returns the union of the two sets of flags.",151,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",151,null],[11,"bitand","","Returns the intersection between the two sets of flags.",151,null],[11,"sub","","Returns the set difference of the two sets of flags.",151,null],[11,"not","","Returns the complement of this set of flags.",151,null],[11,"from_iter","","",151,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[6,"MmapAdvise","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[11,"hash","","",152,null],[11,"cmp","","",152,null],[11,"partial_cmp","","",152,null],[11,"lt","","",152,null],[11,"le","","",152,null],[11,"gt","","",152,null],[11,"ge","","",152,null],[11,"clone","","",152,null],[11,"eq","","",152,null],[11,"ne","","",152,null],[11,"fmt","","",152,null],[11,"empty","","Returns an empty set of flags.",152,{"inputs":[],"output":{"name":"protflags"}}],[11,"all","","Returns the set containing all flags.",152,{"inputs":[],"output":{"name":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",152,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",152,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",152,{"inputs":[{"name":"c_int"}],"output":{"name":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",152,null],[11,"is_all","","Returns `true` if all flags are currently set.",152,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",152,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",152,null],[11,"insert","","Inserts the specified flags in-place.",152,null],[11,"remove","","Removes the specified flags in-place.",152,null],[11,"toggle","","Toggles the specified flags in-place.",152,null],[11,"bitor","","Returns the union of the two sets of flags.",152,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",152,null],[11,"bitand","","Returns the intersection between the two sets of flags.",152,null],[11,"sub","","Returns the set difference of the two sets of flags.",152,null],[11,"not","","Returns the complement of this set of flags.",152,null],[11,"from_iter","","",152,{"inputs":[{"name":"t"}],"output":{"name":"protflags"}}],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",153,null],[11,"from_slice","","",153,null],[11,"from_mut_slice","","",153,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",154,null],[12,"tv_usec","","",154,null],[11,"fmt","","",154,null],[11,"cmp","","",154,null],[11,"partial_cmp","","",154,null],[11,"lt","","",154,null],[11,"le","","",154,null],[11,"gt","","",154,null],[11,"ge","","",154,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"clone","","",154,null],[11,"zero","","",154,{"inputs":[],"output":{"name":"timeval"}}],[11,"hours","","",154,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",154,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",154,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",154,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",154,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",154,null],[11,"num_minutes","","",154,null],[11,"num_seconds","","",154,null],[11,"num_milliseconds","","",154,null],[11,"num_microseconds","","",154,null],[11,"neg","","",154,null],[11,"add","","",154,null],[11,"sub","","",154,null],[11,"mul","","",154,null],[11,"div","","",154,null],[11,"fmt","","",154,null],[0,"ptrace","nix::sys","",null,null],[5,"ptrace","nix::sys::ptrace","",null,null],[5,"ptrace_setoptions","","Set options, as with ptrace(PTRACE_SETOPTIONS,...).",null,{"inputs":[{"name":"pid_t"},{"name":"ptraceoptions"}],"output":{"name":"result"}}],[0,"ptrace","","",null,null],[6,"PtraceRequest","nix::sys::ptrace::ptrace","",null,null],[6,"PtraceEvent","","",null,null],[6,"PtraceOptions","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"PTRACE_EVENT_STOP","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"inputs":[{"name":"c_int"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"clone","","",155,null],[11,"new","","",155,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",155,null],[11,"remove","","",155,null],[11,"contains","","",155,null],[11,"clear","","",155,null],[0,"quota","nix::sys","",null,null],[5,"quotactl_on","nix::sys::quota","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"quotafmt"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_off","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_sync","","",null,{"inputs":[{"name":"quotatype"},{"name":"option"}],"output":{"name":"result"}}],[5,"quotactl_get","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[5,"quotactl_set","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[0,"quota","","",null,null],[3,"QuotaCmd","nix::sys::quota::quota","",null,null],[12,"0","","",156,null],[12,"1","","",156,null],[3,"QuotaValidFlags","","",null,null],[3,"Dqblk","","",null,null],[12,"bhardlimit","","",157,null],[12,"bsoftlimit","","",157,null],[12,"curspace","","",157,null],[12,"ihardlimit","","",157,null],[12,"isoftlimit","","",157,null],[12,"curinodes","","",157,null],[12,"btime","","",157,null],[12,"itime","","",157,null],[12,"valid","","",157,null],[6,"QuotaSubCmd","","",null,null],[6,"QuotaType","","",null,null],[6,"QuotaFmt","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[11,"as_int","","",156,null],[11,"hash","","",158,null],[11,"cmp","","",158,null],[11,"partial_cmp","","",158,null],[11,"lt","","",158,null],[11,"le","","",158,null],[11,"gt","","",158,null],[11,"ge","","",158,null],[11,"clone","","",158,null],[11,"eq","","",158,null],[11,"ne","","",158,null],[11,"default","","",158,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"fmt","","",158,null],[11,"empty","","Returns an empty set of flags.",158,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"all","","Returns the set containing all flags.",158,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",158,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",158,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",158,{"inputs":[{"name":"u32"}],"output":{"name":"quotavalidflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",158,null],[11,"is_all","","Returns `true` if all flags are currently set.",158,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",158,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",158,null],[11,"insert","","Inserts the specified flags in-place.",158,null],[11,"remove","","Removes the specified flags in-place.",158,null],[11,"toggle","","Toggles the specified flags in-place.",158,null],[11,"bitor","","Returns the union of the two sets of flags.",158,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",158,null],[11,"bitand","","Returns the intersection between the two sets of flags.",158,null],[11,"sub","","Returns the set difference of the two sets of flags.",158,null],[11,"not","","Returns the complement of this set of flags.",158,null],[11,"from_iter","","",158,{"inputs":[{"name":"t"}],"output":{"name":"quotavalidflags"}}],[11,"clone","","",157,null],[11,"fmt","","",157,null],[11,"default","","",157,{"inputs":[],"output":{"name":"dqblk"}}],[0,"statfs","nix::sys","",null,null],[5,"statfs","nix::sys::statfs","",null,{"inputs":[{"name":"p"},{"name":"statfs"}],"output":{"name":"result"}}],[5,"fstatfs","","",null,{"inputs":[{"name":"t"},{"name":"statfs"}],"output":{"name":"result"}}],[0,"vfs","","",null,null],[3,"Statfs","nix::sys::statfs::vfs","",null,null],[12,"f_type","","",159,null],[12,"f_bsize","","",159,null],[12,"f_blocks","","",159,null],[12,"f_bfree","","",159,null],[12,"f_bavail","","",159,null],[12,"f_files","","",159,null],[12,"f_ffree","","",159,null],[12,"f_fsid","","",159,null],[12,"f_namelen","","",159,null],[12,"f_frsize","","",159,null],[12,"f_spare","","",159,null],[0,"hwdep","","",null,null],[6,"FsType","nix::sys::statfs::vfs::hwdep","",null,null],[6,"BlockSize","","",null,null],[6,"NameLen","","",null,null],[6,"FragmentSize","","",null,null],[6,"SwordType","","",null,null],[17,"ADFS_SUPER_MAGIC","nix::sys::statfs::vfs","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"BEFS_SUPER_MAGIC","","",null,null],[17,"BFS_MAGIC","","",null,null],[17,"CIFS_MAGIC_NUMBER","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"COH_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"DEVFS_SUPER_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT_SUPER_MAGIC","","",null,null],[17,"EXT2_OLD_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HFS_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"JFS_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"NTFS_SB_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"ROMFS_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"SYSV2_SUPER_MAGIC","","",null,null],[17,"SYSV4_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"UDF_SUPER_MAGIC","","",null,null],[17,"UFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VXFS_SUPER_MAGIC","","",null,null],[17,"XENIX_SUPER_MAGIC","","",null,null],[17,"XFS_SUPER_MAGIC","","",null,null],[17,"_XIAFS_SUPER_MAGIC","","",null,null],[11,"clone","","",159,null],[11,"fmt","","",159,null],[0,"statvfs","nix::sys","FFI for statvfs functions",null,null],[5,"statvfs","nix::sys::statvfs","Fill an existing `Statvfs` object with information about the `path`",null,{"inputs":[{"name":"p"},{"name":"statvfs"}],"output":{"name":"result"}}],[5,"fstatvfs","","Fill an existing `Statvfs` object with information about `fd`",null,{"inputs":[{"name":"t"},{"name":"statvfs"}],"output":{"name":"result"}}],[0,"vfs","","Structs related to the `statvfs` and `fstatvfs` functions",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","Mount Flags",null,null],[3,"Statvfs","","The posix statvfs struct",null,null],[12,"f_bsize","","Filesystem block size. This is the value that will lead to\nmost efficient use of the filesystem",160,null],[12,"f_frsize","","Fragment Size -- actual minimum unit of allocation on this\nfilesystem",160,null],[12,"f_blocks","","Total number of blocks on the filesystem",160,null],[12,"f_bfree","","Number of unused blocks on the filesystem, including those\nreserved for root",160,null],[12,"f_bavail","","Number of blocks available to non-root users",160,null],[12,"f_files","","Total number of inodes available on the filesystem",160,null],[12,"f_ffree","","Number of inodes available on the filesystem",160,null],[12,"f_favail","","Number of inodes available to non-root users",160,null],[12,"f_fsid","","File System ID",160,null],[12,"f_flag","","Mount Flags",160,null],[12,"f_namemax","","Maximum filename length",160,null],[17,"RDONLY","","Read Only",null,null],[17,"NOSUID","","Do not allow the set-uid bits to have an effect",null,null],[17,"NODEV","","Do not interpret character or block-special devices",null,null],[17,"NOEXEC","","Do not allow execution of binaries on the filesystem",null,null],[17,"SYNCHRONOUS","","All IO should be done synchronously",null,null],[17,"MANDLOCK","","Allow mandatory locks on the filesystem",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","Do not update access times on files",null,null],[17,"NODIRATIME","","Do not update access times on files",null,null],[17,"RELATIME","","Update access time relative to modify/change time",null,null],[11,"hash","","",161,null],[11,"cmp","","",161,null],[11,"partial_cmp","","",161,null],[11,"lt","","",161,null],[11,"le","","",161,null],[11,"gt","","",161,null],[11,"ge","","",161,null],[11,"clone","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"default","","",161,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",161,null],[11,"empty","","Returns an empty set of flags.",161,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",161,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",161,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",161,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",161,{"inputs":[{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",161,null],[11,"is_all","","Returns `true` if all flags are currently set.",161,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",161,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",161,null],[11,"insert","","Inserts the specified flags in-place.",161,null],[11,"remove","","Removes the specified flags in-place.",161,null],[11,"toggle","","Toggles the specified flags in-place.",161,null],[11,"bitor","","Returns the union of the two sets of flags.",161,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",161,null],[11,"bitand","","Returns the intersection between the two sets of flags.",161,null],[11,"sub","","Returns the set difference of the two sets of flags.",161,null],[11,"not","","Returns the complement of this set of flags.",161,null],[11,"from_iter","","",161,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"clone","","",160,null],[11,"fmt","","",160,null],[11,"for_path","","Create a new `Statvfs` object and fill it with information about\nthe mount that contains `path`",160,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",160,null],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",160,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",160,null],[11,"default","","Create a statvfs object initialized to all zeros",160,{"inputs":[],"output":{"name":"self"}}],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"Fork","nix::unistd","",null,null],[13,"Parent","","",162,null],[13,"Child","","",162,null],[5,"pivot_root","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"result"}}],[5,"fork","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"setpgid","","",null,{"inputs":[{"name":"pid_t"},{"name":"pid_t"}],"output":{"name":"result"}}],[5,"dup","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup2","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup3","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"name":"result"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chown","","",null,{"inputs":[{"name":"p"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fsync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"fdatasync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"getegid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"setuid","","",null,{"inputs":[{"name":"uid_t"}],"output":{"name":"result"}}],[5,"setgid","","",null,{"inputs":[{"name":"gid_t"}],"output":{"name":"result"}}],[11,"clone","","",162,null],[11,"is_child","","",162,null],[11,"is_parent","","",162,null],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",163,null],[10,"with_nix_path","","",163,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"fmt","","",62,null],[11,"clone","","",62,null],[11,"from_errno","","",62,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",62,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","",62,{"inputs":[],"output":{"name":"error"}}],[11,"errno","","",62,null],[11,"from","","",62,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",62,null],[11,"fmt","","",62,null],[11,"from","std::io::error","",64,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"len","std::ffi::os_str","",164,null],[11,"with_nix_path","","",164,null],[11,"len","std::ffi::c_str","",165,null],[11,"with_nix_path","","",165,null],[11,"len","std::path","",166,null],[11,"with_nix_path","","",166,null],[11,"len","","",167,null],[11,"with_nix_path","","",167,null],[11,"len","core::option","",168,null],[11,"with_nix_path","","",168,null],[14,"ioc!","nix","Encode an ioctl command.",null,null],[14,"io!","","Encode an ioctl command that has no associated data.",null,null],[14,"ior!","","Encode an ioctl command that reads.",null,null],[14,"iow!","","Encode an ioctl command that writes.",null,null],[14,"iorw!","","Encode an ioctl command that both reads and writes.",null,null],[14,"convert_ioctl_res!","","Convert raw ioctl return value to a Nix result",null,null],[14,"ioctl!","","Declare a wrapper function around an ioctl.",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sigset_t"],[3,"FileStat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"mcontext_t"],[3,"ucontext_t"],[4,"Errno"],[4,"Error"],[8,"ErrnoSentinel"],[3,"Error"],[3,"flock"],[4,"FcntlArg"],[4,"FlockArg"],[3,"SpliceFFlags"],[3,"OFlag"],[3,"FdFlag"],[3,"SealFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"MqAttr"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"PollFd"],[3,"EventFlags"],[3,"CloneFlags"],[3,"CpuSet"],[3,"EpollEvent"],[4,"EpollOp"],[3,"EpollEventKind"],[3,"MemFdCreateFlag"],[4,"SigHandler"],[3,"SaFlag"],[3,"SigFlag"],[3,"SigSet"],[3,"SigAction"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"NetlinkAddr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"RecvMsg"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"MsgFlags"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"ucred"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"MapFlags"],[3,"MsFlags"],[3,"ProtFlags"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"QuotaCmd"],[3,"Dqblk"],[3,"QuotaValidFlags"],[3,"Statfs"],[3,"Statvfs"],[3,"FsFlags"],[4,"Fork"],[8,"NixPath"],[3,"OsStr"],[3,"CStr"],[3,"Path"],[3,"PathBuf"],[4,"Option"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",22,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",23,null],[12,"dli_fbase","","",23,null],[12,"dli_sname","","",23,null],[12,"dli_saddr","","",23,null],[3,"epoll_event","","",null,null],[12,"events","","",24,null],[12,"u64","","",24,null],[3,"utsname","","",null,null],[12,"sysname","","",25,null],[12,"nodename","","",25,null],[12,"release","","",25,null],[12,"version","","",25,null],[12,"machine","","",25,null],[12,"domainname","","",25,null],[3,"lconv","","",null,null],[12,"decimal_point","","",26,null],[12,"thousands_sep","","",26,null],[12,"grouping","","",26,null],[12,"int_curr_symbol","","",26,null],[12,"currency_symbol","","",26,null],[12,"mon_decimal_point","","",26,null],[12,"mon_thousands_sep","","",26,null],[12,"mon_grouping","","",26,null],[12,"positive_sign","","",26,null],[12,"negative_sign","","",26,null],[12,"int_frac_digits","","",26,null],[12,"frac_digits","","",26,null],[12,"p_cs_precedes","","",26,null],[12,"p_sep_by_space","","",26,null],[12,"n_cs_precedes","","",26,null],[12,"n_sep_by_space","","",26,null],[12,"p_sign_posn","","",26,null],[12,"n_sign_posn","","",26,null],[12,"int_p_cs_precedes","","",26,null],[12,"int_p_sep_by_space","","",26,null],[12,"int_n_cs_precedes","","",26,null],[12,"int_n_sep_by_space","","",26,null],[12,"int_p_sign_posn","","",26,null],[12,"int_n_sign_posn","","",26,null],[3,"dirent","","",null,null],[12,"d_ino","","",27,null],[12,"d_off","","",27,null],[12,"d_reclen","","",27,null],[12,"d_type","","",27,null],[12,"d_name","","",27,null],[3,"dirent64","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",29,null],[12,"rlim_max","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_pathv","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_flags","","",30,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",31,null],[12,"ifa_name","","",31,null],[12,"ifa_flags","","",31,null],[12,"ifa_addr","","",31,null],[12,"ifa_netmask","","",31,null],[12,"ifa_ifu","","",31,null],[12,"ifa_data","","",31,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",32,null],[12,"pw_passwd","","",32,null],[12,"pw_uid","","",32,null],[12,"pw_gid","","",32,null],[12,"pw_gecos","","",32,null],[12,"pw_dir","","",32,null],[12,"pw_shell","","",32,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",33,null],[12,"f_frsize","","",33,null],[12,"f_blocks","","",33,null],[12,"f_bfree","","",33,null],[12,"f_bavail","","",33,null],[12,"f_files","","",33,null],[12,"f_ffree","","",33,null],[12,"f_favail","","",33,null],[12,"f_fsid","","",33,null],[12,"f_flag","","",33,null],[12,"f_namemax","","",33,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",34,null],[12,"dqb_bsoftlimit","","",34,null],[12,"dqb_curspace","","",34,null],[12,"dqb_ihardlimit","","",34,null],[12,"dqb_isoftlimit","","",34,null],[12,"dqb_curinodes","","",34,null],[12,"dqb_btime","","",34,null],[12,"dqb_itime","","",34,null],[12,"dqb_valid","","",34,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",35,null],[12,"ssi_errno","","",35,null],[12,"ssi_code","","",35,null],[12,"ssi_pid","","",35,null],[12,"ssi_uid","","",35,null],[12,"ssi_fd","","",35,null],[12,"ssi_tid","","",35,null],[12,"ssi_band","","",35,null],[12,"ssi_overrun","","",35,null],[12,"ssi_trapno","","",35,null],[12,"ssi_status","","",35,null],[12,"ssi_int","","",35,null],[12,"ssi_ptr","","",35,null],[12,"ssi_utime","","",35,null],[12,"ssi_stime","","",35,null],[12,"ssi_addr","","",35,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",36,null],[12,"mq_maxmsg","","",36,null],[12,"mq_msgsize","","",36,null],[12,"mq_curmsgs","","",36,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",38,null],[12,"ss_flags","","",38,null],[12,"ss_size","","",38,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",39,null],[12,"si_errno","","",39,null],[12,"si_code","","",39,null],[12,"_pad","","",39,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"ucred","","",null,null],[12,"pid","","",41,null],[12,"uid","","",41,null],[12,"gid","","",41,null],[3,"statfs","","",null,null],[12,"f_type","","",42,null],[12,"f_bsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_namelen","","",42,null],[12,"f_frsize","","",42,null],[3,"msghdr","","",null,null],[12,"msg_name","","",43,null],[12,"msg_namelen","","",43,null],[12,"msg_iov","","",43,null],[12,"msg_iovlen","","",43,null],[12,"msg_control","","",43,null],[12,"msg_controllen","","",43,null],[12,"msg_flags","","",43,null],[3,"termios","","",null,null],[12,"c_iflag","","",44,null],[12,"c_oflag","","",44,null],[12,"c_cflag","","",44,null],[12,"c_lflag","","",44,null],[12,"c_line","","",44,null],[12,"c_cc","","",44,null],[12,"c_ispeed","","",44,null],[12,"c_ospeed","","",44,null],[3,"flock","","",null,null],[12,"l_type","","",45,null],[12,"l_whence","","",45,null],[12,"l_start","","",45,null],[12,"l_len","","",45,null],[12,"l_pid","","",45,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",48,null],[12,"st_ino","","",48,null],[12,"st_nlink","","",48,null],[12,"st_mode","","",48,null],[12,"st_uid","","",48,null],[12,"st_gid","","",48,null],[12,"st_rdev","","",48,null],[12,"st_size","","",48,null],[12,"st_blksize","","",48,null],[12,"st_blocks","","",48,null],[12,"st_atime","","",48,null],[12,"st_atime_nsec","","",48,null],[12,"st_mtime","","",48,null],[12,"st_mtime_nsec","","",48,null],[12,"st_ctime","","",48,null],[12,"st_ctime_nsec","","",48,null],[3,"stat64","","",null,null],[12,"st_dev","","",49,null],[12,"st_ino","","",49,null],[12,"st_nlink","","",49,null],[12,"st_mode","","",49,null],[12,"st_uid","","",49,null],[12,"st_gid","","",49,null],[12,"st_rdev","","",49,null],[12,"st_size","","",49,null],[12,"st_blksize","","",49,null],[12,"st_blocks","","",49,null],[12,"st_atime","","",49,null],[12,"st_atime_nsec","","",49,null],[12,"st_mtime","","",49,null],[12,"st_mtime_nsec","","",49,null],[12,"st_ctime","","",49,null],[12,"st_ctime_nsec","","",49,null],[3,"pthread_attr_t","","",null,null],[3,"mcontext_t","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",50,null],[12,"uc_link","","",50,null],[12,"uc_stack","","",50,null],[12,"uc_mcontext","","",50,null],[12,"uc_sigmask","","",50,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",51,null],[11,"is_none","","Returns `true` if the option is a `None` value",51,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",51,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",51,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",51,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",51,null],[11,"unwrap_or","","Returns the contained value or a default.",51,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",51,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",51,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",51,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",51,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",51,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",51,null],[11,"iter","","Returns an iterator over the possibly contained value.",51,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",51,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",51,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",51,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",51,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",51,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",51,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",51,null],[11,"unwrap_or_default","","Returns the contained value or a default",51,null],[11,"hash","core::num","",52,null],[11,"default","","",52,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",52,null],[11,"cmp","","",52,null],[11,"partial_cmp","","",52,null],[11,"lt","","",52,null],[11,"le","","",52,null],[11,"gt","","",52,null],[11,"ge","","",52,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"fmt","","",52,null],[11,"fmt","","",52,null],[11,"shl","","",52,null],[11,"shl_assign","","",52,null],[11,"shr","","",52,null],[11,"shr_assign","","",52,null],[11,"shl","","",52,null],[11,"shl_assign","","",52,null],[11,"shr","","",52,null],[11,"shr_assign","","",52,null],[11,"shl","","",52,null],[11,"shl_assign","","",52,null],[11,"shr","","",52,null],[11,"shr_assign","","",52,null],[11,"shl","","",52,null],[11,"shl_assign","","",52,null],[11,"shr","","",52,null],[11,"shr_assign","","",52,null],[11,"shl","","",52,null],[11,"shl_assign","","",52,null],[11,"shr","","",52,null],[11,"shr_assign","","",52,null],[11,"shl","","",52,null],[11,"shl_assign","","",52,null],[11,"shr","","",52,null],[11,"shr_assign","","",52,null],[11,"shl","","",52,null],[11,"shl_assign","","",52,null],[11,"shr","","",52,null],[11,"shr_assign","","",52,null],[11,"shl","","",52,null],[11,"shl_assign","","",52,null],[11,"shr","","",52,null],[11,"shr_assign","","",52,null],[11,"shl","","",52,null],[11,"shl_assign","","",52,null],[11,"shr","","",52,null],[11,"shr_assign","","",52,null],[11,"shl","","",52,null],[11,"shl_assign","","",52,null],[11,"shr","","",52,null],[11,"shr_assign","","",52,null],[11,"add","","",52,null],[11,"add_assign","","",52,null],[11,"sub","","",52,null],[11,"sub_assign","","",52,null],[11,"mul","","",52,null],[11,"mul_assign","","",52,null],[11,"div","","",52,null],[11,"div_assign","","",52,null],[11,"rem","","",52,null],[11,"rem_assign","","",52,null],[11,"not","","",52,null],[11,"bitxor","","",52,null],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,null],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,null],[11,"bitand_assign","","",52,null],[11,"neg","","",52,null],[11,"add","","",52,null],[11,"add_assign","","",52,null],[11,"sub","","",52,null],[11,"sub_assign","","",52,null],[11,"mul","","",52,null],[11,"mul_assign","","",52,null],[11,"div","","",52,null],[11,"div_assign","","",52,null],[11,"rem","","",52,null],[11,"rem_assign","","",52,null],[11,"not","","",52,null],[11,"bitxor","","",52,null],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,null],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,null],[11,"bitand_assign","","",52,null],[11,"neg","","",52,null],[11,"add","","",52,null],[11,"add_assign","","",52,null],[11,"sub","","",52,null],[11,"sub_assign","","",52,null],[11,"mul","","",52,null],[11,"mul_assign","","",52,null],[11,"div","","",52,null],[11,"div_assign","","",52,null],[11,"rem","","",52,null],[11,"rem_assign","","",52,null],[11,"not","","",52,null],[11,"bitxor","","",52,null],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,null],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,null],[11,"bitand_assign","","",52,null],[11,"neg","","",52,null],[11,"add","","",52,null],[11,"add_assign","","",52,null],[11,"sub","","",52,null],[11,"sub_assign","","",52,null],[11,"mul","","",52,null],[11,"mul_assign","","",52,null],[11,"div","","",52,null],[11,"div_assign","","",52,null],[11,"rem","","",52,null],[11,"rem_assign","","",52,null],[11,"not","","",52,null],[11,"bitxor","","",52,null],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,null],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,null],[11,"bitand_assign","","",52,null],[11,"neg","","",52,null],[11,"add","","",52,null],[11,"add_assign","","",52,null],[11,"sub","","",52,null],[11,"sub_assign","","",52,null],[11,"mul","","",52,null],[11,"mul_assign","","",52,null],[11,"div","","",52,null],[11,"div_assign","","",52,null],[11,"rem","","",52,null],[11,"rem_assign","","",52,null],[11,"not","","",52,null],[11,"bitxor","","",52,null],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,null],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,null],[11,"bitand_assign","","",52,null],[11,"neg","","",52,null],[11,"add","","",52,null],[11,"add_assign","","",52,null],[11,"sub","","",52,null],[11,"sub_assign","","",52,null],[11,"mul","","",52,null],[11,"mul_assign","","",52,null],[11,"div","","",52,null],[11,"div_assign","","",52,null],[11,"rem","","",52,null],[11,"rem_assign","","",52,null],[11,"not","","",52,null],[11,"bitxor","","",52,null],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,null],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,null],[11,"bitand_assign","","",52,null],[11,"neg","","",52,null],[11,"add","","",52,null],[11,"add_assign","","",52,null],[11,"sub","","",52,null],[11,"sub_assign","","",52,null],[11,"mul","","",52,null],[11,"mul_assign","","",52,null],[11,"div","","",52,null],[11,"div_assign","","",52,null],[11,"rem","","",52,null],[11,"rem_assign","","",52,null],[11,"not","","",52,null],[11,"bitxor","","",52,null],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,null],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,null],[11,"bitand_assign","","",52,null],[11,"neg","","",52,null],[11,"add","","",52,null],[11,"add_assign","","",52,null],[11,"sub","","",52,null],[11,"sub_assign","","",52,null],[11,"mul","","",52,null],[11,"mul_assign","","",52,null],[11,"div","","",52,null],[11,"div_assign","","",52,null],[11,"rem","","",52,null],[11,"rem_assign","","",52,null],[11,"not","","",52,null],[11,"bitxor","","",52,null],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,null],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,null],[11,"bitand_assign","","",52,null],[11,"neg","","",52,null],[11,"add","","",52,null],[11,"add_assign","","",52,null],[11,"sub","","",52,null],[11,"sub_assign","","",52,null],[11,"mul","","",52,null],[11,"mul_assign","","",52,null],[11,"div","","",52,null],[11,"div_assign","","",52,null],[11,"rem","","",52,null],[11,"rem_assign","","",52,null],[11,"not","","",52,null],[11,"bitxor","","",52,null],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,null],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,null],[11,"bitand_assign","","",52,null],[11,"neg","","",52,null],[11,"add","","",52,null],[11,"add_assign","","",52,null],[11,"sub","","",52,null],[11,"sub_assign","","",52,null],[11,"mul","","",52,null],[11,"mul_assign","","",52,null],[11,"div","","",52,null],[11,"div_assign","","",52,null],[11,"rem","","",52,null],[11,"rem_assign","","",52,null],[11,"not","","",52,null],[11,"bitxor","","",52,null],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,null],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,null],[11,"bitand_assign","","",52,null],[11,"neg","","",52,null],[11,"eq","core::num::dec2flt","",53,null],[11,"ne","","",53,null],[11,"clone","","",53,null],[11,"fmt","","",53,null],[11,"fmt","","",53,null],[11,"fmt","core::num","",54,null],[11,"eq","","",54,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"fmt","","",55,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"fmt","","",56,null],[11,"hash","core::nonzero","",57,null],[11,"fmt","","",57,null],[11,"partial_cmp","","",57,null],[11,"lt","","",57,null],[11,"le","","",57,null],[11,"gt","","",57,null],[11,"ge","","",57,null],[11,"cmp","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",57,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",57,null],[11,"new","core::ptr","Creates a new `Unique`.",58,null],[11,"get","","Dereferences the content.",58,null],[11,"get_mut","","Mutably dereferences the content.",58,null],[11,"deref","","",58,null],[11,"fmt","","",58,null],[11,"new","","Creates a new `Shared`.",59,null],[11,"clone","","",59,null],[11,"deref","","",59,null],[11,"fmt","","",59,null],[11,"hash","core::marker","",60,null],[11,"eq","","",60,null],[11,"partial_cmp","","",60,null],[11,"cmp","","",60,null],[11,"clone","","",60,null],[11,"default","","",60,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",61,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"contains","","# Examples",62,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"fmt","","",63,null],[11,"contains","","# Examples",63,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",64,null],[11,"contains","","# Examples",64,null],[11,"eq","","",65,null],[11,"ne","","",65,null],[11,"clone","","",65,null],[11,"fmt","","",65,null],[11,"from","","",65,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",65,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"clone","","",66,null],[11,"fmt","","",66,null],[11,"contains","","# Examples",66,null],[11,"hash","core::cmp","",67,null],[11,"fmt","","",67,null],[11,"eq","","",67,null],[11,"clone","","",67,null],[11,"reverse","","Reverse the `Ordering`.",67,null],[11,"cmp","","",67,null],[11,"partial_cmp","","",67,null],[11,"fmt","libc","",68,null],[11,"fmt","","",68,null],[11,"is","","Returns true if the boxed type is the same as `T`",68,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",68,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",68,null],[11,"is","","Forwards to the method defined on the type `Any`.",68,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",68,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",68,null],[11,"hash","core::any","",69,null],[11,"fmt","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",69,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",70,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",72,null],[11,"clone","","",72,null],[11,"new","","Creates a new `AtomicBool`.",70,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",70,null],[11,"store","","Stores a value into the bool.",70,null],[11,"swap","","Stores a value into the bool, returning the old value.",70,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",70,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",70,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",70,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",70,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",70,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",70,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",70,null],[11,"new","","Creates a new `AtomicPtr`.",71,null],[11,"load","","Loads a value from the pointer.",71,null],[11,"store","","Stores a value into the pointer.",71,null],[11,"swap","","Stores a value into the pointer, returning the old value.",71,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",71,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",71,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",71,null],[11,"default","","",73,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",73,null],[11,"new","","Creates a new atomic integer.",73,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",73,null],[11,"store","","Stores a value into the atomic integer.",73,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",73,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",73,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",73,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",73,null],[11,"fetch_add","","Add to the current value, returning the previous value.",73,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",73,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",73,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",73,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",73,null],[11,"default","","",74,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",74,null],[11,"new","","Creates a new atomic integer.",74,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",74,null],[11,"store","","Stores a value into the atomic integer.",74,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",74,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",74,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",74,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",74,null],[11,"fetch_add","","Add to the current value, returning the previous value.",74,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",74,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",74,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",74,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",74,null],[11,"default","","",75,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",75,null],[11,"new","","Creates a new atomic integer.",75,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",75,null],[11,"store","","Stores a value into the atomic integer.",75,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",75,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",75,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",75,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",75,null],[11,"fetch_add","","Add to the current value, returning the previous value.",75,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",75,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",75,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",75,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",75,null],[11,"default","","",76,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",76,null],[11,"new","","Creates a new atomic integer.",76,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",76,null],[11,"store","","Stores a value into the atomic integer.",76,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",76,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",76,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",76,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",76,null],[11,"fetch_add","","Add to the current value, returning the previous value.",76,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",76,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",76,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",76,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",76,null],[11,"default","","",77,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",77,null],[11,"new","","Creates a new atomic integer.",77,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",77,null],[11,"store","","Stores a value into the atomic integer.",77,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",77,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",77,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",77,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",77,null],[11,"fetch_add","","Add to the current value, returning the previous value.",77,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",77,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",77,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",77,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",77,null],[11,"default","","",78,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",78,null],[11,"new","","Creates a new atomic integer.",78,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",78,null],[11,"store","","Stores a value into the atomic integer.",78,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",78,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",78,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",78,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",78,null],[11,"fetch_add","","Add to the current value, returning the previous value.",78,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",78,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",78,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",78,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",78,null],[11,"default","","",79,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",79,null],[11,"new","","Creates a new atomic integer.",79,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",79,null],[11,"store","","Stores a value into the atomic integer.",79,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",79,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"fetch_add","","Add to the current value, returning the previous value.",79,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",79,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",79,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",79,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",79,null],[11,"default","","",80,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",80,null],[11,"new","","Creates a new atomic integer.",80,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",80,null],[11,"store","","Stores a value into the atomic integer.",80,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",80,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"fetch_add","","Add to the current value, returning the previous value.",80,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",80,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",80,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",80,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",80,null],[11,"default","","",81,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",81,null],[11,"new","","Creates a new atomic integer.",81,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",81,null],[11,"store","","Stores a value into the atomic integer.",81,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",81,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"fetch_add","","Add to the current value, returning the previous value.",81,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",81,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",81,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",81,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",81,null],[11,"default","","",82,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",82,null],[11,"new","","Creates a new atomic integer.",82,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",82,null],[11,"store","","Stores a value into the atomic integer.",82,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",82,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"fetch_add","","Add to the current value, returning the previous value.",82,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",82,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",82,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",82,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",82,null],[11,"fmt","","",70,null],[11,"fmt","","",71,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",83,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",83,null],[11,"set","","Sets the contained value.",83,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",83,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",83,null],[11,"clone","","",83,null],[11,"default","","",83,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",83,null],[11,"partial_cmp","","",83,null],[11,"lt","","",83,null],[11,"le","","",83,null],[11,"gt","","",83,null],[11,"ge","","",83,null],[11,"cmp","","",83,null],[11,"fmt","","",84,null],[11,"eq","","",84,null],[11,"clone","","",84,null],[11,"new","","Creates a new `RefCell` containing `value`.",85,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",85,null],[11,"borrow_state","","Query the current state of this `RefCell`",85,null],[11,"borrow","","Immutably borrows the wrapped value.",85,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",85,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",85,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",85,null],[11,"clone","","",85,null],[11,"default","","",85,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",85,null],[11,"partial_cmp","","",85,null],[11,"lt","","",85,null],[11,"le","","",85,null],[11,"gt","","",85,null],[11,"ge","","",85,null],[11,"cmp","","",85,null],[11,"deref","","",86,null],[11,"clone","","Copies a `Ref`.",86,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",86,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",86,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",87,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",87,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",87,null],[11,"deref_mut","","",87,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",88,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",88,null],[11,"get","","Gets a mutable pointer to the wrapped value.",88,null],[11,"default","","",88,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",89,null],[11,"clone","","",89,null],[11,"next","","",89,null],[11,"size_hint","","",89,null],[11,"last","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"count","","",90,null],[11,"nth","","",90,null],[11,"last","","",90,null],[11,"fmt","","",91,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"fmt","","",92,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"fmt","core::iter::range","",93,null],[11,"clone","","",93,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",63,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",62,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",65,null],[11,"next","core::iter::range","",93,null],[11,"size_hint","","",93,null],[11,"next","","",93,null],[11,"size_hint","","",93,null],[11,"next","","",93,null],[11,"size_hint","","",93,null],[11,"next","core::ops","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"next","","",63,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","core::iter::sources","",94,null],[11,"clone","","",94,null],[11,"next","","",94,null],[11,"size_hint","","",94,null],[11,"next_back","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"size_hint","","",95,null],[11,"next_back","","",95,null],[11,"len","","",95,null],[11,"clone","","",95,null],[11,"default","","",95,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",96,null],[11,"clone","","",96,null],[11,"next","","",96,null],[11,"size_hint","","",96,null],[11,"next_back","","",96,null],[11,"len","","",96,null],[11,"fmt","core::iter","",97,null],[11,"clone","","",97,null],[11,"next","","",97,null],[11,"size_hint","","",97,null],[11,"next_back","","",97,null],[11,"fmt","","",98,null],[11,"clone","","",98,null],[11,"next","","",98,null],[11,"size_hint","","",98,null],[11,"next_back","","",98,null],[11,"fmt","","",99,null],[11,"clone","","",99,null],[11,"next","","",99,null],[11,"size_hint","","",99,null],[11,"fmt","","",100,null],[11,"clone","","",100,null],[11,"next","","",100,null],[11,"count","","",100,null],[11,"nth","","",100,null],[11,"find","","",100,null],[11,"last","","",100,null],[11,"size_hint","","",100,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"clone","","",101,null],[11,"next","","",101,null],[11,"size_hint","","",101,null],[11,"next_back","","",101,null],[11,"clone","","",102,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"size_hint","","",102,null],[11,"next_back","","",102,null],[11,"clone","","",103,null],[11,"fmt","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"clone","","",104,null],[11,"fmt","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","# Overflow Behavior",105,null],[11,"size_hint","","",105,null],[11,"nth","","",105,null],[11,"count","","",105,null],[11,"next_back","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"next","","",106,null],[11,"count","","",106,null],[11,"nth","","",106,null],[11,"last","","",106,null],[11,"size_hint","","",106,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",106,null],[11,"is_empty","","Checks if the iterator has finished iterating.",106,null],[11,"clone","","",107,null],[11,"fmt","","",107,null],[11,"next","","",107,null],[11,"size_hint","","",107,null],[11,"clone","","",108,null],[11,"fmt","","",108,null],[11,"next","","",108,null],[11,"size_hint","","",108,null],[11,"fmt","","",109,null],[11,"clone","","",109,null],[11,"next","","",109,null],[11,"nth","","",109,null],[11,"count","","",109,null],[11,"last","","",109,null],[11,"size_hint","","",109,null],[11,"next_back","","",109,null],[11,"fmt","","",110,null],[11,"clone","","",110,null],[11,"next","","",110,null],[11,"nth","","",110,null],[11,"size_hint","","",110,null],[11,"clone","","",111,null],[11,"fmt","","",111,null],[11,"next","","",111,null],[11,"size_hint","","",111,null],[11,"clone","","",112,null],[11,"fmt","","",112,null],[11,"next","","",112,null],[11,"size_hint","","",112,null],[11,"next_back","","",112,null],[11,"fmt","","",113,null],[11,"clone","","",113,null],[11,"next","","",113,null],[11,"nth","","",113,null],[11,"last","","",113,null],[11,"count","","",113,null],[11,"size_hint","","",113,null],[11,"next_back","","",113,null],[11,"clone","","",114,null],[11,"fmt","","",114,null],[11,"next","","",114,null],[11,"size_hint","","",114,null],[11,"next_back","","",114,null],[11,"hash","core::option","",51,null],[11,"fmt","","",51,null],[11,"cmp","","",51,null],[11,"partial_cmp","","",51,null],[11,"lt","","",51,null],[11,"le","","",51,null],[11,"gt","","",51,null],[11,"ge","","",51,null],[11,"eq","","",51,null],[11,"ne","","",51,null],[11,"clone","","",51,null],[11,"default","","",51,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",51,null],[11,"fmt","","",115,null],[11,"next","","",115,null],[11,"size_hint","","",115,null],[11,"next_back","","",115,null],[11,"clone","","",115,null],[11,"fmt","","",116,null],[11,"next","","",116,null],[11,"size_hint","","",116,null],[11,"next_back","","",116,null],[11,"fmt","","",117,null],[11,"clone","","",117,null],[11,"next","","",117,null],[11,"size_hint","","",117,null],[11,"next_back","","",117,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",51,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",118,null],[11,"clone","","",119,null],[11,"hash","core::result","",120,null],[11,"fmt","","",120,null],[11,"cmp","","",120,null],[11,"partial_cmp","","",120,null],[11,"lt","","",120,null],[11,"le","","",120,null],[11,"gt","","",120,null],[11,"ge","","",120,null],[11,"eq","","",120,null],[11,"ne","","",120,null],[11,"clone","","",120,null],[11,"is_ok","","Returns true if the result is `Ok`",120,null],[11,"is_err","","Returns true if the result is `Err`",120,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",120,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",120,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",120,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",120,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",120,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",120,null],[11,"iter","","Returns an iterator over the possibly contained value.",120,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",120,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",120,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",120,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",120,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",120,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",120,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",120,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",120,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",120,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",120,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",120,null],[11,"fmt","","",121,null],[11,"next","","",121,null],[11,"size_hint","","",121,null],[11,"next_back","","",121,null],[11,"clone","","",121,null],[11,"fmt","","",122,null],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"next_back","","",122,null],[11,"fmt","","",123,null],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"next_back","","",123,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",120,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",124,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",124,null],[11,"next","","",124,null],[11,"size_hint","","",124,null],[11,"count","","",124,null],[11,"nth","","",124,null],[11,"last","","",124,null],[11,"next_back","","",124,null],[11,"clone","","",124,null],[11,"fmt","","",125,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",125,null],[11,"next","","",125,null],[11,"size_hint","","",125,null],[11,"count","","",125,null],[11,"nth","","",125,null],[11,"last","","",125,null],[11,"next_back","","",125,null],[11,"fmt","","",126,null],[11,"clone","","",126,null],[11,"next","","",126,null],[11,"size_hint","","",126,null],[11,"next_back","","",126,null],[11,"fmt","","",127,null],[11,"next","","",127,null],[11,"size_hint","","",127,null],[11,"next_back","","",127,null],[11,"fmt","","",128,null],[11,"fmt","","",129,null],[11,"fmt","","",130,null],[11,"fmt","","",131,null],[11,"next","","",128,null],[11,"size_hint","","",128,null],[11,"next","","",129,null],[11,"size_hint","","",129,null],[11,"next","","",130,null],[11,"size_hint","","",130,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"count","","",132,null],[11,"nth","","",132,null],[11,"last","","",132,null],[11,"next_back","","",132,null],[11,"fmt","","",133,null],[11,"clone","","",133,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"count","","",133,null],[11,"nth","","",133,null],[11,"last","","",133,null],[11,"next_back","","",133,null],[11,"fmt","","",134,null],[11,"next","","",134,null],[11,"size_hint","","",134,null],[11,"count","","",134,null],[11,"nth","","",134,null],[11,"last","","",134,null],[11,"next_back","","",134,null],[11,"fmt","core::str::pattern","",135,null],[11,"eq","","",135,null],[11,"ne","","",135,null],[11,"clone","","",135,null],[11,"fmt","","",136,null],[11,"clone","","",136,null],[11,"haystack","","",136,null],[11,"next","","",136,null],[11,"next_match","","",136,null],[11,"next_reject","","",136,null],[11,"next_back","","",136,null],[11,"next_match_back","","",136,null],[11,"next_reject_back","","",136,null],[11,"fmt","","",137,null],[11,"clone","","",137,null],[11,"haystack","","",137,null],[11,"next","","",137,null],[11,"next_match","","",137,null],[11,"next_reject","","",137,null],[11,"next_back","","",137,null],[11,"next_match_back","","",137,null],[11,"next_reject_back","","",137,null],[11,"clone","","",138,null],[11,"fmt","","",138,null],[11,"haystack","","",138,null],[11,"next","","",138,null],[11,"next_match","","",138,null],[11,"next_reject","","",138,null],[11,"next_back","","",138,null],[11,"next_match_back","","",138,null],[11,"next_reject_back","","",138,null],[11,"fmt","","",139,null],[11,"clone","","",139,null],[11,"haystack","","",139,null],[11,"next","","",139,null],[11,"next_match","","",139,null],[11,"next_back","","",139,null],[11,"next_match_back","","",139,null],[11,"eq","core::str","",140,null],[11,"ne","","",140,null],[11,"clone","","",140,null],[11,"fmt","","",140,null],[11,"fmt","","",140,null],[11,"fmt","","",141,null],[11,"clone","","",141,null],[11,"eq","","",141,null],[11,"ne","","",141,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",141,null],[11,"fmt","","",141,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"next","","",142,null],[11,"size_hint","","",142,null],[11,"next_back","","",142,null],[11,"as_str","","View the underlying data as a subslice of the original data.",142,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"next","","",143,null],[11,"size_hint","","",143,null],[11,"next_back","","",143,null],[11,"as_str","","View the underlying data as a subslice of the original data.",143,null],[11,"fmt","","",144,null],[11,"clone","","",144,null],[11,"next","","",144,null],[11,"size_hint","","",144,null],[11,"count","","",144,null],[11,"last","","",144,null],[11,"nth","","",144,null],[11,"next_back","","",144,null],[11,"len","","",144,null],[11,"fmt","","",145,null],[11,"next","","",145,null],[11,"clone","","",145,null],[11,"fmt","","",146,null],[11,"next","","",146,null],[11,"clone","","",146,null],[11,"next_back","","",145,null],[11,"next_back","","",146,null],[11,"fmt","","",147,null],[11,"next","","",147,null],[11,"clone","","",147,null],[11,"fmt","","",148,null],[11,"next","","",148,null],[11,"clone","","",148,null],[11,"next_back","","",147,null],[11,"next_back","","",148,null],[11,"fmt","","",149,null],[11,"next","","",149,null],[11,"clone","","",149,null],[11,"fmt","","",150,null],[11,"next","","",150,null],[11,"clone","","",150,null],[11,"fmt","","",151,null],[11,"next","","",151,null],[11,"clone","","",151,null],[11,"fmt","","",152,null],[11,"next","","",152,null],[11,"clone","","",152,null],[11,"next_back","","",151,null],[11,"next_back","","",152,null],[11,"fmt","","",153,null],[11,"next","","",153,null],[11,"clone","","",153,null],[11,"fmt","","",154,null],[11,"next","","",154,null],[11,"clone","","",154,null],[11,"next_back","","",153,null],[11,"next_back","","",154,null],[11,"fmt","","",155,null],[11,"clone","","",155,null],[11,"next","","",155,null],[11,"size_hint","","",155,null],[11,"next_back","","",155,null],[11,"fmt","","",156,null],[11,"clone","","",156,null],[11,"next","","",156,null],[11,"size_hint","","",156,null],[11,"next_back","","",156,null],[11,"fmt","","",157,null],[11,"clone","","",157,null],[11,"fmt","core::hash::sip","",158,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",158,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",158,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",158,null],[11,"finish","","",158,null],[11,"clone","","",158,null],[11,"default","","",158,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",159,null],[11,"build_hasher","","",159,null],[11,"clone","","",159,null],[11,"default","","",159,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",160,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",161,null],[11,"finish","","Finishes output and returns any error encountered.",161,null],[11,"field","","Adds a new field to the generated tuple struct output.",162,null],[11,"finish","","Finishes output and returns any error encountered.",162,null],[11,"entry","","Adds a new entry to the set output.",163,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",163,null],[11,"finish","","Finishes output and returns any error encountered.",163,null],[11,"entry","","Adds a new entry to the list output.",164,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",164,null],[11,"finish","","Finishes output and returns any error encountered.",164,null],[11,"entry","","Adds a new entry to the map output.",165,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",165,null],[11,"finish","","Finishes output and returns any error encountered.",165,null],[11,"partial_cmp","core::fmt","",166,null],[11,"eq","","",166,null],[11,"cmp","","",166,null],[11,"hash","","",166,null],[11,"default","","",166,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",166,null],[11,"clone","","",166,null],[11,"clone","","",167,null],[11,"fmt","","",167,null],[11,"fmt","","",167,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",168,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",168,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",168,null],[11,"write_fmt","","Writes some formatted information into this instance",168,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",168,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",168,null],[11,"align","","Flag indicating what form of alignment was requested",168,null],[11,"width","","Optionally specified integer width that the output should be",168,null],[11,"precision","","Optionally specified precision for numeric types",168,null],[11,"sign_plus","","Determines if the `+` flag was specified.",168,null],[11,"sign_minus","","Determines if the `-` flag was specified.",168,null],[11,"alternate","","Determines if the `#` flag was specified.",168,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",168,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",168,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",168,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",168,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",168,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",168,null],[11,"write_str","","",168,null],[11,"write_char","","",168,null],[11,"write_fmt","","",168,null],[11,"fmt","","",166,null],[11,"fmt","core::marker","",60,null],[11,"fmt","core::cell","",83,null],[11,"fmt","","",85,null],[11,"fmt","","",86,null],[11,"fmt","","",87,null],[11,"fmt","","",88,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",169,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",169,null],[11,"clone","libc","",48,null],[11,"clone","","",49,null],[11,"clone","","",170,null],[11,"clone","","",171,null],[11,"clone","","",50,null],[11,"clone","","",172,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",173,null],[11,"clone","","",174,null],[11,"clone","","",175,null],[11,"clone","","",176,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",177,null],[11,"clone","","",36,null],[11,"clone","","",178,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",179,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"mcontext_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[0,"error","bitflags::__core","Traits for working with Errors.",null,null],[11,"is","","Returns true if the boxed type is the same as `T`",0,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",0,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",0,null],[11,"is","","Forwards to the method defined on the type `Any`.",0,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",0,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",0,null],[11,"is","","Forwards to the method defined on the type `Any`.",0,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",0,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",0,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",0,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",0,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",0,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"from","alloc::boxed","",1,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",2,null],[11,"description","","",3,null],[11,"description","core::num","",4,null],[11,"description","","",5,null],[11,"description","core::num::dec2flt","",6,null],[11,"description","collections::string","",7,null],[11,"description","","",8,null],[11,"description","","",9,null],[11,"description","rustc_unicode::char","",10,null],[11,"description","alloc::boxed","",1,null],[11,"cause","","",1,null],[11,"next","std::ascii","",11,null],[11,"size_hint","","",11,null],[11,"next_back","","",11,null],[11,"clone","std::thread::local","",12,null],[11,"eq","","",12,null],[11,"with","","Acquires a reference to the value in this TLS key.",13,null],[11,"state","","Query the current state of this key.",13,null],[11,"new","std::thread::local::elf","",14,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",14,null],[11,"new","std::thread::local::os","",15,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",15,null],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",16,null],[11,"with","","Gets a value out of this scoped variable.",16,null],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",16,null],[11,"new","std::thread::scoped_tls::imp","",17,{"inputs":[],"output":{"name":"keyinner"}}],[11,"set","","",17,null],[11,"get","","",17,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",18,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",18,null],[11,"stack_size","","Sets the size of the stack for the new thread.",18,null],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",18,null],[11,"clone","","",19,null],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",19,null],[11,"name","","Gets the thread&#39;s name.",19,null],[11,"fmt","","",19,null],[11,"thread","","Extracts a handle to the underlying thread",20,null],[11,"join","","Waits for the associated thread to finish.",20,null],[11,"clone","std::collections::hash::map","",21,null],[11,"new","","Creates an empty HashMap.",21,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",21,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",21,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",21,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map&#39;s hasher.",21,null],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",21,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",21,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",21,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&amp;&#39;a K`.",21,null],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&amp;&#39;a V`.",21,null],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order.\nIterator element type is `&amp;&#39;a mut V`.",21,null],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`.",21,null],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`.",21,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",21,null],[11,"len","","Returns the number of elements in the map.",21,null],[11,"is_empty","","Returns true if the map contains no elements.",21,null],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",21,null],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",21,null],[11,"get","","Returns a reference to the value corresponding to the key.",21,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",21,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",21,null],[11,"insert","","Inserts a key-value pair into the map.",21,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",21,null],[11,"eq","","",21,null],[11,"fmt","","",21,null],[11,"default","","",21,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",21,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",21,null],[11,"next","","",22,null],[11,"size_hint","","",22,null],[11,"len","","",22,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"len","","",25,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"len","","",26,null],[11,"next","","",23,null],[11,"size_hint","","",23,null],[11,"len","","",23,null],[11,"next","","",24,null],[11,"size_hint","","",24,null],[11,"len","","",24,null],[11,"next","","",27,null],[11,"size_hint","","",27,null],[11,"len","","",27,null],[11,"next","","",28,null],[11,"size_hint","","",28,null],[11,"len","","",28,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",29,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",29,null],[11,"key","","Returns a reference to this entry&#39;s key.",29,null],[11,"key","","Gets a reference to the key in the entry.",30,null],[11,"get","","Gets a reference to the value in the entry.",30,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",30,null],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",30,null],[11,"insert","","Sets the value of the entry, and returns the entry&#39;s old value",30,null],[11,"remove","","Takes the value out of the entry, and returns it",30,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",31,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it",31,null],[11,"from_iter","","",21,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",21,null],[11,"extend","","",21,null],[11,"clone","","",32,null],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",32,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",32,null],[11,"default","","",32,{"inputs":[],"output":{"name":"randomstate"}}],[11,"clone","std::collections::hash::set","",33,null],[11,"new","","Creates an empty HashSet.",33,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",33,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",33,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",33,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set&#39;s hasher.",33,null],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",33,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",33,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",33,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &amp;&#39;a T.",33,null],[11,"difference","","Visit the values representing the difference.",33,null],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",33,null],[11,"intersection","","Visit the values representing the intersection.",33,null],[11,"union","","Visit the values representing the union.",33,null],[11,"len","","Returns the number of elements in the set.",33,null],[11,"is_empty","","Returns true if the set contains no elements.",33,null],[11,"drain","","Clears the set, returning all elements in an iterator.",33,null],[11,"clear","","Clears the set, removing all values.",33,null],[11,"contains","","Returns `true` if the set contains a value.",33,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",33,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",33,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",33,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",33,null],[11,"insert","","Adds a value to the set.",33,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",33,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",33,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",33,null],[11,"eq","","",33,null],[11,"fmt","","",33,null],[11,"from_iter","","",33,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",33,null],[11,"extend","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",33,null],[11,"clone","","",34,null],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"len","","",34,null],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"len","","",35,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"len","","",36,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"clone","","",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"clone","","",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"clone","collections::vec_deque","",41,null],[11,"drop","","",41,null],[11,"default","","",41,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",41,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",41,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",41,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",41,null],[11,"swap","","Swaps elements at indices `i` and `j`.",41,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",41,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",41,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",41,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",41,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",41,null],[11,"iter","","Returns a front-to-back iterator.",41,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",41,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",41,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",41,null],[11,"len","","Returns the number of elements in the `VecDeque`.",41,null],[11,"is_empty","","Returns true if the buffer contains no elements",41,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",41,null],[11,"clear","","Clears the buffer, removing all values.",41,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",41,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",41,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",41,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",41,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",41,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",41,null],[11,"push_front","","Inserts an element first in the sequence.",41,null],[11,"push_back","","Appends an element to the back of a buffer",41,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",41,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",41,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",41,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",41,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",41,null],[11,"split_off","","Splits the collection into two at the given index.",41,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",41,null],[11,"retain","","Retains only the elements specified by the predicate.",41,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",41,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"drop","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"eq","","",41,null],[11,"partial_cmp","","",41,null],[11,"cmp","","",41,null],[11,"hash","","",41,null],[11,"index","","",41,null],[11,"index_mut","","",41,null],[11,"from_iter","","",41,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",41,null],[11,"extend","","",41,null],[11,"extend","","",41,null],[11,"fmt","","",41,null],[11,"from","","",41,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",46,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"clone","collections::binary_heap","",47,null],[11,"clone_from","","",47,null],[11,"default","","",47,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",47,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",47,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",47,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",47,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",47,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",47,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",47,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",47,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",47,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",47,null],[11,"push","","Pushes an item onto the binary heap.",47,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",47,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",47,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",47,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",47,null],[11,"len","","Returns the length of the binary heap.",47,null],[11,"is_empty","","Checks if the binary heap is empty.",47,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",47,null],[11,"clear","","Drops all items from the binary heap.",47,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",47,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"from","","",47,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",46,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",47,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",47,null],[11,"extend","","",47,null],[11,"extend","","",47,null],[11,"clone","collections::linked_list","",51,null],[11,"clone","","",52,null],[11,"default","","",53,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",53,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",53,null],[11,"iter","","Provides a forward iterator.",53,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",53,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",53,null],[11,"len","","Returns the length of the `LinkedList`.",53,null],[11,"clear","","Removes all elements from the `LinkedList`.",53,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",53,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",53,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",53,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",53,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",53,null],[11,"push_front","","Adds an element first in the list.",53,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",53,null],[11,"push_back","","Appends an element to the back of a list",53,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",53,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",53,null],[11,"front_place","","Returns a place for insertion at the front of the list.",53,null],[11,"back_place","","Returns a place for insertion at the back of the list.",53,null],[11,"drop","","",53,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"next","","",54,null],[11,"size_hint","","",54,null],[11,"next_back","","",54,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",54,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",54,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"from_iter","","",53,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",53,null],[11,"extend","","",53,null],[11,"extend","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"partial_cmp","","",53,null],[11,"cmp","","",53,null],[11,"clone","","",53,null],[11,"fmt","","",53,null],[11,"hash","","",53,null],[11,"make_place","","",55,null],[11,"pointer","","",55,null],[11,"finalize","","",55,null],[11,"make_place","","",56,null],[11,"pointer","","",56,null],[11,"finalize","","",56,null],[11,"next","std::env","",57,null],[11,"size_hint","","",57,null],[11,"next","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"fmt","","",59,null],[11,"fmt","","",59,null],[11,"description","","",59,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"fmt","","",61,null],[11,"fmt","","",61,null],[11,"description","","",61,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"len","","",62,null],[11,"next","","",63,null],[11,"size_hint","","",63,null],[11,"len","","",63,null],[11,"clone","std::ffi::c_str","",64,null],[11,"hash","","",64,null],[11,"cmp","","",64,null],[11,"partial_cmp","","",64,null],[11,"lt","","",64,null],[11,"le","","",64,null],[11,"gt","","",64,null],[11,"ge","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"hash","","",65,null],[11,"fmt","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"clone","","",66,null],[11,"fmt","","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"new","","Creates a new C-compatible string from a container of bytes.",64,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",64,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",64,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",64,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",64,null],[11,"into_bytes","","Returns the underlying byte buffer.",64,null],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",64,null],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",64,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",64,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",65,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",65,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",65,null],[11,"as_ptr","","Returns the inner pointer to this C string.",65,null],[11,"to_bytes","","Converts this C string to a byte slice.",65,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",65,null],[11,"to_str","","Yields a `&amp;str` slice if the `CStr` contains valid UTF-8.",65,null],[11,"to_string_lossy","","Converts a `CStr` into a `Cow&lt;str&gt;`.",65,null],[11,"deref","","",64,null],[11,"fmt","","",64,null],[11,"from","collections::vec","",46,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",65,null],[11,"default","","",64,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",64,null],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",66,null],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",66,null],[11,"description","","",66,null],[11,"fmt","","",66,null],[11,"from","std::io::error","",69,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",68,null],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",68,null],[11,"description","","",68,null],[11,"cause","","",68,null],[11,"fmt","","",68,null],[11,"eq","","",65,null],[11,"partial_cmp","","",65,null],[11,"cmp","","",65,null],[11,"to_owned","","",65,null],[11,"from","","",64,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",64,null],[11,"as_ref","","",65,null],[11,"as_ref","","",64,null],[11,"clone","std::ffi::os_str","",70,null],[11,"new","","Constructs a new empty `OsString`.",70,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",70,null],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",70,null],[11,"push","","Extends the string with the given `&amp;OsStr` slice.",70,null],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",70,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",70,null],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",70,null],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted\nin the given `OsString`.",70,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to\nbe inserted in the given `OsString`. Does nothing if the capacity is\nalready sufficient.",70,null],[11,"from","","",70,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",70,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",70,null],[11,"new","","Coerces into an `OsStr` slice.",71,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&amp;str` slice if the `OsStr` is valid Unicode.",71,null],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow&lt;str&gt;`.",71,null],[11,"to_os_string","","Copies the slice into an owned `OsString`.",71,null],[11,"is_empty","","Checks whether the `OsStr` is empty.",71,null],[11,"len","","Returns the length of this `OsStr`.",71,null],[11,"deref","","",70,null],[11,"default","","",70,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",70,null],[11,"eq","","",70,null],[11,"eq","","",70,null],[11,"partial_cmp","","",70,null],[11,"lt","","",70,null],[11,"le","","",70,null],[11,"gt","","",70,null],[11,"ge","","",70,null],[11,"partial_cmp","","",70,null],[11,"cmp","","",70,null],[11,"hash","","",70,null],[11,"eq","","",71,null],[11,"eq","","",71,null],[11,"partial_cmp","","",71,null],[11,"lt","","",71,null],[11,"le","","",71,null],[11,"gt","","",71,null],[11,"ge","","",71,null],[11,"partial_cmp","","",71,null],[11,"cmp","","",71,null],[11,"eq","","",70,null],[11,"eq","","",71,null],[11,"partial_cmp","","",70,null],[11,"partial_cmp","","",71,null],[11,"eq","","",70,null],[11,"partial_cmp","","",70,null],[11,"eq","collections::borrow","",72,null],[11,"eq","std::ffi::os_str","",71,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"partial_cmp","std::ffi::os_str","",71,null],[11,"eq","collections::borrow","",72,null],[11,"partial_cmp","","",72,null],[11,"eq","","",72,null],[11,"eq","std::ffi::os_str","",70,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"partial_cmp","std::ffi::os_str","",70,null],[11,"hash","","",71,null],[11,"fmt","","",71,null],[11,"borrow","","",70,null],[11,"to_owned","","",71,null],[11,"as_ref","","",71,null],[11,"as_ref","","",70,null],[11,"as_ref","collections::string","",73,null],[11,"clone","std::fs","",74,null],[11,"clone","","",75,null],[11,"fmt","","",76,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"clone","","",76,null],[11,"hash","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"open","","Attempts to open a file in read-only mode.",78,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",78,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",78,null],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",78,null],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",78,null],[11,"metadata","","Queries metadata about the underlying file.",78,null],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",78,null],[11,"fmt","","",78,null],[11,"read","","",78,null],[11,"read_to_end","","",78,null],[11,"write","","",78,null],[11,"flush","","",78,null],[11,"seek","","",78,null],[11,"new","","Creates a blank new set of options ready for configuration.",75,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",75,null],[11,"write","","Sets the option for write access.",75,null],[11,"append","","Sets the option for the append mode.",75,null],[11,"truncate","","Sets the option for truncating a previous file.",75,null],[11,"create","","Sets the option for creating a new file.",75,null],[11,"create_new","","Sets the option to always create a new file.",75,null],[11,"open","","Opens a file at `path` with the options specified by `self`.",75,null],[11,"file_type","","Returns the file type for this metadata.",74,null],[11,"is_dir","","Returns whether this metadata is for a directory.",74,null],[11,"is_file","","Returns whether this metadata is for a regular file.",74,null],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",74,null],[11,"permissions","","Returns the permissions of the file this metadata is for.",74,null],[11,"modified","","Returns the last modification time listed in this metadata.",74,null],[11,"accessed","","Returns the last access time of this metadata.",74,null],[11,"created","","Returns the creation time listed in the this metadata.",74,null],[11,"readonly","","Returns whether these permissions describe a readonly file.",76,null],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",76,null],[11,"is_dir","","Test whether this file type represents a directory.",77,null],[11,"is_file","","Test whether this file type represents a regular file.",77,null],[11,"is_symlink","","Test whether this file type represents a symbolic link.",77,null],[11,"next","","",79,null],[11,"path","","Returns the full path to the file that this entry represents.",80,null],[11,"metadata","","Return the metadata for the file that this entry points at.",80,null],[11,"file_type","","Return the file type for the file that this entry points at.",80,null],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",80,null],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",81,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",81,null],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",81,null],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",82,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",82,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",82,null],[11,"get_mut","","Gets a mutable reference to the underlying reader.",82,null],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",82,null],[11,"read","","",82,null],[11,"fill_buf","","",82,null],[11,"consume","","",82,null],[11,"fmt","","",82,null],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",82,null],[11,"fmt","","",83,null],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",84,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",84,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",84,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",84,null],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",84,null],[11,"write","","",84,null],[11,"flush","","",84,null],[11,"fmt","","",84,null],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",84,null],[11,"drop","","",84,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",83,null],[11,"into_inner","","Returns the buffered writer instance which generated the error.",83,null],[11,"from","std::io::error","",69,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",83,null],[11,"fmt","","",83,null],[11,"new","","Creates a new `LineWriter`.",85,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",85,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",85,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",85,null],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",85,null],[11,"write","","",85,null],[11,"flush","","",85,null],[11,"fmt","","",85,null],[11,"fmt","std::io::cursor","",86,null],[11,"clone","","",86,null],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",86,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",86,null],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",86,null],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",86,null],[11,"position","","Returns the current position of this cursor.",86,null],[11,"set_position","","Sets the position of this cursor.",86,null],[11,"seek","","",86,null],[11,"read","","",86,null],[11,"fill_buf","","",86,null],[11,"consume","","",86,null],[11,"write","","",86,null],[11,"flush","","",86,null],[11,"write","","",86,null],[11,"flush","","",86,null],[11,"write","","",86,null],[11,"flush","","",86,null],[11,"fmt","std::io::error","",69,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"eq","","",87,null],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",69,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",69,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",69,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",69,null],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",69,null],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",69,null],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",69,null],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",69,null],[11,"fmt","","",69,null],[11,"description","","",69,null],[11,"cause","","",69,null],[11,"read","alloc::boxed","",1,null],[11,"read_to_end","","",1,null],[11,"read_to_string","","",1,null],[11,"read_exact","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,null],[11,"write_all","","",1,null],[11,"write_fmt","","",1,null],[11,"seek","","",1,null],[11,"fill_buf","","",1,null],[11,"consume","","",1,null],[11,"read_until","","",1,null],[11,"read_line","","",1,null],[11,"write","collections::vec","",46,null],[11,"write_all","","",46,null],[11,"flush","","",46,null],[11,"read","std::io::util","",88,null],[11,"fill_buf","","",88,null],[11,"consume","","",88,null],[11,"read","","",89,null],[11,"write","","",90,null],[11,"flush","","",90,null],[11,"lock","std::io::stdio","Locks this handle to the standard input stream, returning a readable\nguard.",91,null],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",91,null],[11,"read","","",91,null],[11,"read_to_end","","",91,null],[11,"read_to_string","","",91,null],[11,"read_exact","","",91,null],[11,"read","","",92,null],[11,"read_to_end","","",92,null],[11,"fill_buf","","",92,null],[11,"consume","","",92,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",93,null],[11,"write","","",93,null],[11,"flush","","",93,null],[11,"write_all","","",93,null],[11,"write_fmt","","",93,null],[11,"write","","",94,null],[11,"flush","","",94,null],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",95,null],[11,"write","","",95,null],[11,"flush","","",95,null],[11,"write_all","","",95,null],[11,"write_fmt","","",95,null],[11,"write","","",96,null],[11,"flush","","",96,null],[11,"fmt","std::io","",97,null],[11,"clone","","",97,null],[11,"eq","","",97,null],[11,"ne","","",97,null],[11,"read","","",98,null],[11,"fill_buf","","",98,null],[11,"consume","","",98,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",99,null],[11,"read","","",99,null],[11,"fill_buf","","",99,null],[11,"consume","","",99,null],[11,"next","","",100,null],[11,"fmt","","",101,null],[11,"next","","",102,null],[11,"description","","",101,null],[11,"cause","","",101,null],[11,"fmt","","",101,null],[11,"next","","",103,null],[11,"next","","",104,null],[11,"cmp","std::net::ip","",105,null],[11,"partial_cmp","","",105,null],[11,"lt","","",105,null],[11,"le","","",105,null],[11,"gt","","",105,null],[11,"ge","","",105,null],[11,"hash","","",105,null],[11,"fmt","","",105,null],[11,"eq","","",105,null],[11,"ne","","",105,null],[11,"clone","","",105,null],[11,"fmt","","",106,null],[11,"hash","","",106,null],[11,"clone","","",106,null],[11,"eq","","",106,null],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",107,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",107,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address 0.0.0.0.",107,null],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",107,null],[11,"is_private","","Returns true if this is a private address.",107,null],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",107,null],[11,"is_global","","Returns true if the address appears to be globally routable.\nSee [iana-ipv4-special-registry][ipv4-sr].\n[ipv4-sr]: http://goo.gl/RaZ7lg",107,null],[11,"is_multicast","","Returns true if this is a multicast address.",107,null],[11,"is_broadcast","","Returns true if this is a broadcast address.",107,null],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",107,null],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",107,null],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",107,null],[11,"fmt","","",105,null],[11,"fmt","","",107,null],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"eq","","",107,null],[11,"hash","","",107,null],[11,"partial_cmp","","",107,null],[11,"cmp","","",107,null],[11,"from","","",107,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",107,null],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",108,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",108,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address ::.",108,null],[11,"is_loopback","","Returns true if this is a loopback address (::1).",108,null],[11,"is_global","","Returns true if the address appears to be globally routable.",108,null],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",108,null],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",108,null],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",108,null],[11,"is_documentation","","Returns true if this is an address reserved for documentation\nThis is defined to be 2001:db8::/32 in RFC 3849.",108,null],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",108,null],[11,"multicast_scope","","Returns the address&#39;s multicast scope if the address is multicast.",108,null],[11,"is_multicast","","Returns true if this is a multicast address.",108,null],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",108,null],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",108,null],[11,"fmt","","",108,null],[11,"fmt","","",108,null],[11,"clone","","",108,null],[11,"eq","","",108,null],[11,"hash","","",108,null],[11,"partial_cmp","","",108,null],[11,"cmp","","",108,null],[11,"from","","",108,null],[11,"fmt","std::net::addr","",109,null],[11,"hash","","",109,null],[11,"eq","","",109,null],[11,"ne","","",109,null],[11,"clone","","",109,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",109,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",109,null],[11,"set_ip","","Change the IP address associated with this socket address.",109,null],[11,"port","","Returns the port number associated with this socket address.",109,null],[11,"set_port","","Change the port number associated with this socket address.",109,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",110,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",110,null],[11,"set_ip","","Change the IP address associated with this socket address.",110,null],[11,"port","","Returns the port number associated with this socket address.",110,null],[11,"set_port","","Change the port number associated with this socket address.",110,null],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",111,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",111,null],[11,"set_ip","","Change the IP address associated with this socket address.",111,null],[11,"port","","Returns the port number associated with this socket address.",111,null],[11,"set_port","","Change the port number associated with this socket address.",111,null],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",111,null],[11,"set_flowinfo","","Change the flow information associated with this socket address.",111,null],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",111,null],[11,"set_scope_id","","Change the scope ID associated with this socket address.",111,null],[11,"fmt","","",109,null],[11,"fmt","","",110,null],[11,"fmt","","",110,null],[11,"fmt","","",111,null],[11,"fmt","","",111,null],[11,"clone","","",110,null],[11,"clone","","",111,null],[11,"eq","","",110,null],[11,"eq","","",111,null],[11,"hash","","",110,null],[11,"hash","","",111,null],[11,"to_socket_addrs","","",109,null],[11,"to_socket_addrs","","",110,null],[11,"to_socket_addrs","","",111,null],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",112,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",112,null],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",112,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",112,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",112,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",112,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",112,null],[11,"read_timeout","","Returns the read timeout of this socket.",112,null],[11,"write_timeout","","Returns the write timeout of this socket.",112,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",112,null],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",112,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",112,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",112,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",112,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",112,null],[11,"read","","",112,null],[11,"read_to_end","","",112,null],[11,"write","","",112,null],[11,"flush","","",112,null],[11,"fmt","","",112,null],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",113,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",113,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",113,null],[11,"accept","","Accept a new incoming connection from this listener.",113,null],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",113,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",113,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",113,null],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",113,null],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",113,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",113,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",113,null],[11,"next","","",114,null],[11,"fmt","","",113,null],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",115,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",115,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",115,null],[11,"local_addr","","Returns the socket address that this socket was created from.",115,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",115,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",115,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",115,null],[11,"read_timeout","","Returns the read timeout of this socket.",115,null],[11,"write_timeout","","Returns the write timeout of this socket.",115,null],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",115,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",115,null],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",115,null],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",115,null],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",115,null],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",115,null],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",115,null],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",115,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",115,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",115,null],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",115,null],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",115,null],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",115,null],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",115,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",115,null],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",115,null],[11,"send","","Sends data on the socket to the remote address to which it is connected.",115,null],[11,"recv","","Receives data on the socket from the remote address to which it is\nconnected.",115,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",115,null],[11,"fmt","","",115,null],[11,"from_str","std::net::ip","",105,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",107,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",108,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",110,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",111,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",109,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",116,null],[11,"ne","","",116,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"description","","",116,null],[11,"fmt","std::net","",117,null],[11,"eq","","",117,null],[11,"clone","","",117,null],[11,"next","","",118,null],[11,"clone","std::os::linux::raw::arch","",119,null],[11,"as_raw_stat","std::fs","",74,null],[11,"st_dev","","",74,null],[11,"st_ino","","",74,null],[11,"st_mode","","",74,null],[11,"st_nlink","","",74,null],[11,"st_uid","","",74,null],[11,"st_gid","","",74,null],[11,"st_rdev","","",74,null],[11,"st_size","","",74,null],[11,"st_atime","","",74,null],[11,"st_atime_nsec","","",74,null],[11,"st_mtime","","",74,null],[11,"st_mtime_nsec","","",74,null],[11,"st_ctime","","",74,null],[11,"st_ctime_nsec","","",74,null],[11,"st_blksize","","",74,null],[11,"st_blocks","","",74,null],[11,"as_raw_fd","","",78,null],[11,"from_raw_fd","","",78,{"inputs":[{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",78,null],[11,"as_raw_fd","std::net::tcp","",112,null],[11,"as_raw_fd","","",113,null],[11,"as_raw_fd","std::net::udp","",115,null],[11,"from_raw_fd","std::net::tcp","",112,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",113,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",115,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",112,null],[11,"into_raw_fd","","",113,null],[11,"into_raw_fd","std::net::udp","",115,null],[11,"from_vec","std::ffi::os_str","",70,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",70,null],[11,"from_bytes","","",71,null],[11,"as_bytes","","",71,null],[11,"mode","std::fs","",76,null],[11,"set_mode","","",76,null],[11,"from_mode","","",76,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",75,null],[11,"custom_flags","","",75,null],[11,"dev","","",74,null],[11,"ino","","",74,null],[11,"mode","","",74,null],[11,"nlink","","",74,null],[11,"uid","","",74,null],[11,"gid","","",74,null],[11,"rdev","","",74,null],[11,"size","","",74,null],[11,"atime","","",74,null],[11,"atime_nsec","","",74,null],[11,"mtime","","",74,null],[11,"mtime_nsec","","",74,null],[11,"ctime","","",74,null],[11,"ctime_nsec","","",74,null],[11,"blksize","","",74,null],[11,"blocks","","",74,null],[11,"is_block_device","","",77,null],[11,"is_char_device","","",77,null],[11,"is_fifo","","",77,null],[11,"is_socket","","",77,null],[11,"ino","","",80,null],[11,"mode","","",81,null],[11,"uid","std::process","",120,null],[11,"gid","","",120,null],[11,"session_leader","","",120,null],[11,"before_exec","","",120,null],[11,"exec","","",120,null],[11,"from_raw","","",121,{"inputs":[{"name":"i32"}],"output":{"name":"exitstatus"}}],[11,"signal","","",121,null],[11,"from_raw_fd","","",122,{"inputs":[{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",123,null],[11,"as_raw_fd","","",124,null],[11,"as_raw_fd","","",125,null],[11,"into_raw_fd","","",123,null],[11,"into_raw_fd","","",124,null],[11,"into_raw_fd","","",125,null],[11,"as_pthread_t","std::thread","",20,null],[11,"into_pthread_t","","",20,null],[11,"clone","std::sys::ext::net","",126,null],[11,"is_unnamed","","Returns true iff the address is unnamed.",126,null],[11,"as_pathname","","Returns the contents of this address if it is a `pathname` address.",126,null],[11,"fmt","","",126,null],[11,"fmt","","",127,null],[11,"connect","","Connects to the socket named by `path`.",127,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",127,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",127,null],[11,"local_addr","","Returns the socket address of the local half of this connection.",127,null],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",127,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",127,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",127,null],[11,"read_timeout","","Returns the read timeout of this socket.",127,null],[11,"write_timeout","","Returns the write timeout of this socket.",127,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",127,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",127,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",127,null],[11,"read","","",127,null],[11,"read_to_end","","",127,null],[11,"write","","",127,null],[11,"flush","","",127,null],[11,"as_raw_fd","","",127,null],[11,"from_raw_fd","","",127,{"inputs":[{"name":"i32"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",127,null],[11,"fmt","","",128,null],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",128,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",128,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",128,null],[11,"local_addr","","Returns the local socket address of this listener.",128,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",128,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",128,null],[11,"incoming","","Returns an iterator over incoming connections.",128,null],[11,"as_raw_fd","","",128,null],[11,"from_raw_fd","","",128,{"inputs":[{"name":"i32"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",128,null],[11,"fmt","","",129,null],[11,"next","","",129,null],[11,"size_hint","","",129,null],[11,"fmt","","",130,null],[11,"bind","","Creates a Unix datagram socket bound to the given path.",130,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",130,{"inputs":[],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",130,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",130,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",130,null],[11,"local_addr","","Returns the address of this socket.",130,null],[11,"peer_addr","","Returns the address of this socket&#39;s peer.",130,null],[11,"recv_from","","Receives data from the socket.",130,null],[11,"recv","","Receives data from the socket.",130,null],[11,"send_to","","Sends data on the socket to the specified address.",130,null],[11,"send","","Sends data on the socket to the socket&#39;s peer.",130,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",130,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",130,null],[11,"read_timeout","","Returns the read timeout of this socket.",130,null],[11,"write_timeout","","Returns the write timeout of this socket.",130,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",130,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",130,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",130,null],[11,"as_raw_fd","","",130,null],[11,"from_raw_fd","","",130,{"inputs":[{"name":"i32"}],"output":{"name":"unixdatagram"}}],[11,"into_raw_fd","","",130,null],[11,"deref","std::panic","",131,null],[11,"deref_mut","","",131,null],[11,"call_once","","",131,null],[11,"new","","Creates a new `AssertRecoverSafe` wrapper around the provided type.",132,{"inputs":[{"name":"t"}],"output":{"name":"assertrecoversafe"}}],[11,"into_inner","","Consumes the `AssertRecoverSafe`, returning the wrapped value.",132,null],[11,"deref","","",132,null],[11,"deref_mut","","",132,null],[11,"call_once","","",132,null],[11,"eq","std::path","",133,null],[11,"ne","","",133,null],[11,"cmp","","",133,null],[11,"partial_cmp","","",133,null],[11,"lt","","",133,null],[11,"le","","",133,null],[11,"gt","","",133,null],[11,"ge","","",133,null],[11,"hash","","",133,null],[11,"fmt","","",133,null],[11,"clone","","",133,null],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",133,null],[11,"fmt","","",134,null],[11,"clone","","",134,null],[11,"kind","","The parsed prefix data.",134,null],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",134,null],[11,"eq","","",134,null],[11,"partial_cmp","","",134,null],[11,"cmp","","",134,null],[11,"hash","","",134,null],[11,"fmt","","",135,null],[11,"hash","","",135,null],[11,"cmp","","",135,null],[11,"partial_cmp","","",135,null],[11,"lt","","",135,null],[11,"le","","",135,null],[11,"gt","","",135,null],[11,"ge","","",135,null],[11,"eq","","",135,null],[11,"ne","","",135,null],[11,"clone","","",135,null],[11,"as_os_str","","Extracts the underlying `OsStr` slice",135,null],[11,"as_ref","","",135,null],[11,"clone","","",136,null],[11,"clone","","",137,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",136,null],[11,"as_ref","","",136,null],[11,"as_ref","","",136,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",137,null],[11,"as_ref","","",137,null],[11,"as_ref","","",137,null],[11,"next","","",137,null],[11,"next_back","","",137,null],[11,"next","","",136,null],[11,"next_back","","",136,null],[11,"eq","","",136,null],[11,"partial_cmp","","",136,null],[11,"cmp","","",136,null],[11,"clone","","",138,null],[11,"new","","Allocates an empty `PathBuf`.",138,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",138,null],[11,"push","","Extends `self` with `path`.",138,null],[11,"pop","","Truncate `self` to `self.parent()`.",138,null],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",138,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",138,null],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",138,null],[11,"from","","",138,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",138,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",138,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",138,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",138,null],[11,"fmt","","",138,null],[11,"new","","Directly wrap a string slice as a `Path` slice.",139,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",139,null],[11,"to_str","","Yields a `&amp;str` slice if the `Path` is valid unicode.",139,null],[11,"to_string_lossy","","Converts a `Path` to a `Cow&lt;str&gt;`.",139,null],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",139,null],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",139,null],[11,"is_relative","","A path is *relative* if it is not absolute.",139,null],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",139,null],[11,"parent","","The path without its final component, if any.",139,null],[11,"file_name","","The final component of the path, if it is a normal file.",139,null],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",139,null],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",139,null],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",139,null],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",139,null],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",139,null],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",139,null],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",139,null],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",139,null],[11,"components","","Produce an iterator over the components of the path.",139,null],[11,"iter","","Produce an iterator over the path&#39;s components viewed as `OsStr` slices.",139,null],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",139,null],[11,"metadata","","Query the file system to get information about a file, directory, etc.",139,null],[11,"symlink_metadata","","Query the metadata about a file without following symlinks.",139,null],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components\nnormalized and symbolic links resolved.",139,null],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",139,null],[11,"read_dir","","Returns an iterator over the entries within a directory.",139,null],[11,"exists","","Returns whether the path points at an existing entity.",139,null],[11,"is_file","","Returns whether the path is pointing at a regular file.",139,null],[11,"is_dir","","Returns whether the path is pointing at a directory.",139,null],[11,"deref","","",138,null],[11,"borrow","","",138,null],[11,"from","collections::borrow","",72,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",72,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",139,null],[11,"eq","","",138,null],[11,"hash","","",138,null],[11,"partial_cmp","","",138,null],[11,"cmp","","",138,null],[11,"as_ref","","",138,null],[11,"into","","",138,null],[11,"eq","","",140,null],[11,"ne","","",140,null],[11,"clone","","",140,null],[11,"fmt","","",140,null],[11,"as_ref","","",139,null],[11,"fmt","","",139,null],[11,"fmt","","",141,null],[11,"fmt","","",141,null],[11,"eq","","",139,null],[11,"hash","","",139,null],[11,"partial_cmp","","",139,null],[11,"cmp","","",139,null],[11,"as_ref","","",139,null],[11,"as_ref","std::ffi::os_str","",71,null],[11,"as_ref","collections::borrow","",72,null],[11,"as_ref","std::ffi::os_str","",70,null],[11,"as_ref","collections::string","",73,null],[11,"as_ref","std::path","",138,null],[11,"eq","","",138,null],[11,"eq","","",139,null],[11,"partial_cmp","","",138,null],[11,"partial_cmp","","",139,null],[11,"eq","","",138,null],[11,"partial_cmp","","",138,null],[11,"eq","collections::borrow","",72,null],[11,"eq","std::path","",139,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"partial_cmp","std::path","",139,null],[11,"eq","collections::borrow","",72,null],[11,"partial_cmp","","",72,null],[11,"eq","","",72,null],[11,"eq","std::path","",138,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"partial_cmp","std::path","",138,null],[11,"eq","","",138,null],[11,"eq","std::ffi::os_str","",71,null],[11,"partial_cmp","std::path","",138,null],[11,"partial_cmp","std::ffi::os_str","",71,null],[11,"eq","std::path","",138,null],[11,"partial_cmp","","",138,null],[11,"eq","","",138,null],[11,"eq","collections::borrow","",72,null],[11,"partial_cmp","std::path","",138,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"eq","std::path","",138,null],[11,"eq","std::ffi::os_str","",70,null],[11,"partial_cmp","std::path","",138,null],[11,"partial_cmp","std::ffi::os_str","",70,null],[11,"eq","std::path","",139,null],[11,"eq","std::ffi::os_str","",71,null],[11,"partial_cmp","std::path","",139,null],[11,"partial_cmp","std::ffi::os_str","",71,null],[11,"eq","std::path","",139,null],[11,"partial_cmp","","",139,null],[11,"eq","","",139,null],[11,"eq","collections::borrow","",72,null],[11,"partial_cmp","std::path","",139,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"eq","std::path","",139,null],[11,"eq","std::ffi::os_str","",70,null],[11,"partial_cmp","std::path","",139,null],[11,"partial_cmp","std::ffi::os_str","",70,null],[11,"eq","","",71,null],[11,"partial_cmp","","",71,null],[11,"eq","collections::borrow","",72,null],[11,"partial_cmp","","",72,null],[11,"eq","std::ffi::os_str","",70,null],[11,"partial_cmp","","",70,null],[11,"eq","collections::borrow","",72,null],[11,"eq","std::ffi::os_str","",71,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"partial_cmp","std::ffi::os_str","",71,null],[11,"eq","collections::borrow","",72,null],[11,"partial_cmp","","",72,null],[11,"eq","","",72,null],[11,"eq","std::ffi::os_str","",70,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"partial_cmp","std::ffi::os_str","",70,null],[11,"fmt","std::path","",140,null],[11,"description","","",140,null],[11,"write","std::process","",123,null],[11,"flush","","",123,null],[11,"read","","",124,null],[11,"read_to_end","","",124,null],[11,"read","","",125,null],[11,"read_to_end","","",125,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",120,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",120,null],[11,"args","","Add multiple arguments to pass to the program.",120,null],[11,"env","","Inserts or updates an environment variable mapping.",120,null],[11,"env_remove","","Removes an environment variable mapping.",120,null],[11,"env_clear","","Clears the entire environment map for the child process.",120,null],[11,"current_dir","","Sets the working directory for the child process.",120,null],[11,"stdin","","Configuration for the child process&#39;s stdin handle (file descriptor 0).",120,null],[11,"stdout","","Configuration for the child process&#39;s stdout handle (file descriptor 1).",120,null],[11,"stderr","","Configuration for the child process&#39;s stderr handle (file descriptor 2).",120,null],[11,"spawn","","Executes the command as a child process, returning a handle to it.",120,null],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",120,null],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",120,null],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",120,null],[11,"clone","","",142,null],[11,"eq","","",142,null],[11,"ne","","",142,null],[11,"fmt","","",142,null],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",122,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",122,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",122,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",121,null],[11,"clone","","",121,null],[11,"eq","","",121,null],[11,"ne","","",121,null],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",121,null],[11,"code","","Returns the exit code of the process, if any.",121,null],[11,"fmt","","",121,null],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",143,null],[11,"id","","Returns the OS-assigned process identifier associated with this child.",143,null],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",143,null],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",143,null],[11,"new","std::sync::mpsc::select","Creates a new selection structure. This set is initially empty.",144,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",144,null],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",144,null],[11,"id","","Retrieves the id of this handle.",145,null],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",145,null],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",145,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",145,null],[11,"drop","","",144,null],[11,"drop","","",145,null],[11,"fmt","","",144,null],[11,"fmt","","",145,null],[11,"clone","std::sync::mpsc","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"fmt","","",147,null],[11,"clone","","",147,null],[11,"eq","","",147,null],[11,"fmt","","",148,null],[11,"clone","","",148,null],[11,"eq","","",148,null],[11,"clone","","",149,null],[11,"eq","","",149,null],[11,"ne","","",149,null],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",150,null],[11,"clone","","",150,null],[11,"drop","","",150,null],[11,"fmt","","",150,null],[11,"send","","Sends a value on this synchronous channel.",151,null],[11,"try_send","","Attempts to send a value on this channel without blocking.",151,null],[11,"clone","","",151,null],[11,"drop","","",151,null],[11,"fmt","","",151,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",152,null],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",152,null],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",152,null],[11,"next","","",153,null],[11,"next","","",154,null],[11,"into_iter","","",152,null],[11,"drop","","",152,null],[11,"fmt","","",152,null],[11,"fmt","","",146,null],[11,"fmt","","",146,null],[11,"description","","",146,null],[11,"cause","","",146,null],[11,"fmt","","",149,null],[11,"fmt","","",149,null],[11,"description","","",149,null],[11,"cause","","",149,null],[11,"fmt","","",147,null],[11,"description","","",147,null],[11,"cause","","",147,null],[11,"fmt","","",148,null],[11,"description","","",148,null],[11,"cause","","",148,null],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",155,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads have rendezvoused here.",155,null],[11,"is_leader","","Returns whether this thread from `wait` is the &quot;leader thread&quot;.",156,null],[11,"clone","std::sync::condvar","",157,null],[11,"eq","","",157,null],[11,"ne","","",157,null],[11,"fmt","","",157,null],[11,"timed_out","","Returns whether the wait was known to have timed out.",157,null],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",158,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",158,null],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",158,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",158,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",158,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",158,null],[11,"default","","",158,{"inputs":[],"output":{"name":"condvar"}}],[11,"drop","","",158,null],[11,"new","","Creates a new condition variable",159,{"inputs":[],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",159,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",159,null],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",159,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",159,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",159,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",159,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",160,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",160,null],[11,"try_lock","","Attempts to acquire this lock.",160,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",160,null],[11,"into_inner","","Consumes this mutex, returning the underlying data.",160,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",160,null],[11,"drop","","",160,null],[11,"default","","",160,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",160,null],[11,"new","","Creates a new mutex in an unlocked state ready for use.",161,{"inputs":[],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",161,null],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",161,null],[11,"destroy","","Deallocates resources associated with this static mutex.",161,null],[11,"deref","","",162,null],[11,"deref_mut","","",162,null],[11,"drop","","",162,null],[11,"new","std::sync::once","Creates a new `Once` value.",163,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",163,null],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",163,null],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",164,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock&lt;T&gt;` which is unlocked.",165,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",165,null],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",165,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",165,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",165,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",165,null],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",165,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",165,null],[11,"drop","","",165,null],[11,"fmt","","",165,null],[11,"default","","",165,{"inputs":[],"output":{"name":"rwlock"}}],[11,"new","","Creates a new rwlock.",166,{"inputs":[],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",166,null],[11,"try_read","","Attempts to acquire this lock with shared read access.",166,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",166,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",166,null],[11,"destroy","","Deallocates all resources associated with this static lock.",166,null],[11,"map","","Transform this guard to hold a sub-borrow of the original data.",167,{"inputs":[{"name":"rwlockreadguard"},{"name":"f"}],"output":{"name":"rwlockreadguard"}}],[11,"map","","Transform this guard to hold a sub-borrow of the original data.",168,{"inputs":[{"name":"rwlockwriteguard"},{"name":"f"}],"output":{"name":"rwlockwriteguard"}}],[11,"deref","","",167,null],[11,"deref","","",168,null],[11,"deref_mut","","",168,null],[11,"drop","","",167,null],[11,"drop","","",168,null],[11,"default","core::sync::atomic","",169,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",170,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",171,null],[11,"clone","","",171,null],[11,"new","","Creates a new `AtomicBool`.",169,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",169,null],[11,"store","","Stores a value into the bool.",169,null],[11,"swap","","Stores a value into the bool, returning the old value.",169,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",169,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",169,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",169,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",169,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",169,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",169,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",169,null],[11,"new","","Creates a new `AtomicPtr`.",170,null],[11,"load","","Loads a value from the pointer.",170,null],[11,"store","","Stores a value into the pointer.",170,null],[11,"swap","","Stores a value into the pointer, returning the old value.",170,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",170,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",170,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",170,null],[11,"default","","",172,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",172,null],[11,"new","","Creates a new atomic integer.",172,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",172,null],[11,"store","","Stores a value into the atomic integer.",172,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",172,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",172,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",172,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",172,null],[11,"fetch_add","","Add to the current value, returning the previous value.",172,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",172,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",172,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",172,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",172,null],[11,"default","","",173,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",173,null],[11,"new","","Creates a new atomic integer.",173,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",173,null],[11,"store","","Stores a value into the atomic integer.",173,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",173,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",173,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",173,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",173,null],[11,"fetch_add","","Add to the current value, returning the previous value.",173,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",173,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",173,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",173,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",173,null],[11,"default","","",174,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",174,null],[11,"new","","Creates a new atomic integer.",174,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",174,null],[11,"store","","Stores a value into the atomic integer.",174,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",174,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",174,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",174,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",174,null],[11,"fetch_add","","Add to the current value, returning the previous value.",174,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",174,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",174,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",174,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",174,null],[11,"default","","",175,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",175,null],[11,"new","","Creates a new atomic integer.",175,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",175,null],[11,"store","","Stores a value into the atomic integer.",175,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",175,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",175,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",175,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",175,null],[11,"fetch_add","","Add to the current value, returning the previous value.",175,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",175,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",175,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",175,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",175,null],[11,"default","","",176,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",176,null],[11,"new","","Creates a new atomic integer.",176,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",176,null],[11,"store","","Stores a value into the atomic integer.",176,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",176,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",176,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",176,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",176,null],[11,"fetch_add","","Add to the current value, returning the previous value.",176,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",176,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",176,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",176,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",176,null],[11,"default","","",177,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",177,null],[11,"new","","Creates a new atomic integer.",177,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",177,null],[11,"store","","Stores a value into the atomic integer.",177,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",177,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",177,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",177,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",177,null],[11,"fetch_add","","Add to the current value, returning the previous value.",177,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",177,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",177,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",177,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",177,null],[11,"default","","",178,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",178,null],[11,"new","","Creates a new atomic integer.",178,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",178,null],[11,"store","","Stores a value into the atomic integer.",178,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",178,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",178,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",178,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",178,null],[11,"fetch_add","","Add to the current value, returning the previous value.",178,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",178,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",178,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",178,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",178,null],[11,"default","","",179,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",179,null],[11,"new","","Creates a new atomic integer.",179,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",179,null],[11,"store","","Stores a value into the atomic integer.",179,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",179,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",179,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",179,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",179,null],[11,"fetch_add","","Add to the current value, returning the previous value.",179,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",179,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",179,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",179,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",179,null],[11,"default","","",180,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",180,null],[11,"new","","Creates a new atomic integer.",180,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",180,null],[11,"store","","Stores a value into the atomic integer.",180,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",180,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",180,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",180,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",180,null],[11,"fetch_add","","Add to the current value, returning the previous value.",180,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",180,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",180,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",180,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",180,null],[11,"default","","",181,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",181,null],[11,"new","","Creates a new atomic integer.",181,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",181,null],[11,"store","","Stores a value into the atomic integer.",181,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",181,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",181,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",181,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",181,null],[11,"fetch_add","","Add to the current value, returning the previous value.",181,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",181,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",181,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",181,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",181,null],[11,"fmt","","",169,null],[11,"fmt","","",170,null],[11,"hash","std::time::duration","",182,null],[11,"fmt","","",182,null],[11,"cmp","","",182,null],[11,"partial_cmp","","",182,null],[11,"lt","","",182,null],[11,"le","","",182,null],[11,"gt","","",182,null],[11,"ge","","",182,null],[11,"eq","","",182,null],[11,"ne","","",182,null],[11,"clone","","",182,null],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",182,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",182,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",182,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",182,null],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",182,null],[11,"add","","",182,null],[11,"add_assign","","",182,null],[11,"sub","","",182,null],[11,"sub_assign","","",182,null],[11,"mul","","",182,null],[11,"mul_assign","","",182,null],[11,"div","","",182,null],[11,"div_assign","","",182,null],[11,"cmp","std::time","",183,null],[11,"partial_cmp","","",183,null],[11,"lt","","",183,null],[11,"le","","",183,null],[11,"gt","","",183,null],[11,"ge","","",183,null],[11,"eq","","",183,null],[11,"ne","","",183,null],[11,"clone","","",183,null],[11,"cmp","","",184,null],[11,"partial_cmp","","",184,null],[11,"lt","","",184,null],[11,"le","","",184,null],[11,"gt","","",184,null],[11,"ge","","",184,null],[11,"eq","","",184,null],[11,"ne","","",184,null],[11,"clone","","",184,null],[11,"fmt","","",185,null],[11,"clone","","",185,null],[11,"now","","Returns an instant corresponding to &quot;now&quot;.",183,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",183,null],[11,"duration_from_earlier","","Deprecated, renamed to `duration_since`",183,null],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",183,null],[11,"add","","",183,null],[11,"add_assign","","",183,null],[11,"sub","","",183,null],[11,"sub_assign","","",183,null],[11,"sub","","",183,null],[11,"fmt","","",183,null],[11,"now","","Returns the system time corresponding to &quot;now&quot;.",184,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",184,null],[11,"duration_from_earlier","","Deprecated, renamed to `duration_since`",184,null],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",184,null],[11,"add","","",184,null],[11,"add_assign","","",184,null],[11,"sub","","",184,null],[11,"sub_assign","","",184,null],[11,"fmt","","",184,null],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",185,null],[11,"description","","",185,null],[11,"fmt","","",185,null],[11,"fmt","std::sys_common::poison","",186,null],[11,"fmt","","",186,null],[11,"description","","",186,null],[11,"new","","Creates a `PoisonError`.",186,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",186,null],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",186,null],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",186,null],[11,"from","","",187,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",187,null],[11,"fmt","","",187,null],[11,"description","","",187,null],[11,"cause","","",187,null],[11,"clone","libc::unix","",188,null],[11,"clone","","",189,null],[11,"clone","","",190,null],[11,"clone","","",191,null],[11,"clone","","",192,null],[11,"clone","","",193,null],[11,"clone","","",194,null],[11,"clone","","",195,null],[11,"clone","","",196,null],[11,"clone","","",197,null],[11,"clone","","",198,null],[11,"clone","","",199,null],[11,"clone","","",200,null],[11,"clone","libc::unix::notbsd","",201,null],[11,"clone","","",202,null],[11,"clone","","",203,null],[11,"clone","","",204,null],[11,"clone","","",205,null],[11,"clone","","",206,null],[11,"clone","","",207,null],[11,"clone","","",208,null],[11,"clone","","",209,null],[11,"clone","","",210,null],[11,"clone","","",211,null],[11,"clone","","",212,null],[11,"clone","","",213,null],[11,"clone","","",214,null],[11,"clone","","",215,null],[11,"clone","libc::unix::notbsd::linux","",216,null],[11,"clone","","",217,null],[11,"clone","","",218,null],[11,"clone","","",219,null],[11,"clone","","",220,null],[11,"clone","","",221,null],[11,"clone","","",222,null],[11,"clone","","",223,null],[11,"clone","","",224,null],[11,"clone","","",225,null],[11,"clone","","",226,null],[11,"clone","","",227,null],[11,"clone","","",228,null],[11,"clone","","",229,null],[11,"clone","","",230,null],[11,"clone","","",231,null],[11,"clone","libc::unix::notbsd::linux::other","",232,null],[11,"clone","","",233,null],[11,"clone","","",234,null],[11,"clone","","",235,null],[11,"clone","","",236,null],[11,"clone","","",237,null],[11,"clone","","",238,null],[11,"clone","","",239,null],[11,"clone","","",240,null],[11,"clone","","",241,null],[11,"clone","","",242,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",243,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",244,null],[11,"clone","","",245,null],[11,"clone","","",246,null],[11,"clone","","",247,null],[11,"clone","","",248,null],[11,"clone","","",249,null],[11,"clone","","",250,null],[11,"clone","","",251,null],[11,"payload","std::panicking","Returns the payload associated with the panic.",252,null],[11,"location","","Returns information about the location from which the panic originated,\nif available.",252,null],[11,"file","","Returns the name of the source file from which the panic originated.",253,null],[11,"line","","Returns the line number from which the panic originated.",253,null],[11,"clone","alloc::boxed","",254,null],[11,"pointer","","",255,null],[11,"make_place","","",255,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",255,null],[11,"finalize","","",1,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",254,null],[11,"drop","","",255,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",1,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",1,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",1,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"ge","","",1,null],[11,"gt","","",1,null],[11,"cmp","","",1,null],[11,"hash","","",1,null],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",1,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next_back","","",1,null],[11,"call_once","","",1,null],[11,"call_once","","",1,null],[11,"clone","","",1,null],[11,"borrow","","",1,null],[11,"borrow_mut","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"borrow","collections::borrow","",72,null],[11,"clone","","",72,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",72,null],[11,"into_owned","","Extracts the owned data.",72,null],[11,"deref","","",72,null],[11,"cmp","","",72,null],[11,"eq","","",72,null],[11,"partial_cmp","","",72,null],[11,"fmt","","",72,null],[11,"fmt","","",72,null],[11,"hash","","",72,null],[11,"as_ref","","",72,null],[11,"cmp","collections::string","",73,null],[11,"partial_cmp","","",73,null],[11,"lt","","",73,null],[11,"le","","",73,null],[11,"gt","","",73,null],[11,"ge","","",73,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"new","","Creates a new empty `String`.",73,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",73,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",73,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",73,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",73,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",73,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",73,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",73,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",73,null],[11,"as_str","","Extracts a string slice containing the entire string.",73,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",73,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",73,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",73,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",73,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",73,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",73,null],[11,"push","","Appends the given `char` to the end of this `String`.",73,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",73,null],[11,"truncate","","Shortens this `String` to the specified length.",73,null],[11,"pop","","Removes the last character from the string buffer and returns it.",73,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",73,null],[11,"insert","","Inserts a character into this `String` at a byte position.",73,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",73,null],[11,"len","","Returns the length of this `String`, in bytes.",73,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",73,null],[11,"clear","","Truncates this `String`, removing all contents.",73,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",73,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",73,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",7,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",7,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"clone","","",73,null],[11,"clone_from","","",73,null],[11,"from_iter","","",73,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",73,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",73,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",73,null],[11,"extend","","",73,null],[11,"extend","","",73,null],[11,"extend","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"eq","collections::borrow","",72,null],[11,"ne","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"eq","collections::string","",73,null],[11,"ne","","",73,null],[11,"default","","",73,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",73,null],[11,"fmt","","",73,null],[11,"hash","","",73,null],[11,"add","","",73,null],[11,"index","","",73,null],[11,"index","","",73,null],[11,"index","","",73,null],[11,"index","","",73,null],[11,"index","","",73,null],[11,"index","","",73,null],[11,"index_mut","","",73,null],[11,"index_mut","","",73,null],[11,"index_mut","","",73,null],[11,"index_mut","","",73,null],[11,"index_mut","","",73,null],[11,"index_mut","","",73,null],[11,"deref","","",73,null],[11,"deref_mut","","",73,null],[11,"from_str","","",73,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"as_ref","","",73,null],[11,"as_ref","","",73,null],[11,"from","","",73,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",72,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",72,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",73,null],[11,"write_str","","",73,null],[11,"write_char","","",73,null],[11,"drop","","",256,null],[11,"next","","",256,null],[11,"size_hint","","",256,null],[11,"next_back","","",256,null],[11,"borrow","collections::vec","",46,null],[11,"borrow_mut","","",46,null],[11,"fmt","core::hash::sip","",257,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",257,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",257,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",257,null],[11,"finish","","",257,null],[11,"clone","","",257,null],[11,"default","","",257,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",258,null],[11,"build_hasher","","",258,null],[11,"clone","","",258,null],[11,"default","","",258,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"hash","core::option","",259,null],[11,"fmt","","",259,null],[11,"cmp","","",259,null],[11,"partial_cmp","","",259,null],[11,"lt","","",259,null],[11,"le","","",259,null],[11,"gt","","",259,null],[11,"ge","","",259,null],[11,"eq","","",259,null],[11,"ne","","",259,null],[11,"clone","","",259,null],[11,"is_some","","Returns `true` if the option is a `Some` value",259,null],[11,"is_none","","Returns `true` if the option is a `None` value",259,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",259,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",259,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",259,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",259,null],[11,"unwrap_or","","Returns the contained value or a default.",259,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",259,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",259,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",259,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",259,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",259,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",259,null],[11,"iter","","Returns an iterator over the possibly contained value.",259,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",259,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",259,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",259,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",259,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",259,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",259,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",259,null],[11,"unwrap_or_default","","Returns the contained value or a default",259,null],[11,"default","","",259,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",259,null],[11,"fmt","","",260,null],[11,"next","","",260,null],[11,"size_hint","","",260,null],[11,"next_back","","",260,null],[11,"clone","","",260,null],[11,"fmt","","",261,null],[11,"next","","",261,null],[11,"size_hint","","",261,null],[11,"next_back","","",261,null],[11,"fmt","","",262,null],[11,"clone","","",262,null],[11,"next","","",262,null],[11,"size_hint","","",262,null],[11,"next_back","","",262,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",259,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",263,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",263,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",263,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",263,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",263,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",263,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",263,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",263,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",263,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",263,null],[11,"drop","","Drops the `Rc&lt;T&gt;`.",263,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",263,null],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",263,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",263,null],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",263,null],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"hash","","",263,null],[11,"fmt","","",263,null],[11,"fmt","","",263,null],[11,"fmt","","",263,null],[11,"from","","",263,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",264,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",264,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",264,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",264,null],[11,"fmt","","",264,null],[11,"default","","",264,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",263,null],[11,"as_ref","","",263,null],[11,"new","core::ptr","Creates a new `Unique`.",265,null],[11,"get","","Dereferences the content.",265,null],[11,"get_mut","","Mutably dereferences the content.",265,null],[11,"deref","","",265,null],[11,"fmt","","",265,null],[11,"new","","Creates a new `Shared`.",266,null],[11,"clone","","",266,null],[11,"deref","","",266,null],[11,"fmt","","",266,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",46,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",46,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",46,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",46,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",46,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",46,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",46,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",46,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",46,null],[11,"as_slice","","Extracts a slice containing the entire vector.",46,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",46,null],[11,"set_len","","Sets the length of a vector.",46,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",46,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",46,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",46,null],[11,"retain","","Retains only the elements specified by the predicate.",46,null],[11,"push","","Appends an element to the back of a collection.",46,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",46,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",46,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",46,null],[11,"clear","","Clears the vector, removing all values.",46,null],[11,"len","","Returns the number of elements in the vector.",46,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",46,null],[11,"split_off","","Splits the collection into two at the given index.",46,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",46,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",46,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",46,null],[11,"clone","","",46,null],[11,"clone_from","","",46,null],[11,"hash","","",46,null],[11,"index","","",46,null],[11,"index_mut","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"deref","","",46,null],[11,"deref_mut","","",46,null],[11,"from_iter","","",46,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",46,null],[11,"extend","","",46,null],[11,"extend","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","collections::borrow","",72,null],[11,"ne","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"eq","collections::vec","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"partial_cmp","","",46,null],[11,"cmp","","",46,null],[11,"drop","","",46,null],[11,"default","","",46,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",46,null],[11,"as_ref","","",46,null],[11,"as_mut","","",46,null],[11,"as_ref","","",46,null],[11,"as_mut","","",46,null],[11,"from","","",46,null],[11,"from","","",46,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",72,null],[11,"from","","",72,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",72,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",267,null],[11,"size_hint","","",267,null],[11,"count","","",267,null],[11,"next_back","","",267,null],[11,"clone","","",267,null],[11,"drop","","",267,null],[11,"next","","",268,null],[11,"size_hint","","",268,null],[11,"next_back","","",268,null],[11,"drop","","",268,null],[11,"clone","core::raw","",269,null],[11,"clone","","",270,null],[11,"eq","core::ops","",271,null],[11,"clone","","",271,null],[11,"fmt","","",271,null],[11,"eq","","",272,null],[11,"ne","","",272,null],[11,"clone","","",272,null],[11,"fmt","","",272,null],[11,"contains","","# Examples",272,null],[11,"eq","","",273,null],[11,"ne","","",273,null],[11,"clone","","",273,null],[11,"fmt","","",273,null],[11,"contains","","# Examples",273,null],[11,"eq","","",274,null],[11,"ne","","",274,null],[11,"clone","","",274,null],[11,"fmt","","",274,null],[11,"contains","","# Examples",274,null],[11,"eq","","",275,null],[11,"ne","","",275,null],[11,"clone","","",275,null],[11,"fmt","","",275,null],[11,"from","","",275,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",275,null],[11,"eq","","",276,null],[11,"ne","","",276,null],[11,"clone","","",276,null],[11,"fmt","","",276,null],[11,"contains","","# Examples",276,null],[11,"fmt","bitflags::__core","",277,null],[11,"fmt","","",277,null],[11,"is","","Returns true if the boxed type is the same as `T`",277,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",277,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",277,null],[11,"is","","Forwards to the method defined on the type `Any`.",277,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",277,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",277,null],[11,"hash","core::any","",278,null],[11,"fmt","","",278,null],[11,"eq","","",278,null],[11,"ne","","",278,null],[11,"clone","","",278,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",278,{"inputs":[],"output":{"name":"typeid"}}],[11,"hash","core::result","",279,null],[11,"fmt","","",279,null],[11,"cmp","","",279,null],[11,"partial_cmp","","",279,null],[11,"lt","","",279,null],[11,"le","","",279,null],[11,"gt","","",279,null],[11,"ge","","",279,null],[11,"eq","","",279,null],[11,"ne","","",279,null],[11,"clone","","",279,null],[11,"is_ok","","Returns true if the result is `Ok`",279,null],[11,"is_err","","Returns true if the result is `Err`",279,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",279,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",279,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",279,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",279,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",279,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",279,null],[11,"iter","","Returns an iterator over the possibly contained value.",279,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",279,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",279,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",279,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",279,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",279,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",279,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",279,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",279,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",279,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",279,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",279,null],[11,"fmt","","",280,null],[11,"next","","",280,null],[11,"size_hint","","",280,null],[11,"next_back","","",280,null],[11,"clone","","",280,null],[11,"fmt","","",281,null],[11,"next","","",281,null],[11,"size_hint","","",281,null],[11,"next_back","","",281,null],[11,"fmt","","",282,null],[11,"next","","",282,null],[11,"size_hint","","",282,null],[11,"next_back","","",282,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",279,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"next","rustc_unicode::char","",283,null],[11,"next","","",284,null],[11,"clone","","",285,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"next","","",285,null],[11,"size_hint","","",285,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",10,null],[11,"fmt","","",10,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",286,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",286,null],[11,"set","","Sets the contained value.",286,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",286,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",286,null],[11,"clone","","",286,null],[11,"default","","",286,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",286,null],[11,"partial_cmp","","",286,null],[11,"lt","","",286,null],[11,"le","","",286,null],[11,"gt","","",286,null],[11,"ge","","",286,null],[11,"cmp","","",286,null],[11,"fmt","","",287,null],[11,"eq","","",287,null],[11,"clone","","",287,null],[11,"new","","Creates a new `RefCell` containing `value`.",288,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",288,null],[11,"borrow_state","","Query the current state of this `RefCell`",288,null],[11,"borrow","","Immutably borrows the wrapped value.",288,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",288,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",288,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",288,null],[11,"clone","","",288,null],[11,"default","","",288,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",288,null],[11,"partial_cmp","","",288,null],[11,"lt","","",288,null],[11,"le","","",288,null],[11,"gt","","",288,null],[11,"ge","","",288,null],[11,"cmp","","",288,null],[11,"deref","","",289,null],[11,"clone","","Copies a `Ref`.",289,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",289,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",289,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",290,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",290,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",290,null],[11,"deref_mut","","",290,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",291,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",291,null],[11,"get","","Gets a mutable pointer to the wrapped value.",291,null],[11,"default","","",291,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::iter::range","",292,null],[11,"clone","","",292,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",273,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",272,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",275,null],[11,"next","core::iter::range","",292,null],[11,"size_hint","","",292,null],[11,"next","","",292,null],[11,"size_hint","","",292,null],[11,"next","","",292,null],[11,"size_hint","","",292,null],[11,"next","core::ops","",272,null],[11,"size_hint","","",272,null],[11,"next_back","","",272,null],[11,"next","","",273,null],[11,"next","","",275,null],[11,"size_hint","","",275,null],[11,"next_back","","",275,null],[11,"fmt","core::iter::sources","",293,null],[11,"clone","","",293,null],[11,"next","","",293,null],[11,"size_hint","","",293,null],[11,"next_back","","",293,null],[11,"fmt","","",294,null],[11,"next","","",294,null],[11,"size_hint","","",294,null],[11,"next_back","","",294,null],[11,"len","","",294,null],[11,"clone","","",294,null],[11,"default","","",294,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",295,null],[11,"clone","","",295,null],[11,"next","","",295,null],[11,"size_hint","","",295,null],[11,"next_back","","",295,null],[11,"len","","",295,null],[11,"fmt","core::iter","",296,null],[11,"clone","","",296,null],[11,"next","","",296,null],[11,"size_hint","","",296,null],[11,"next_back","","",296,null],[11,"fmt","","",297,null],[11,"clone","","",297,null],[11,"next","","",297,null],[11,"size_hint","","",297,null],[11,"next_back","","",297,null],[11,"fmt","","",298,null],[11,"clone","","",298,null],[11,"next","","",298,null],[11,"size_hint","","",298,null],[11,"fmt","","",299,null],[11,"clone","","",299,null],[11,"next","","",299,null],[11,"count","","",299,null],[11,"nth","","",299,null],[11,"find","","",299,null],[11,"last","","",299,null],[11,"size_hint","","",299,null],[11,"next_back","","",299,null],[11,"fmt","","",300,null],[11,"clone","","",300,null],[11,"next","","",300,null],[11,"size_hint","","",300,null],[11,"next_back","","",300,null],[11,"clone","","",301,null],[11,"fmt","","",301,null],[11,"next","","",301,null],[11,"size_hint","","",301,null],[11,"next_back","","",301,null],[11,"clone","","",302,null],[11,"fmt","","",302,null],[11,"next","","",302,null],[11,"size_hint","","",302,null],[11,"next_back","","",302,null],[11,"clone","","",303,null],[11,"fmt","","",303,null],[11,"next","","",303,null],[11,"size_hint","","",303,null],[11,"next_back","","",303,null],[11,"fmt","","",304,null],[11,"clone","","",304,null],[11,"next","","# Overflow Behavior",304,null],[11,"size_hint","","",304,null],[11,"nth","","",304,null],[11,"count","","",304,null],[11,"next_back","","",304,null],[11,"fmt","","",305,null],[11,"clone","","",305,null],[11,"next","","",305,null],[11,"count","","",305,null],[11,"nth","","",305,null],[11,"last","","",305,null],[11,"size_hint","","",305,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",305,null],[11,"is_empty","","Checks if the iterator has finished iterating.",305,null],[11,"clone","","",306,null],[11,"fmt","","",306,null],[11,"next","","",306,null],[11,"size_hint","","",306,null],[11,"clone","","",307,null],[11,"fmt","","",307,null],[11,"next","","",307,null],[11,"size_hint","","",307,null],[11,"fmt","","",308,null],[11,"clone","","",308,null],[11,"next","","",308,null],[11,"nth","","",308,null],[11,"count","","",308,null],[11,"last","","",308,null],[11,"size_hint","","",308,null],[11,"next_back","","",308,null],[11,"fmt","","",309,null],[11,"clone","","",309,null],[11,"next","","",309,null],[11,"nth","","",309,null],[11,"size_hint","","",309,null],[11,"clone","","",310,null],[11,"fmt","","",310,null],[11,"next","","",310,null],[11,"size_hint","","",310,null],[11,"clone","","",311,null],[11,"fmt","","",311,null],[11,"next","","",311,null],[11,"size_hint","","",311,null],[11,"next_back","","",311,null],[11,"fmt","","",312,null],[11,"clone","","",312,null],[11,"next","","",312,null],[11,"nth","","",312,null],[11,"last","","",312,null],[11,"count","","",312,null],[11,"size_hint","","",312,null],[11,"next_back","","",312,null],[11,"clone","","",313,null],[11,"fmt","","",313,null],[11,"next","","",313,null],[11,"size_hint","","",313,null],[11,"next_back","","",313,null],[11,"hash","core::marker","",314,null],[11,"eq","","",314,null],[11,"partial_cmp","","",314,null],[11,"cmp","","",314,null],[11,"clone","","",314,null],[11,"default","","",314,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"clone","collections::str","",315,null],[11,"next","","",315,null],[11,"size_hint","","",315,null],[11,"borrow","collections::string","",73,null],[11,"fmt","core::str::pattern","",316,null],[11,"eq","","",316,null],[11,"ne","","",316,null],[11,"clone","","",316,null],[11,"fmt","","",317,null],[11,"clone","","",317,null],[11,"haystack","","",317,null],[11,"next","","",317,null],[11,"next_match","","",317,null],[11,"next_reject","","",317,null],[11,"next_back","","",317,null],[11,"next_match_back","","",317,null],[11,"next_reject_back","","",317,null],[11,"fmt","","",318,null],[11,"clone","","",318,null],[11,"haystack","","",318,null],[11,"next","","",318,null],[11,"next_match","","",318,null],[11,"next_reject","","",318,null],[11,"next_back","","",318,null],[11,"next_match_back","","",318,null],[11,"next_reject_back","","",318,null],[11,"clone","","",319,null],[11,"fmt","","",319,null],[11,"haystack","","",319,null],[11,"next","","",319,null],[11,"next_match","","",319,null],[11,"next_reject","","",319,null],[11,"next_back","","",319,null],[11,"next_match_back","","",319,null],[11,"next_reject_back","","",319,null],[11,"fmt","","",320,null],[11,"clone","","",320,null],[11,"haystack","","",320,null],[11,"next","","",320,null],[11,"next_match","","",320,null],[11,"next_back","","",320,null],[11,"next_match_back","","",320,null],[11,"hash","core::cmp","",321,null],[11,"fmt","","",321,null],[11,"eq","","",321,null],[11,"clone","","",321,null],[11,"reverse","","Reverse the `Ordering`.",321,null],[11,"cmp","","",321,null],[11,"partial_cmp","","",321,null],[8,"Error","bitflags::__core::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",0,null],[11,"cause","","The lower-level cause of this error, if any.",0,null],[0,"prelude","bitflags::__core","The Rust Prelude.",null,null],[0,"v1","bitflags::__core::prelude","The first version of the prelude of The Rust Standard Library.",null,null],[11,"drop","collections::btree::map","",322,null],[11,"clone","","",322,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",322,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",322,null],[11,"get","","Returns a reference to the value corresponding to the key.",322,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",322,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",322,null],[11,"insert","","Inserts a key-value pair into the map.",322,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",322,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",322,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",322,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",322,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",322,null],[11,"next","","",323,null],[11,"size_hint","","",323,null],[11,"next_back","","",323,null],[11,"len","","",323,null],[11,"clone","","",323,null],[11,"next","","",324,null],[11,"size_hint","","",324,null],[11,"next_back","","",324,null],[11,"len","","",324,null],[11,"into_iter","","",322,null],[11,"drop","","",325,null],[11,"next","","",325,null],[11,"size_hint","","",325,null],[11,"next_back","","",325,null],[11,"len","","",325,null],[11,"next","","",326,null],[11,"size_hint","","",326,null],[11,"next_back","","",326,null],[11,"len","","",326,null],[11,"clone","","",326,null],[11,"next","","",327,null],[11,"size_hint","","",327,null],[11,"next_back","","",327,null],[11,"len","","",327,null],[11,"clone","","",327,null],[11,"next","","",328,null],[11,"next","","",329,null],[11,"size_hint","","",329,null],[11,"next_back","","",329,null],[11,"len","","",329,null],[11,"next_back","","",328,null],[11,"clone","","",328,null],[11,"next","","",330,null],[11,"next_back","","",330,null],[11,"from_iter","","",322,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",322,null],[11,"extend","","",322,null],[11,"hash","","",322,null],[11,"default","","",322,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",322,null],[11,"partial_cmp","","",322,null],[11,"cmp","","",322,null],[11,"fmt","","",322,null],[11,"index","","",322,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",322,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",322,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",322,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",322,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",322,null],[11,"len","","Returns the number of elements in the map.",322,null],[11,"is_empty","","Returns true if the map contains no elements.",322,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",331,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",331,null],[11,"key","","Returns a reference to this entry&#39;s key.",331,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",332,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",332,null],[11,"key","","Gets a reference to the key in the entry.",333,null],[11,"get","","Gets a reference to the value in the entry.",333,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",333,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",333,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",333,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",333,null],[11,"partial_cmp","collections::btree::set","",334,null],[11,"lt","","",334,null],[11,"le","","",334,null],[11,"gt","","",334,null],[11,"ge","","",334,null],[11,"cmp","","",334,null],[11,"eq","","",334,null],[11,"ne","","",334,null],[11,"hash","","",334,null],[11,"clone","","",334,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",334,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",334,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",334,null],[11,"difference","","Visits the values representing the difference, in ascending order.",334,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",334,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",334,null],[11,"union","","Visits the values representing the union, in ascending order.",334,null],[11,"len","","Returns the number of elements in the set.",334,null],[11,"is_empty","","Returns true if the set contains no elements.",334,null],[11,"clear","","Clears the set, removing all values.",334,null],[11,"contains","","Returns `true` if the set contains a value.",334,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",334,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",334,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",334,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",334,null],[11,"insert","","Adds a value to the set.",334,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",334,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",334,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",334,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",334,null],[11,"from_iter","","",334,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",334,null],[11,"extend","","",334,null],[11,"extend","","",334,null],[11,"default","","",334,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",334,null],[11,"clone","","",335,null],[11,"next","","",335,null],[11,"size_hint","","",335,null],[11,"next_back","","",335,null],[11,"len","","",335,null],[11,"next","","",336,null],[11,"size_hint","","",336,null],[11,"next_back","","",336,null],[11,"len","","",336,null],[11,"clone","","",337,null],[11,"next","","",337,null],[11,"next_back","","",337,null],[11,"clone","","",338,null],[11,"next","","",338,null],[11,"size_hint","","",338,null],[11,"clone","","",339,null],[11,"next","","",339,null],[11,"size_hint","","",339,null],[11,"clone","","",340,null],[11,"next","","",340,null],[11,"size_hint","","",340,null],[11,"clone","","",341,null],[11,"next","","",341,null],[11,"size_hint","","",341,null],[11,"hash","collections::enum_set","",342,null],[11,"cmp","","",342,null],[11,"partial_cmp","","",342,null],[11,"lt","","",342,null],[11,"le","","",342,null],[11,"gt","","",342,null],[11,"ge","","",342,null],[11,"eq","","",342,null],[11,"ne","","",342,null],[11,"clone","","",342,null],[11,"fmt","","",342,null],[11,"new","","Returns an empty `EnumSet`.",342,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",342,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",342,null],[11,"clear","","",342,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",342,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",342,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",342,null],[11,"union","","Returns the union of both `EnumSets`.",342,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",342,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",342,null],[11,"remove","","Removes an enum from the EnumSet",342,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",342,null],[11,"iter","","Returns an iterator over an `EnumSet`.",342,null],[11,"sub","","",342,null],[11,"bitor","","",342,null],[11,"bitand","","",342,null],[11,"bitxor","","",342,null],[11,"clone","","",343,null],[11,"next","","",343,null],[11,"size_hint","","",343,null],[11,"from_iter","","",342,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",342,null],[11,"extend","","",342,null],[11,"start","core::ops","",273,null],[11,"end","","",274,null],[11,"start","","",272,null],[11,"end","","",272,null],[11,"eq","collections","",344,null],[11,"ne","","",344,null],[11,"hash","","",344,null],[11,"fmt","","",344,null],[11,"clone","","",344,null],[3,"Vec","bitflags::__core::prelude::v1","A contiguous growable array type, written `Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[11,"hash","core::num","",345,null],[11,"default","","",345,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",345,null],[11,"cmp","","",345,null],[11,"partial_cmp","","",345,null],[11,"lt","","",345,null],[11,"le","","",345,null],[11,"gt","","",345,null],[11,"ge","","",345,null],[11,"eq","","",345,null],[11,"ne","","",345,null],[11,"fmt","","",345,null],[11,"fmt","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"eq","core::num::dec2flt","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","core::num","",346,null],[11,"eq","","",346,null],[11,"clone","","",346,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",347,null],[11,"fmt","","",347,null],[11,"partial_cmp","","",347,null],[11,"lt","","",347,null],[11,"le","","",347,null],[11,"gt","","",347,null],[11,"ge","","",347,null],[11,"cmp","","",347,null],[11,"eq","","",347,null],[11,"ne","","",347,null],[11,"clone","","",347,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",347,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",347,null],[11,"fmt","core::char","",348,null],[11,"clone","","",348,null],[11,"next","","",348,null],[11,"size_hint","","",348,null],[11,"last","","",348,null],[11,"fmt","","",349,null],[11,"clone","","",349,null],[11,"next","","",349,null],[11,"size_hint","","",349,null],[11,"count","","",349,null],[11,"nth","","",349,null],[11,"last","","",349,null],[11,"fmt","","",350,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",350,null],[11,"next","","",350,null],[11,"size_hint","","",350,null],[11,"fmt","","",351,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",351,null],[11,"next","","",351,null],[11,"size_hint","","",351,null],[11,"fmt","core::slice","",352,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",352,null],[11,"next","","",352,null],[11,"size_hint","","",352,null],[11,"count","","",352,null],[11,"nth","","",352,null],[11,"last","","",352,null],[11,"next_back","","",352,null],[11,"clone","","",352,null],[11,"fmt","","",353,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",353,null],[11,"next","","",353,null],[11,"size_hint","","",353,null],[11,"count","","",353,null],[11,"nth","","",353,null],[11,"last","","",353,null],[11,"next_back","","",353,null],[11,"fmt","","",354,null],[11,"clone","","",354,null],[11,"next","","",354,null],[11,"size_hint","","",354,null],[11,"next_back","","",354,null],[11,"fmt","","",355,null],[11,"next","","",355,null],[11,"size_hint","","",355,null],[11,"next_back","","",355,null],[11,"fmt","","",356,null],[11,"fmt","","",357,null],[11,"fmt","","",358,null],[11,"fmt","","",359,null],[11,"next","","",356,null],[11,"size_hint","","",356,null],[11,"next","","",357,null],[11,"size_hint","","",357,null],[11,"next","","",358,null],[11,"size_hint","","",358,null],[11,"next","","",359,null],[11,"size_hint","","",359,null],[11,"fmt","","",360,null],[11,"clone","","",360,null],[11,"next","","",360,null],[11,"size_hint","","",360,null],[11,"count","","",360,null],[11,"nth","","",360,null],[11,"last","","",360,null],[11,"next_back","","",360,null],[11,"fmt","","",361,null],[11,"clone","","",361,null],[11,"next","","",361,null],[11,"size_hint","","",361,null],[11,"count","","",361,null],[11,"nth","","",361,null],[11,"last","","",361,null],[11,"next_back","","",361,null],[11,"fmt","","",362,null],[11,"next","","",362,null],[11,"size_hint","","",362,null],[11,"count","","",362,null],[11,"nth","","",362,null],[11,"last","","",362,null],[11,"next_back","","",362,null],[11,"eq","core::str","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",3,null],[11,"fmt","","",3,null],[11,"fmt","","",363,null],[11,"clone","","",363,null],[11,"next","","",363,null],[11,"size_hint","","",363,null],[11,"next_back","","",363,null],[11,"as_str","","View the underlying data as a subslice of the original data.",363,null],[11,"fmt","","",364,null],[11,"clone","","",364,null],[11,"next","","",364,null],[11,"size_hint","","",364,null],[11,"next_back","","",364,null],[11,"as_str","","View the underlying data as a subslice of the original data.",364,null],[11,"fmt","","",365,null],[11,"clone","","",365,null],[11,"next","","",365,null],[11,"size_hint","","",365,null],[11,"count","","",365,null],[11,"last","","",365,null],[11,"nth","","",365,null],[11,"next_back","","",365,null],[11,"len","","",365,null],[11,"fmt","","",366,null],[11,"next","","",366,null],[11,"clone","","",366,null],[11,"fmt","","",367,null],[11,"next","","",367,null],[11,"clone","","",367,null],[11,"next_back","","",366,null],[11,"next_back","","",367,null],[11,"fmt","","",368,null],[11,"next","","",368,null],[11,"clone","","",368,null],[11,"fmt","","",369,null],[11,"next","","",369,null],[11,"clone","","",369,null],[11,"next_back","","",368,null],[11,"next_back","","",369,null],[11,"fmt","","",370,null],[11,"next","","",370,null],[11,"clone","","",370,null],[11,"fmt","","",371,null],[11,"next","","",371,null],[11,"clone","","",371,null],[11,"fmt","","",372,null],[11,"next","","",372,null],[11,"clone","","",372,null],[11,"fmt","","",373,null],[11,"next","","",373,null],[11,"clone","","",373,null],[11,"next_back","","",372,null],[11,"next_back","","",373,null],[11,"fmt","","",374,null],[11,"next","","",374,null],[11,"clone","","",374,null],[11,"fmt","","",375,null],[11,"next","","",375,null],[11,"clone","","",375,null],[11,"next_back","","",374,null],[11,"next_back","","",375,null],[11,"fmt","","",376,null],[11,"clone","","",376,null],[11,"next","","",376,null],[11,"size_hint","","",376,null],[11,"next_back","","",376,null],[11,"fmt","","",377,null],[11,"clone","","",377,null],[11,"next","","",377,null],[11,"size_hint","","",377,null],[11,"next_back","","",377,null],[11,"fmt","","",378,null],[11,"clone","","",378,null],[11,"fmt","core::fmt","",379,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",380,null],[11,"finish","","Finishes output and returns any error encountered.",380,null],[11,"field","","Adds a new field to the generated tuple struct output.",381,null],[11,"finish","","Finishes output and returns any error encountered.",381,null],[11,"entry","","Adds a new entry to the set output.",382,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",382,null],[11,"finish","","Finishes output and returns any error encountered.",382,null],[11,"entry","","Adds a new entry to the list output.",383,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",383,null],[11,"finish","","Finishes output and returns any error encountered.",383,null],[11,"entry","","Adds a new entry to the map output.",384,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",384,null],[11,"finish","","Finishes output and returns any error encountered.",384,null],[11,"partial_cmp","core::fmt","",385,null],[11,"eq","","",385,null],[11,"cmp","","",385,null],[11,"hash","","",385,null],[11,"default","","",385,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",385,null],[11,"clone","","",385,null],[11,"clone","","",386,null],[11,"fmt","","",386,null],[11,"fmt","","",386,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",387,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",387,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",387,null],[11,"write_fmt","","Writes some formatted information into this instance",387,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",387,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",387,null],[11,"align","","Flag indicating what form of alignment was requested",387,null],[11,"width","","Optionally specified integer width that the output should be",387,null],[11,"precision","","Optionally specified precision for numeric types",387,null],[11,"sign_plus","","Determines if the `+` flag was specified.",387,null],[11,"sign_minus","","Determines if the `-` flag was specified.",387,null],[11,"alternate","","Determines if the `#` flag was specified.",387,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",387,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",387,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",387,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",387,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",387,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",387,null],[11,"write_str","","",387,null],[11,"write_char","","",387,null],[11,"write_fmt","","",387,null],[11,"fmt","","",385,null],[11,"fmt","core::marker","",314,null],[11,"fmt","core::cell","",286,null],[11,"fmt","","",288,null],[11,"fmt","","",289,null],[11,"fmt","","",290,null],[11,"fmt","","",291,null],[8,"Default","bitflags::__core::prelude::v1","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",388,{"inputs":[],"output":{"name":"self"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",389,null],[10,"next","","Advances the iterator and returns the next value.",389,null],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",389,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",389,null],[11,"last","","Consumes the iterator, returning the last element.",389,null],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",389,null],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",389,null],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",389,null],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",389,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",389,null],[11,"filter_map","","Creates an iterator that both filters and maps.",389,null],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",389,null],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",389,null],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",389,null],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",389,null],[11,"skip","","Creates an iterator that skips the first `n` elements.",389,null],[11,"take","","Creates an iterator that yields its first `n` elements.",389,null],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",389,null],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",389,null],[11,"fuse","","Creates an iterator which ends after the first `None`.",389,null],[11,"inspect","","Do something with each element of an iterator, passing the value on.",389,null],[11,"by_ref","","Borrows an iterator, rather than consuming it.",389,null],[11,"collect","","Transforms an iterator into a collection.",389,null],[11,"partition","","Consumes an iterator, creating two collections from it.",389,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",389,null],[11,"all","","Tests if every element of the iterator matches a predicate.",389,null],[11,"any","","Tests if any element of the iterator matches a predicate.",389,null],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",389,null],[11,"position","","Searches for an element in an iterator, returning its index.",389,null],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",389,null],[11,"max","","Returns the maximum element of an iterator.",389,null],[11,"min","","Returns the minimum element of an iterator.",389,null],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",389,null],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",389,null],[11,"rev","","Reverses an iterator&#39;s direction.",389,null],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",389,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",389,null],[11,"cycle","","Repeats an iterator endlessly.",389,null],[11,"sum","","Sums the elements of an iterator.",389,null],[11,"product","","Iterates over the entire iterator, multiplying all the elements",389,null],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",389,null],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",389,null],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",389,null],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",389,null],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",389,null],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",389,null],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",389,null],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",389,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",390,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",391,null],[5,"drop","","Disposes of a value.",null,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",392,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",392,null],[10,"into_iter","","Creates an iterator from a value.",392,null],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",393,null],[11,"ne","","This method tests for `!=`.",393,null],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",394,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",394,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",394,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",394,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",394,null],[4,"Result","","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",279,null],[13,"Err","","Contains the error value",279,null],[8,"AsRef","","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",395,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",396,null],[3,"String","","A UTF-8 encoded, growable string.",null,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",397,null],[10,"call_once","","This is called when the call operator is used.",397,null],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",398,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",399,null],[11,"fmt","alloc::arc","",400,null],[11,"new","","Constructs a new `Arc&lt;T&gt;`.",401,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc&lt;T&gt;` has exactly one strong reference.",401,{"inputs":[{"name":"arc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",401,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",401,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",401,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"clone","","Makes a clone of the `Arc&lt;T&gt;`.",401,null],[11,"deref","","",401,null],[11,"make_mut","","Make a mutable reference into the given `Arc&lt;T&gt;`.\nIf the `Arc&lt;T&gt;` has more than one strong reference, or any weak\nreferences, the inner data is cloned.",401,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc&lt;T&gt;` has\none strong reference and no weak references.",401,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc&lt;T&gt;`.",401,null],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",400,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",400,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",400,null],[11,"default","","",400,{"inputs":[],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak&lt;T&gt;`.",400,null],[11,"eq","","Equality for two `Arc&lt;T&gt;`s.",401,null],[11,"ne","","Inequality for two `Arc&lt;T&gt;`s.",401,null],[11,"partial_cmp","","Partial comparison for two `Arc&lt;T&gt;`s.",401,null],[11,"lt","","Less-than comparison for two `Arc&lt;T&gt;`s.",401,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",401,null],[11,"gt","","Greater-than comparison for two `Arc&lt;T&gt;`s.",401,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",401,null],[11,"cmp","","",401,null],[11,"fmt","","",401,null],[11,"fmt","","",401,null],[11,"fmt","","",401,null],[11,"default","","",401,{"inputs":[],"output":{"name":"arc"}}],[11,"hash","","",401,null],[11,"from","","",401,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"borrow","","",401,null],[11,"as_ref","","",401,null],[11,"new","alloc::raw_vec","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",402,{"inputs":[],"output":{"name":"rawvec"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",402,{"inputs":[{"name":"usize"}],"output":{"name":"rawvec"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",402,null],[11,"from_box","","Converts a `Box&lt;[T]&gt;` into a `RawVec&lt;T&gt;`.",402,{"inputs":[{"name":"box"}],"output":{"name":"rawvec"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",402,null],[11,"cap","","Gets the capacity of the allocation.",402,null],[11,"double","","Doubles the size of the type&#39;s backing allocation. This is common enough\nto want to do that it&#39;s easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",402,null],[11,"double_in_place","","Attempts to double the size of the type&#39;s backing allocation in place. This is common\nenough to want to do that it&#39;s easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",402,null],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",402,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behavior. Will limit this behavior\nif it would needlessly cause itself to panic.",402,null],[11,"reserve_in_place","","Attempts to ensure that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already have\nenough capacity, will reallocate in place enough space plus comfortable slack\nspace to get amortized `O(1)` behaviour. Will limit this behaviour\nif it would needlessly cause itself to panic.",402,null],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",402,null],[11,"into_box","","Converts the entire buffer into `Box&lt;[T]&gt;`.",402,null],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",402,null],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",402,null],[3,"Box","bitflags::__core::prelude::v1","A pointer type for heap allocation.",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",403,null],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",404,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",404,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",405,null],[8,"SliceConcatExt","","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",406,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",406,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",406,null],[10,"connect","","",406,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",407,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",408,null],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",409,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[4,"Option","","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",259,null],[13,"Some","","Some value `T`",259,null],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",410,null],[8,"Clone","","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",411,null],[11,"clone_from","","Performs copy-assignment from `source`.",411,null],[0,"f32","bitflags::__core","The 32-bit floating point type.",null,null],[17,"EPSILON","bitflags::__core::f32","",null,null],[17,"NAN","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value",null,null],[17,"MAX","","Largest finite f32 value",null,null],[17,"RADIX","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f32::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[17,"MIN_EXP","bitflags::__core::f32","",null,null],[17,"DIGITS","","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"MIN","","Smallest finite f32 value",null,null],[17,"INFINITY","","",null,null],[17,"MAX_EXP","","",null,null],[0,"f64","bitflags::__core","The 64-bit floating point type.",null,null],[17,"EPSILON","bitflags::__core::f64","",null,null],[17,"NAN","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value",null,null],[17,"MAX","","Largest finite f64 value",null,null],[17,"RADIX","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f64::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[17,"MIN_EXP","bitflags::__core::f64","",null,null],[17,"DIGITS","","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"MIN","","Smallest finite f64 value",null,null],[17,"INFINITY","","",null,null],[17,"MAX_EXP","","",null,null],[0,"ascii","bitflags::__core","Operations on ASCII strings and characters.",null,null],[8,"AsciiExt","bitflags::__core::ascii","Extension methods for ASCII-subset only operations on string slices.",null,null],[16,"Owned","","Container type for copied ASCII characters.",412,null],[10,"is_ascii","","Checks if the value is within the ASCII range.",412,null],[10,"to_ascii_uppercase","","Makes a copy of the string in ASCII upper case.",412,null],[10,"to_ascii_lowercase","","Makes a copy of the string in ASCII lower case.",412,null],[10,"eq_ignore_ascii_case","","Checks that two strings are an ASCII case-insensitive match.",412,null],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent in-place.",412,null],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent in-place.",412,null],[3,"EscapeDefault","","An iterator over the escaped version of a byte, constructed via\n`std::ascii::escape_default`.",null,null],[5,"escape_default","","Returns an iterator that produces an escaped version of a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"escapedefault"}}],[0,"num","bitflags::__core","Additional functionality for numerics.",null,null],[8,"One","bitflags::__core::num","Types that have a &quot;one&quot; value.",null,null],[10,"one","","The &quot;one&quot; (usually, multiplicative identity) for this type.",413,{"inputs":[],"output":{"name":"self"}}],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","&quot;Not a Number&quot;, often obtained by dividing by zero",346,null],[13,"Infinite","","Positive or negative infinity",346,null],[13,"Zero","","Positive or negative zero",346,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",346,null],[13,"Normal","","A regular floating point number",346,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[8,"Zero","","Types that have a &quot;zero&quot; value.",null,null],[10,"zero","","The &quot;zero&quot; (usually, additive identity) for this type.",414,{"inputs":[],"output":{"name":"self"}}],[3,"Wrapping","","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",345,null],[0,"thread","bitflags::__core","Native threads.",null,null],[3,"Builder","bitflags::__core::thread","Thread configuration. Provides detailed control over the properties\nand behavior of new threads.",null,null],[5,"spawn","","Spawns a new thread, returning a `JoinHandle` for it.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"current","","Gets a handle to the thread that invokes it.",null,{"inputs":[],"output":{"name":"thread"}}],[5,"yield_now","","Cooperatively gives up a timeslice to the OS scheduler.",null,null],[5,"panicking","","Determines whether the current thread is unwinding because of panic.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"sleep_ms","","Puts the current thread to sleep for the specified amount of time.",null,null],[5,"sleep","","Puts the current thread to sleep for the specified amount of time.",null,null],[5,"park","","Blocks unless or until the current thread&#39;s token is made available.",null,null],[5,"park_timeout_ms","","Blocks unless or until the current thread&#39;s token is made available or\nthe specified duration has been reached (may wake spuriously).",null,null],[5,"park_timeout","","Blocks unless or until the current thread&#39;s token is made available or\nthe specified duration has been reached (may wake spuriously).",null,null],[3,"Thread","","A handle to a thread.",null,null],[6,"Result","","",null,null],[3,"JoinHandle","","An owned permission to join on a thread (block on its termination).",null,null],[3,"KeyInner","","",null,null],[3,"Key","","",null,null],[3,"Key","","",null,null],[4,"LocalKeyState","","Indicator of the state of a thread local storage key.",null,null],[13,"Uninitialized","","All keys are in this state whenever a thread starts. Keys will\ntransition to the `Valid` state once the first call to `with` happens\nand the initialization expression succeeds.",12,null],[13,"Valid","","Once a key has been accessed successfully, it will enter the `Valid`\nstate. Keys in the `Valid` state will remain so until the thread exits,\nat which point the destructor will be run and the key will enter the\n`Destroyed` state.",12,null],[13,"Destroyed","","When a thread exits, the destructors for keys will be run (if\nnecessary). While a destructor is running, and possibly after a\ndestructor has run, a key is in the `Destroyed` state.",12,null],[3,"ScopedKey","","Type representing a thread local storage key corresponding to a reference\nto the type parameter `T`.",null,null],[3,"LocalKey","","A thread local storage key which owns its contents.",null,null],[0,"collections","bitflags::__core","Collection types.",null,null],[0,"hash_map","bitflags::__core::collections","A hashmap",null,null],[4,"Entry","bitflags::__core::collections::hash_map","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",29,null],[13,"Vacant","","A vacant Entry.",29,null],[3,"RandomState","","`RandomState` is the default state for `HashMap` types.",null,null],[3,"Keys","","HashMap keys iterator.",null,null],[3,"Iter","","HashMap iterator.",null,null],[3,"HashMap","","A hash map implementation which uses linear probing with Robin\nHood bucket stealing.",null,null],[3,"Values","","HashMap values iterator.",null,null],[3,"ValuesMut","","Mutable HashMap values iterator.",null,null],[3,"Drain","","HashMap drain iterator.",null,null],[3,"IterMut","","HashMap mutable values iterator.",null,null],[3,"VacantEntry","","A view into a single empty location in a HashMap.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a HashMap.",null,null],[3,"IntoIter","","HashMap move iterator.",null,null],[0,"hash_set","bitflags::__core::collections","A hashset",null,null],[3,"Difference","bitflags::__core::collections::hash_set","Difference iterator",null,null],[3,"HashSet","","An implementation of a hash set using the underlying representation of a\nHashMap where the value is ().",null,null],[3,"Iter","","HashSet iterator",null,null],[3,"SymmetricDifference","","Symmetric difference iterator.",null,null],[3,"Drain","","HashSet drain iterator",null,null],[3,"IntoIter","","HashSet move iterator",null,null],[3,"Intersection","","Intersection iterator",null,null],[3,"Union","","Set union iterator.",null,null],[0,"vec_deque","bitflags::__core::collections","VecDeque is a double-ended queue, which is implemented with the help of a\ngrowing ring buffer.",null,null],[3,"VecDeque","bitflags::__core::collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[3,"Iter","","`VecDeque` iterator.",null,null],[3,"IterMut","","`VecDeque` mutable iterator.",null,null],[3,"IntoIter","","A by-value VecDeque iterator",null,null],[3,"Drain","","A draining VecDeque iterator",null,null],[3,"LinkedList","bitflags::__core::collections","A doubly-linked list.",null,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[0,"btree_map","","",null,null],[3,"VacantEntry","bitflags::__core::collections::btree_map","A vacant Entry.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",331,null],[13,"Occupied","","An occupied Entry",331,null],[3,"IterMut","","A mutable iterator over a BTreeMap&#39;s entries.",null,null],[3,"Range","","An iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[3,"IntoIter","","An owning iterator over a BTreeMap&#39;s entries.",null,null],[3,"ValuesMut","","A mutable iterator over a BTreeMap&#39;s values.",null,null],[3,"Keys","","An iterator over a BTreeMap&#39;s keys.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Values","","An iterator over a BTreeMap&#39;s values.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"Iter","","An iterator over a BTreeMap&#39;s entries.",null,null],[0,"binary_heap","bitflags::__core::collections","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","bitflags::__core::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"Iter","","`BinaryHeap` iterator.",null,null],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`.",null,null],[3,"Drain","","An iterator that drains a `BinaryHeap`.",null,null],[0,"linked_list","bitflags::__core::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","bitflags::__core::collections::linked_list","A doubly-linked list.",null,null],[3,"Iter","","An iterator over references to the items of a `LinkedList`.",null,null],[3,"IterMut","","An iterator over mutable references to the items of a `LinkedList`.",null,null],[3,"IntoIter","","An iterator over the items of a `LinkedList`.",null,null],[3,"FrontPlace","","A place for insertion at the front of a `LinkedList`.",null,null],[3,"BackPlace","","A place for insertion at the back of a `LinkedList`.",null,null],[3,"HashSet","bitflags::__core::collections","An implementation of a hash set using the underlying representation of a\nHashMap where the value is ().",null,null],[3,"VecDeque","","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",344,null],[13,"Excluded","","An exclusive bound.",344,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",344,null],[3,"HashMap","","A hash map implementation which uses linear probing with Robin\nHood bucket stealing.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[0,"btree_set","","",null,null],[3,"Difference","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set difference (in-order).",null,null],[3,"Range","","An iterator over a sub-range of BTreeSet&#39;s items.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"IntoIter","","An owning iterator over a BTreeSet&#39;s items.",null,null],[3,"Union","","A lazy iterator producing elements in the set union (in-order).",null,null],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order).",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[3,"Iter","","An iterator over a BTreeSet&#39;s items.",null,null],[3,"BTreeMap","bitflags::__core::collections","A map based on a B-Tree.",null,null],[0,"env","bitflags::__core","Inspection and manipulation of the process&#39;s environment.",null,null],[5,"current_dir","bitflags::__core::env","Returns the current working directory as a `PathBuf`.",null,{"inputs":[],"output":{"name":"result"}}],[5,"set_current_dir","","Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[3,"Vars","","An iterator over a snapshot of the environment variables of this process.",null,null],[3,"VarsOs","","An iterator over a snapshot of the environment variables of this process.",null,null],[5,"vars","","Returns an iterator of (variable, value) pairs of strings, for all the\nenvironment variables of the current process.",null,{"inputs":[],"output":{"name":"vars"}}],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS strings, for all the\nenvironment variables of the current process.",null,{"inputs":[],"output":{"name":"varsos"}}],[5,"var","","Fetches the environment variable `key` from the current process.",null,{"inputs":[{"name":"k"}],"output":{"name":"result"}}],[5,"var_os","","Fetches the environment variable `key` from the current process, returning\n`None` if the variable isn&#39;t set.",null,{"inputs":[{"name":"k"}],"output":{"name":"option"}}],[4,"VarError","","Possible errors from the `env::var` method.",null,null],[13,"NotPresent","","The specified environment variable was not present in the current\nprocess&#39;s environment.",59,null],[13,"NotUnicode","","The specified environment variable was found, but it did not contain\nvalid unicode data. The found data is returned as a payload of this\nvariant.",59,null],[5,"set_var","","Sets the environment variable `k` to the value `v` for the currently running\nprocess.",null,null],[5,"remove_var","","Removes an environment variable from the environment of the currently running process.",null,null],[3,"SplitPaths","","An iterator over `PathBuf` instances for parsing an environment variable\naccording to platform-specific conventions.",null,null],[5,"split_paths","","Parses input according to platform conventions for the `PATH`\nenvironment variable.",null,{"inputs":[{"name":"t"}],"output":{"name":"splitpaths"}}],[3,"JoinPathsError","","Error type returned from `std::env::join_paths` when paths fail to be\njoined.",null,null],[5,"join_paths","","Joins a collection of `Path`s appropriately for the `PATH`\nenvironment variable.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"home_dir","","Returns the path of the current user&#39;s home directory if known.",null,{"inputs":[],"output":{"name":"option"}}],[5,"temp_dir","","Returns the path of a temporary directory.",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"current_exe","","Returns the full filesystem path of the current running executable.",null,{"inputs":[],"output":{"name":"result"}}],[3,"Args","","An iterator over the arguments of a process, yielding a `String` value\nfor each argument.",null,null],[3,"ArgsOs","","An iterator over the arguments of a process, yielding an `OsString` value\nfor each argument.",null,null],[5,"args","","Returns the arguments which this program was started with (normally passed\nvia the command line).",null,{"inputs":[],"output":{"name":"args"}}],[5,"args_os","","Returns the arguments which this program was started with (normally passed\nvia the command line).",null,{"inputs":[],"output":{"name":"argsos"}}],[0,"consts","","Constants associated with the current target",null,null],[17,"ARCH","bitflags::__core::env::consts","A string describing the architecture of the CPU that is currently\nin use.",null,null],[17,"FAMILY","","The family of the operating system. Example value is `unix`.",null,null],[17,"OS","","A string describing the specific operating system in use.\nExample value is `linux`.",null,null],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this\nplatform. Example value is `lib`.",null,null],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this\nplatform. Example value is `.so`.",null,null],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this\nplatform that goes after the dot. Example value is `so`.",null,null],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this\nplatform. Example value is `.exe`.",null,null],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries\non this platform. Example value is `exe`.",null,null],[0,"ffi","bitflags::__core","Utilities related to FFI bindings.",null,null],[3,"IntoStringError","bitflags::__core::ffi","An error returned from `CString::into_string` to indicate that a UTF-8 error\nwas encountered during the conversion.",null,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[3,"CString","","A type representing an owned C-compatible string",null,null],[3,"OsString","","A type that can represent owned, mutable platform-native strings, but is\ncheaply inter-convertible with Rust strings.",null,null],[3,"NulError","","An error returned from `CString::new` to indicate that a nul byte was found\nin the vector provided.",null,null],[3,"OsStr","","Slices into OS strings (see `OsString`).",null,null],[3,"FromBytesWithNulError","","An error returned from `CStr::from_bytes_with_nul` to indicate that a nul\nbyte was found too early in the slice provided or one wasn&#39;t found at all.",null,null],[0,"fs","bitflags::__core","Filesystem manipulation operations.",null,null],[3,"File","bitflags::__core::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the `ReadDir` iterator.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","An structure representing a type of file with accessors for each file type.",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[5,"remove_file","","Removes a file from the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"metadata","","Given a path, query the file system to get information about a file,\ndirectory, etc.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"symlink_metadata","","Query the metadata about a file without following symlinks.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"rename","","Rename a file or directory to a new name, replacing the original file if\n`to` already exists.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"copy","","Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"hard_link","","Creates a new hard link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"canonicalize","","Returns the canonical form of a path with all intermediate components\nnormalized and symbolic links resolved.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir","","Creates a new, empty directory at the provided path",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they\nare missing.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir","","Removes an existing, empty directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir_all","","Removes a directory at this path, after removing all its contents. Use\ncarefully!",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"read_dir","","Returns an iterator over the entries within a directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,{"inputs":[{"name":"p"},{"name":"permissions"}],"output":{"name":"result"}}],[0,"io","bitflags::__core","Traits, helpers, and type definitions for core I/O functionality.",null,null],[0,"prelude","bitflags::__core::io","The I/O Prelude",null,null],[8,"Read","bitflags::__core::io::prelude","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",415,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",415,null],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",415,null],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",415,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",415,null],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",415,null],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",415,null],[11,"chain","","Creates an adaptor which will chain this stream with another.",415,null],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",415,null],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",416,null],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",417,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",417,null],[11,"write_all","","Attempts to write an entire buffer into this write.",417,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",417,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",417,null],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",418,null],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",418,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",418,null],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",418,null],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",418,null],[11,"lines","","Returns an iterator over the lines of this reader.",418,null],[8,"Read","bitflags::__core::io","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",415,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",415,null],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",415,null],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",415,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",415,null],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",415,null],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",415,null],[11,"chain","","Creates an adaptor which will chain this stream with another.",415,null],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",415,null],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",417,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",417,null],[11,"write_all","","Attempts to write an entire buffer into this write.",417,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",417,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",417,null],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",416,null],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",97,null],[13,"End","","Set the offset to the size of this object plus the specified number of\nbytes.",97,null],[13,"Current","","Set the offset to the current position plus the specified number of\nbytes.",97,null],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",418,null],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",418,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",418,null],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",418,null],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",418,null],[11,"lines","","Returns an iterator over the lines of this reader.",418,null],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader.",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Chars","","An iterator over the `char`s of a reader.",null,null],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars`\nadapter.",null,null],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully\nbut it did not contain valid utf8 data.",101,null],[13,"Other","","Variant representing that an I/O error occurred.",101,null],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a\nparticular byte.",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever a newline\n(`0x0a`, `&#39;\\n&#39;`) is detected.",null,null],[5,"empty","","Constructs a new handle to an empty reader.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Empty","","A reader which is always at EOF.",null,null],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[6,"Result","","",null,null],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"repeat"}}],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",87,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",87,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",87,null],[13,"ConnectionReset","","The connection was reset by the remote server.",87,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",87,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",87,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in\nuse elsewhere.",87,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not\nlocal.",87,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",87,null],[13,"AlreadyExists","","An entity already exists, often a file.",87,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was\nrequested to not occur.",87,null],[13,"InvalidInput","","A parameter was incorrect.",87,null],[13,"InvalidData","","Data not valid for the operation were encountered.",87,null],[13,"TimedOut","","The I/O operation&#39;s timeout expired, causing it to be canceled.",87,null],[13,"WriteZero","","An error returned when an operation could not be completed because a\ncall to `write` returned `Ok(0)`.",87,null],[13,"Interrupted","","This operation was interrupted.",87,null],[13,"Other","","Any I/O error not part of this list.",87,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an\n&quot;end of file&quot; was reached prematurely.",87,null],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[5,"copy","","Copies the entire contents of a reader into a writer.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"result"}}],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error that\nhappened while writing out the buffer, and the buffered writer object\nwhich may be used to recover from the condition.",null,null],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"Stdout","","A handle to the global standard output stream of the current process.",null,null],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"Error","","The error type for I/O operations of the `Read`, `Write`, `Seek`, and\nassociated traits.",null,null],[3,"Repeat","","A reader which yields one byte over and over and over and over and over and...",null,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[3,"Sink","","A writer which will move data into the void.",null,null],[3,"BufReader","","The `BufReader` struct adds buffering to any reader.",null,null],[5,"sink","","Creates an instance of a writer which will successfully consume all data.",null,{"inputs":[],"output":{"name":"sink"}}],[3,"Cursor","","A `Cursor` wraps another type and provides it with a\n[`Seek`](trait.Seek.html) implementation.",null,null],[0,"net","bitflags::__core","Networking primitives for TCP/UDP communication.",null,null],[4,"Shutdown","bitflags::__core::net","Possible values which can be passed to the `shutdown` method of `TcpStream`.",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut\ndown. All currently blocked and future reads will return `Ok(0)`.",117,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut\ndown. All currently blocked and future writes will return an error.",117,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",117,null],[3,"LookupHost","","An iterator over `SocketAddr` values returned from a host lookup operation.",null,null],[5,"lookup_host","","Resolve the host specified by `host` as a number of `SocketAddr` instances.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[4,"IpAddr","","An IP address, either an IPv4 or IPv6 address.",null,null],[13,"V4","","Representation of an IPv4 address.",105,null],[13,"V6","","Representation of an IPv6 address.",105,null],[4,"SocketAddr","","Representation of a socket address for networking applications.",null,null],[13,"V4","","An IPv4 socket address which is a (ip, port) combination.",109,null],[13,"V6","","An IPv6 socket address",109,null],[3,"TcpStream","","A structure which represents a TCP stream between a local socket and a\nremote socket.",null,null],[3,"SocketAddrV4","","An IPv4 socket address which is a (ip, port) combination.",null,null],[3,"Incoming","","An infinite iterator over the connections from a `TcpListener`.",null,null],[3,"TcpListener","","A structure representing a socket server.",null,null],[3,"Ipv6Addr","","Representation of an IPv6 address.",null,null],[3,"UdpSocket","","A User Datagram Protocol socket.",null,null],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to one or more\n`SocketAddr` values.",null,null],[16,"Iter","","Returned iterator over socket addresses which this type may correspond\nto.",419,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved `SocketAddr`s.",419,null],[3,"Ipv4Addr","","Representation of an IPv4 address.",null,null],[3,"AddrParseError","","An error returned when parsing an IP address or a socket address.",null,null],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",106,null],[13,"LinkLocal","","",106,null],[13,"RealmLocal","","",106,null],[13,"AdminLocal","","",106,null],[13,"SiteLocal","","",106,null],[13,"OrganizationLocal","","",106,null],[13,"Global","","",106,null],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[0,"os","bitflags::__core","OS-specific functionality.",null,null],[0,"linux","bitflags::__core::os","Linux-specific definitions",null,null],[0,"raw","bitflags::__core::os::linux","Linux-specific raw type definitions",null,null],[6,"dev_t","bitflags::__core::os::linux::raw","",null,null],[6,"mode_t","","",null,null],[6,"pthread_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",119,null],[12,"st_ino","","",119,null],[12,"st_nlink","","",119,null],[12,"st_mode","","",119,null],[12,"st_uid","","",119,null],[12,"st_gid","","",119,null],[12,"__pad0","","",119,null],[12,"st_rdev","","",119,null],[12,"st_size","","",119,null],[12,"st_blksize","","",119,null],[12,"st_blocks","","",119,null],[12,"st_atime","","",119,null],[12,"st_atime_nsec","","",119,null],[12,"st_mtime","","",119,null],[12,"st_mtime_nsec","","",119,null],[12,"st_ctime","","",119,null],[12,"st_ctime_nsec","","",119,null],[12,"__unused","","",119,null],[6,"off_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[6,"nlink_t","","",null,null],[6,"ino_t","","",null,null],[0,"fs","bitflags::__core::os::linux","",null,null],[8,"MetadataExt","bitflags::__core::os::linux::fs","OS-specific extension methods for `fs::Metadata`",null,null],[10,"as_raw_stat","","Gain a reference to the underlying `stat` structure which contains\nthe raw information returned by the OS.",420,null],[10,"st_dev","","",420,null],[10,"st_ino","","",420,null],[10,"st_mode","","",420,null],[10,"st_nlink","","",420,null],[10,"st_uid","","",420,null],[10,"st_gid","","",420,null],[10,"st_rdev","","",420,null],[10,"st_size","","",420,null],[10,"st_atime","","",420,null],[10,"st_atime_nsec","","",420,null],[10,"st_mtime","","",420,null],[10,"st_mtime_nsec","","",420,null],[10,"st_ctime","","",420,null],[10,"st_ctime_nsec","","",420,null],[10,"st_blksize","","",420,null],[10,"st_blocks","","",420,null],[0,"raw","bitflags::__core::os","Raw OS-specific types for the current platform/architecture",null,null],[6,"c_char","bitflags::__core::os::raw","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[0,"ext","bitflags::__core::os","Experimental extensions to `std` for Unix platforms.",null,null],[0,"io","bitflags::__core::os::ext","Unix-specific extensions to general I/O primitives",null,null],[6,"RawFd","bitflags::__core::os::ext::io","",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying\nobject.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",421,null],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file\ndescriptor.",null,null],[10,"from_raw_fd","","Constructs a new instances of `Self` from the given raw file\ndescriptor.",422,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of\nits raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",423,null],[0,"ffi","bitflags::__core::os::ext","Unix-specific extension to the primitives in the `std::ffi` module",null,null],[8,"OsStringExt","bitflags::__core::os::ext::ffi","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an `OsString` from a byte vector.",424,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this `OsString`.",424,null],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","",425,null],[10,"as_bytes","","Gets the underlying byte view of the `OsStr` slice.",425,null],[0,"fs","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::fs` module.",null,null],[8,"PermissionsExt","bitflags::__core::os::ext::fs","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `mode_t` bits that are the standard Unix\npermissions for this file.",426,null],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",426,null],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix\npermission bits.",426,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",427,null],[10,"custom_flags","","Pass custom flags to the `flags` agument of `open`.",427,null],[8,"MetadataExt","","",null,null],[10,"dev","","",428,null],[10,"ino","","",428,null],[10,"mode","","",428,null],[10,"nlink","","",428,null],[10,"uid","","",428,null],[10,"gid","","",428,null],[10,"rdev","","",428,null],[10,"size","","",428,null],[10,"atime","","",428,null],[10,"atime_nsec","","",428,null],[10,"mtime","","",428,null],[10,"mtime_nsec","","",428,null],[10,"ctime","","",428,null],[10,"ctime_nsec","","",428,null],[10,"blksize","","",428,null],[10,"blocks","","",428,null],[8,"FileTypeExt","","Add special unix types (block/char device, fifo and socket)",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",429,null],[10,"is_char_device","","Returns whether this file type is a char device.",429,null],[10,"is_fifo","","Returns whether this file type is a fifo.",429,null],[10,"is_socket","","Returns whether this file type is a socket.",429,null],[8,"DirEntryExt","","Unix-specific extension methods for `fs::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent`\nstructure.",430,null],[5,"symlink","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[8,"DirBuilderExt","","An extension trait for `fs::DirBuilder` for unix-specific options.",null,null],[10,"mode","","Sets the mode to create new directories with. This option defaults to\n0o777.",431,null],[0,"process","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::process` module.",null,null],[8,"CommandExt","bitflags::__core::os::ext::process","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process&#39;s user id. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.",432,null],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",432,null],[10,"session_leader","","Create a new session (cf. `setsid(2)`) for the child process. This means\nthat the child is the leader of a new process group. The parent process\nremains the child reaper of the new process.",432,null],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is\ninvoked.",432,null],[10,"exec","","Performs all the required setup by this `Command`, followed by calling\nthe `execvp` syscall.",432,null],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"from_raw","","Creates a new `ExitStatus` from the raw underlying `i32` return value of\na process.",433,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[10,"signal","","If the process was terminated by a signal, returns that signal.",433,null],[0,"raw","bitflags::__core::os::ext","Unix-specific primitives available on all unix platforms",null,null],[6,"uid_t","bitflags::__core::os::ext::raw","",null,null],[6,"gid_t","","",null,null],[6,"pid_t","","",null,null],[6,"off_t","","",null,null],[6,"blksize_t","","",null,null],[6,"mode_t","","",null,null],[6,"pthread_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[6,"dev_t","","",null,null],[6,"nlink_t","","",null,null],[6,"ino_t","","",null,null],[0,"thread","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::thread` module.",null,null],[6,"RawPthread","bitflags::__core::os::ext::thread","",null,null],[8,"JoinHandleExt","","Unix-specific extensions to `std::thread::JoinHandle`",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",434,null],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",434,null],[0,"net","bitflags::__core::os::ext","Unix-specific networking functionality",null,null],[3,"SocketAddr","bitflags::__core::os::ext::net","An address associated with a Unix socket.",null,null],[3,"UnixStream","","A Unix stream socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"Incoming","","An iterator over incoming connections to a `UnixListener`.",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[0,"prelude","bitflags::__core::os::ext","A prelude for conveniently writing platform-specific code.",null,null],[8,"CommandExt","bitflags::__core::os::ext::prelude","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process&#39;s user id. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.",432,null],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",432,null],[10,"session_leader","","Create a new session (cf. `setsid(2)`) for the child process. This means\nthat the child is the leader of a new process group. The parent process\nremains the child reaper of the new process.",432,null],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is\ninvoked.",432,null],[10,"exec","","Performs all the required setup by this `Command`, followed by calling\nthe `execvp` syscall.",432,null],[8,"MetadataExt","","",null,null],[10,"dev","","",428,null],[10,"ino","","",428,null],[10,"mode","","",428,null],[10,"nlink","","",428,null],[10,"uid","","",428,null],[10,"gid","","",428,null],[10,"rdev","","",428,null],[10,"size","","",428,null],[10,"atime","","",428,null],[10,"atime_nsec","","",428,null],[10,"mtime","","",428,null],[10,"mtime_nsec","","",428,null],[10,"ctime","","",428,null],[10,"ctime_nsec","","",428,null],[10,"blksize","","",428,null],[10,"blocks","","",428,null],[8,"PermissionsExt","","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `mode_t` bits that are the standard Unix\npermissions for this file.",426,null],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",426,null],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix\npermission bits.",426,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"from_raw","","Creates a new `ExitStatus` from the raw underlying `i32` return value of\na process.",433,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[10,"signal","","If the process was terminated by a signal, returns that signal.",433,null],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of\nits raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",423,null],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file\ndescriptor.",null,null],[10,"from_raw_fd","","Constructs a new instances of `Self` from the given raw file\ndescriptor.",422,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",427,null],[10,"custom_flags","","Pass custom flags to the `flags` agument of `open`.",427,null],[8,"FileTypeExt","","Add special unix types (block/char device, fifo and socket)",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",429,null],[10,"is_char_device","","Returns whether this file type is a char device.",429,null],[10,"is_fifo","","Returns whether this file type is a fifo.",429,null],[10,"is_socket","","Returns whether this file type is a socket.",429,null],[8,"DirEntryExt","","Unix-specific extension methods for `fs::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent`\nstructure.",430,null],[6,"RawFd","","",null,null],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","",425,null],[10,"as_bytes","","Gets the underlying byte view of the `OsStr` slice.",425,null],[8,"JoinHandleExt","","Unix-specific extensions to `std::thread::JoinHandle`",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",434,null],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",434,null],[8,"OsStringExt","","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an `OsString` from a byte vector.",424,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this `OsString`.",424,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying\nobject.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",421,null],[0,"panic","bitflags::__core","Panic support in the standard library",null,null],[5,"set_handler","bitflags::__core::panic","",null,null],[5,"take_handler","","",null,{"inputs":[],"output":{"name":"box"}}],[8,"UnwindSafe","","A marker trait which represents &quot;panic safe&quot; types in Rust.",null,null],[8,"RecoverSafe","","Deprecated, renamed to UnwindSafe",null,null],[8,"RefUnwindSafe","","A marker trait representing types where a shared reference is considered\nrecover safe.",null,null],[3,"AssertUnwindSafe","","A simple wrapper around a type to assert that it is panic safe.",null,null],[12,"0","","",131,null],[3,"AssertRecoverSafe","","Deprecated, renamed to `AssertUnwindSafe`",null,null],[12,"0","","",132,null],[5,"catch_unwind","","Invokes a closure, capturing the cause of an unwinding panic if one occurs.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"recover","","Deprecated, renamed to `catch_unwind`",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"resume_unwind","","Triggers a panic without invoking the panic hook.",null,null],[5,"propagate","","Deprecated, use resume_unwind instead",null,null],[5,"take_hook","","Unregisters the current panic hook, returning it.",null,{"inputs":[],"output":{"name":"box"}}],[3,"PanicInfo","","A struct providing information about a panic.",null,null],[3,"Location","","A struct containing information about the location of a panic.",null,null],[5,"set_hook","","Registers a custom panic hook, replacing any that was previously registered.",null,null],[0,"path","bitflags::__core","Cross-platform path manipulation.",null,null],[4,"Prefix","bitflags::__core::path","Path prefixes (Windows only).",null,null],[13,"Verbatim","","Prefix `\\\\?\\`, together with the given component immediately following it.",133,null],[13,"VerbatimUNC","","Prefix `\\\\?\\UNC\\`, with the &quot;server&quot; and &quot;share&quot; components following it.",133,null],[13,"VerbatimDisk","","Prefix like `\\\\?\\C:\\`, for the given drive letter",133,null],[13,"DeviceNS","","Prefix `\\\\.\\`, together with the given component immediately following it.",133,null],[13,"UNC","","Prefix `\\\\server\\share`, with the given &quot;server&quot; and &quot;share&quot; components.",133,null],[13,"Disk","","Prefix `C:` for the given disk drive.",133,null],[5,"is_separator","","Determines whether the character is one of the permitted path\nseparators for the current platform.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"MAIN_SEPARATOR","","The primary separator for the current platform",null,null],[3,"PrefixComponent","","A Windows path prefix, e.g. `C:` or `\\\\server\\share`.",null,null],[4,"Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g. `C:` or `\\\\server\\share`.",135,null],[13,"RootDir","","The root directory component, appears after any prefix and before anything else",135,null],[13,"CurDir","","A reference to the current directory, i.e. `.`",135,null],[13,"ParentDir","","A reference to the parent directory, i.e. `..`",135,null],[13,"Normal","","A normal component, i.e. `a` and `b` in `a/b`",135,null],[3,"Components","","The core iterator giving the components of a path.",null,null],[3,"Iter","","An iterator over the components of a path, as `OsStr` slices.",null,null],[3,"PathBuf","","An owned, mutable path (akin to `String`).",null,null],[3,"Path","","A slice of a path (akin to `str`).",null,null],[3,"StripPrefixError","","An error returned from the `Path::strip_prefix` method indicating that the\nprefix was not found in `self`.",null,null],[3,"Display","","Helper struct for safely printing paths with `format!()` and `{}`",null,null],[0,"process","bitflags::__core","Working with processes.",null,null],[3,"Child","bitflags::__core::process","Representation of a running or exited child process.",null,null],[12,"stdin","","The handle for writing to the child&#39;s stdin, if it has been captured",143,null],[12,"stdout","","The handle for reading from the child&#39;s stdout, if it has been captured",143,null],[12,"stderr","","The handle for reading from the child&#39;s stderr, if it has been captured",143,null],[3,"ChildStdin","","A handle to a child process&#39;s stdin",null,null],[3,"ChildStdout","","A handle to a child process&#39;s stdout",null,null],[3,"ChildStderr","","A handle to a child process&#39;s stderr",null,null],[3,"Command","","The `Command` type acts as a process builder, providing fine-grained control\nover how a new process should be spawned. A default configuration can be\ngenerated using `Command::new(program)`, where `program` gives a path to the\nprogram to be executed. Additional builder methods allow the configuration\nto be changed (for example, by adding arguments) prior to spawning:",null,null],[3,"Output","","The output of a finished process.",null,null],[12,"status","","The status (exit code) of the process.",142,null],[12,"stdout","","The data that the process wrote to stdout.",142,null],[12,"stderr","","The data that the process wrote to stderr.",142,null],[3,"Stdio","","Describes what to do with a standard I/O stream for a child process.",null,null],[3,"ExitStatus","","Describes the result of a process after it has terminated.",null,null],[5,"exit","","Terminates the current process with the specified exit code.",null,null],[0,"sync","bitflags::__core","Useful synchronization primitives.",null,null],[0,"mpsc","bitflags::__core::sync","Multi-producer, single-consumer FIFO queue communication primitives.",null,null],[3,"Receiver","bitflags::__core::sync::mpsc","The receiving-half of Rust&#39;s channel type. This half can only be owned by\none thread",null,null],[3,"Iter","","An iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up.",null,null],[3,"IntoIter","","An owning iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up.",null,null],[3,"Sender","","The sending-half of Rust&#39;s asynchronous channel type. This half can only be\nowned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SyncSender","","The sending-half of Rust&#39;s synchronous channel type. This half can only be\nowned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SendError","","An error returned from the `send` function on channels.",null,null],[12,"0","","",146,null],[3,"RecvError","","An error returned from the `recv` function on a `Receiver`.",null,null],[4,"TryRecvError","","This enumeration is the list of the possible reasons that `try_recv` could\nnot return data when called.",null,null],[13,"Empty","","This channel is currently empty, but the sender(s) have not yet\ndisconnected, so data may yet become available.",148,null],[13,"Disconnected","","This channel&#39;s sending half has become disconnected, and there will\nnever be any more data received on this channel",148,null],[4,"TrySendError","","This enumeration is the list of the possible error outcomes for the\n`SyncSender::try_send` method.",null,null],[13,"Full","","The data could not be sent on the channel because it would require that\nthe callee block to send the data.",149,null],[13,"Disconnected","","This channel&#39;s receiving half has disconnected, so the data could not be\nsent. The data is returned back to the callee in this case.",149,null],[5,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves.",null,null],[5,"sync_channel","","Creates a new synchronous, bounded channel.",null,null],[3,"Handle","","A handle to a receiver which is currently a member of a `Select` set of\nreceivers.  This handle is used to keep the receiver in the set as well as\ninteract with the underlying receiver.",null,null],[3,"Select","","The &quot;receiver set&quot; of the select interface. This structure is used to manage\na set of receivers which are being selected over.",null,null],[3,"Mutex","bitflags::__core::sync","A mutual exclusion primitive useful for protecting shared data",null,null],[0,"atomic","","Atomic types",null,null],[3,"AtomicBool","bitflags::__core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM&#39;s\n`Monotonic` ordering.",171,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto the other threads that perform a load with `Acquire` ordering\non the same value.",171,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin other threads.",171,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",171,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",171,null],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[3,"StaticCondvar","bitflags::__core::sync","Statically allocated condition variables.",null,null],[3,"Barrier","","A barrier enables multiple threads to synchronize the beginning\nof some computation.",null,null],[3,"OnceState","","State yielded to the `call_once_force` method which can be used to query\nwhether the `Once` was previously poisoned or not.",null,null],[6,"LockResult","","",null,null],[17,"CONDVAR_INIT","","Constant initializer for a statically allocated condition variable.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when\ndropped.",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when\ndropped.",null,null],[3,"BarrierWaitResult","","A result returned from wait.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"StaticMutex","","The static mutex type is provided to allow for static allocation of mutexes.",null,null],[3,"PoisonError","","A type of error which can be returned whenever a lock is acquired.",null,null],[17,"RW_LOCK_INIT","","Constant initialization for a statically-initialized rwlock.",null,null],[3,"Arc","","An atomically reference counted wrapper for shared state.",null,null],[4,"TryLockError","","An enumeration of possible errors which can occur while calling the\n`try_lock` method.",null,null],[13,"Poisoned","","The lock could not be acquired because another thread failed while holding\nthe lock.",187,null],[13,"WouldBlock","","The lock could not be acquired at this time because the operation would\notherwise block.",187,null],[6,"TryLockResult","","",null,null],[3,"Once","","A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with the `ONCE_INIT`\nvalue.",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"Weak","","A weak pointer to an `Arc`.",null,null],[17,"MUTEX_INIT","","Static initialization of a mutex. This constant can be used to initialize\nother mutex constants.",null,null],[3,"StaticRwLock","","Structure representing a statically allocated RwLock.",null,null],[3,"MutexGuard","","An RAII implementation of a &quot;scoped lock&quot; of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null],[0,"time","bitflags::__core","Temporal quantification.",null,null],[3,"Instant","bitflags::__core::time","A measurement of a monotonically increasing clock.\n Opaque and useful only with `Duration`.",null,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to\nexternal entities like the file system or other processes.",null,null],[3,"SystemTimeError","","An error returned from the `duration_since` method on `SystemTime`,\nused to learn about why how far in the opposite direction a timestamp lies.",null,null],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new `SystemTime` instances or\nlearn about where in time a `SystemTime` lies.",null,null],[3,"Duration","","A duration type to represent a span of time, typically used for system\ntimeouts.",null,null],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",435,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",435,null],[11,"ind_sample","","",435,null],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",436,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",436,null],[11,"ind_sample","","",436,null],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",437,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",437,null],[11,"ind_sample","","",437,null],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",438,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",438,null],[11,"ind_sample","","",438,null],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",439,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",439,null],[11,"ind_sample","","",439,null],[11,"clone","rand::distributions::normal","",440,null],[11,"clone","","",441,null],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",441,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",441,null],[11,"ind_sample","","",441,null],[11,"clone","","",442,null],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",442,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",442,null],[11,"ind_sample","","",442,null],[11,"clone","rand::distributions::exponential","",443,null],[11,"clone","","",444,null],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",444,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",444,null],[11,"ind_sample","","",444,null],[11,"new","rand::distributions","",445,{"inputs":[],"output":{"name":"randsample"}}],[11,"sample","","",445,null],[11,"ind_sample","","",445,null],[11,"new","","Create a new `WeightedChoice`.",446,null],[11,"sample","","",446,null],[11,"ind_sample","","",446,null],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default\nfixed seed.",447,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",447,null],[11,"next_u32","","",447,null],[11,"reseed","","",447,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",447,null],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",448,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",448,null],[11,"next_u32","","",448,null],[11,"next_u64","","",448,null],[11,"reseed","","",448,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",448,null],[11,"clone","rand::chacha","",449,null],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",449,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",449,null],[11,"next_u32","","",449,null],[11,"reseed","","",449,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",449,null],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",450,{"inputs":[{"name":"r"},{"name":"usize"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",450,null],[11,"next_u32","","",450,null],[11,"next_u64","","",450,null],[11,"fill_bytes","","",450,null],[11,"reseed","","",450,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",450,null],[11,"clone","","",451,null],[11,"reseed","","",451,null],[11,"default","","",451,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"next","rand","",452,null],[11,"next","","",453,null],[11,"clone","","",454,null],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",454,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",454,null],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",454,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",454,null],[11,"next_u64","bitflags::__core::__rand","Return the next random u64.",455,null],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",455,null],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",455,null],[11,"fill_bytes","","Fill `dest` with random data.",455,null],[11,"gen","","Return a random value of a `Rand` type.",455,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",455,null],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",455,null],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",455,null],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",455,null],[11,"choose","","Return a random element from `values`.",455,null],[11,"shuffle","","Shuffle a mutable slice in place.",455,null],[0,"boxed","bitflags::__core","A pointer type for heap allocation.",null,null],[17,"HEAP","bitflags::__core::boxed","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied.",null,null],[3,"ExchangeHeapSingleton","","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed\nclosure objects. The idea is that where one would normally store a\n`Box&lt;FnOnce()&gt;` in a data structure, you should use\n`Box&lt;FnBox()&gt;`. The two traits behave essentially the same, except\nthat a `FnBox` closure can only be called if it is boxed. (Note\nthat `FnBox` may be deprecated in the future if `Box&lt;FnOnce()&gt;`\nclosures become directly usable.)",null,null],[16,"Output","","",456,null],[10,"call_box","","",456,null],[0,"u64","bitflags::__core","The 64-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u64","",null,null],[17,"MAX","","",null,null],[0,"borrow","bitflags::__core","A module for working with borrowed data.",null,null],[8,"ToOwned","bitflags::__core::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",404,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",404,null],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",72,null],[13,"Owned","","Owned data.",72,null],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",457,null],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",458,null],[0,"string","bitflags::__core","A UTF-8 encoded, growable string.",null,null],[3,"String","bitflags::__core::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",391,null],[3,"Drain","","A draining iterator for `String`.",null,null],[0,"slice","bitflags::__core","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","bitflags::__core::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",406,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",406,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",406,null],[10,"connect","","",406,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[0,"hash","bitflags::__core","Generic hashing support.",null,null],[8,"Hash","bitflags::__core::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",459,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",459,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",460,null],[10,"write","","Writes some data into this `Hasher`",460,null],[11,"write_u8","","Write a single `u8` into this hasher",460,null],[11,"write_u16","","Write a single `u16` into this hasher.",460,null],[11,"write_u32","","Write a single `u32` into this hasher.",460,null],[11,"write_u64","","Write a single `u64` into this hasher.",460,null],[11,"write_usize","","Write a single `usize` into this hasher.",460,null],[11,"write_i8","","Write a single `i8` into this hasher.",460,null],[11,"write_i16","","Write a single `i16` into this hasher.",460,null],[11,"write_i32","","Write a single `i32` into this hasher.",460,null],[11,"write_i64","","Write a single `i64` into this hasher.",460,null],[11,"write_isize","","Write a single `isize` into this hasher.",460,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher`\nwhich a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",461,null],[10,"build_hasher","","Creates a new hasher.",461,null],[3,"BuildHasherDefault","","A structure which implements `BuildHasher` for all `Hasher` types which also\nimplement `Default`.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[0,"u32","bitflags::__core","The 32-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u32","",null,null],[17,"MAX","","",null,null],[0,"i16","bitflags::__core","The 16-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i16","",null,null],[17,"MAX","","",null,null],[0,"option","bitflags::__core","Optional values.",null,null],[4,"Option","bitflags::__core::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",259,null],[13,"Some","","Some value `T`",259,null],[3,"Iter","","An iterator over a reference of the contained item in an Option.",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option.",null,null],[3,"IntoIter","","An iterator over the item contained inside an Option.",null,null],[0,"u16","bitflags::__core","The 16-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u16","",null,null],[17,"MAX","","",null,null],[0,"rc","bitflags::__core","Thread-local reference-counted boxes (the `Rc&lt;T&gt;` type).",null,null],[3,"Rc","bitflags::__core::rc","A reference-counted pointer type over an immutable value.",null,null],[3,"Weak","","A weak version of `Rc&lt;T&gt;`.",null,null],[0,"i8","bitflags::__core","The 8-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i8","",null,null],[17,"MAX","","",null,null],[0,"mem","bitflags::__core","Basic functions for dealing with memory.",null,null],[5,"forget","bitflags::__core::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust&#39;s normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&amp;U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ptr","bitflags::__core","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"null","bitflags::__core::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This\nleaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.",null,null],[3,"Unique","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique&lt;T&gt;` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec&lt;T&gt;` or `Box&lt;T&gt;`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc&lt;T&gt;` or `Arc&lt;T&gt;`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[0,"i32","bitflags::__core","The 32-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i32","",null,null],[17,"MAX","","",null,null],[0,"vec","bitflags::__core","A contiguous growable array type with heap-allocated contents, written\n`Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[3,"Vec","bitflags::__core::vec","A contiguous growable array type, written `Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec&lt;T&gt;`.",null,null],[0,"i64","bitflags::__core","The 64-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i64","",null,null],[17,"MAX","","",null,null],[0,"isize","bitflags::__core","The pointer-sized signed integer type.",null,null],[17,"MIN","bitflags::__core::isize","",null,null],[17,"MAX","","",null,null],[0,"raw","bitflags::__core","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"Slice","bitflags::__core::raw","The representation of a slice like `&amp;[T]`.",null,null],[12,"data","","",269,null],[12,"len","","",269,null],[3,"TraitObject","","The representation of a trait object like `&amp;SomeTrait`.",null,null],[12,"data","","",270,null],[12,"vtable","","",270,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function &quot;unwraps&quot; a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",462,null],[0,"ops","bitflags::__core","Overloadable operators.",null,null],[8,"Drop","bitflags::__core::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",410,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",463,null],[10,"add","","The method for the `+` operator",463,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",464,null],[10,"sub","","The method for the `-` operator",464,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",465,null],[10,"mul","","The method for the `*` operator",465,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",466,null],[10,"div","","The method for the `/` operator",466,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",467,null],[10,"rem","","The method for the `%` operator",467,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",468,null],[10,"neg","","The method for the unary `-` operator",468,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",469,null],[10,"not","","The method for the unary `!` operator",469,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&amp;`.",null,null],[16,"Output","","The resulting type after applying the `&amp;` operator",470,null],[10,"bitand","","The method for the `&amp;` operator",470,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",471,null],[10,"bitor","","The method for the `|` operator",471,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",472,null],[10,"bitxor","","The method for the `^` operator",472,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `&lt;&lt;`.",null,null],[16,"Output","","The resulting type after applying the `&lt;&lt;` operator",473,null],[10,"shl","","The method for the `&lt;&lt;` operator",473,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `&gt;&gt;`.",null,null],[16,"Output","","The resulting type after applying the `&gt;&gt;` operator",474,null],[10,"shr","","The method for the `&gt;&gt;` operator",474,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",475,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",476,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",477,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",478,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",479,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&amp;=`.",null,null],[10,"bitand_assign","","The method for the `&amp;` operator",480,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",481,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",482,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `&lt;&lt;=`.",null,null],[10,"shl_assign","","The method for the `&lt;&lt;=` operator",483,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `&gt;&gt;=`.",null,null],[10,"shr_assign","","The method for the `&gt;&gt;=` operator",484,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",485,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",485,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",486,null],[3,"RangeFull","","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends: { x | start &lt;= x &lt; end }.\nUse `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",272,null],[12,"end","","The upper bound of the range (exclusive).",272,null],[3,"RangeFrom","","A range which is only bounded below: { x | start &lt;= x }.\nUse `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",273,null],[3,"RangeTo","","A range which is only bounded above: { x | x &lt; end }.\nUse `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",274,null],[4,"RangeInclusive","","An inclusive range which is bounded at both ends: { x | start &lt;= x &lt;= end }.\nUse `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",275,null],[12,"at","bitflags::__core::ops::RangeInclusive","",275,null],[13,"NonEmpty","bitflags::__core::ops","Non-empty range (iteration will yield value(s))",275,null],[12,"start","bitflags::__core::ops::RangeInclusive","",275,null],[12,"end","","",275,null],[3,"RangeToInclusive","bitflags::__core::ops","An inclusive range which is only bounded above: { x | x &lt;= end }.\nUse `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",276,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",487,null],[10,"deref","","The method called to dereference a value",487,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",488,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",408,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",405,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",397,null],[10,"call_once","","This is called when the call operator is used.",397,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate &quot;place&quot; that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",489,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",490,null],[10,"make_place","","Creates a fresh place from `self`.",490,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",491,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",491,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",492,null],[16,"Place","","The place that will negotiate the storage of the data.",492,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",492,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",493,{"inputs":[],"output":{"name":"self"}}],[0,"convert","bitflags::__core","Traits for conversions between types.",null,null],[8,"AsRef","bitflags::__core::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",395,null],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",398,null],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",390,null],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",409,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Err","","The type returned in the event of a conversion error.",494,null],[10,"try_into","","Performs the conversion.",494,null],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Err","","The type returned in the event of a conversion error.",495,null],[10,"try_from","","Performs the conversion.",495,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"any","bitflags::__core","This module implements the `Any` trait, which enables dynamic typing\nof any `&#39;static` type through runtime reflection.",null,null],[8,"Any","bitflags::__core::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",277,null],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"clone","bitflags::__core","The `Clone` trait for types that cannot be &#39;implicitly copied&#39;.",null,null],[8,"Clone","bitflags::__core::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",411,null],[11,"clone_from","","Performs copy-assignment from `source`.",411,null],[0,"u8","bitflags::__core","The 8-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u8","",null,null],[17,"MAX","","",null,null],[0,"result","bitflags::__core","Error handling with the `Result` type.",null,null],[4,"Result","bitflags::__core::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",279,null],[13,"Err","","Contains the error value",279,null],[3,"Iter","","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[0,"char","bitflags::__core","A character type.",null,null],[11,"clone","rustc_unicode::u_str","",496,null],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",496,{"inputs":[{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",496,null],[11,"size_hint","","",496,null],[11,"next","","",497,null],[11,"next_back","","",497,null],[3,"ToLowercase","bitflags::__core::char","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`,\nreturning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a\ndecoding error.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[3,"EncodeUtf16","","An iterator over `u16` entries represending the UTF-16 encoding of a `char`\nvalue.",null,null],[3,"EncodeUtf8","","An iterator over `u8` entries represending the UTF-8 encoding of a `char`\nvalue.",null,null],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[0,"cell","bitflags::__core","Shareable mutable containers.",null,null],[3,"Cell","bitflags::__core::cell","A mutable memory location that admits only `Copy` data.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell&lt;T&gt;`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",287,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",287,null],[13,"Unused","","There are no outstanding borrows on this cell.",287,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"fmt","bitflags::__core","Utilities for formatting and printing strings",null,null],[5,"format","bitflags::__core::fmt","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",498,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",499,null],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",499,null],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",499,null],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",500,null],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",501,null],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",502,null],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",503,null],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",504,null],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",505,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[6,"Result","","",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",506,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",507,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[0,"iter","bitflags::__core","Composable external iteration.",null,null],[3,"Rev","bitflags::__core::iter","An double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",389,null],[10,"next","","Advances the iterator and returns the next value.",389,null],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",389,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",389,null],[11,"last","","Consumes the iterator, returning the last element.",389,null],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",389,null],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",389,null],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",389,null],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",389,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",389,null],[11,"filter_map","","Creates an iterator that both filters and maps.",389,null],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",389,null],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",389,null],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",389,null],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",389,null],[11,"skip","","Creates an iterator that skips the first `n` elements.",389,null],[11,"take","","Creates an iterator that yields its first `n` elements.",389,null],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",389,null],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",389,null],[11,"fuse","","Creates an iterator which ends after the first `None`.",389,null],[11,"inspect","","Do something with each element of an iterator, passing the value on.",389,null],[11,"by_ref","","Borrows an iterator, rather than consuming it.",389,null],[11,"collect","","Transforms an iterator into a collection.",389,null],[11,"partition","","Consumes an iterator, creating two collections from it.",389,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",389,null],[11,"all","","Tests if every element of the iterator matches a predicate.",389,null],[11,"any","","Tests if any element of the iterator matches a predicate.",389,null],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",389,null],[11,"position","","Searches for an element in an iterator, returning its index.",389,null],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",389,null],[11,"max","","Returns the maximum element of an iterator.",389,null],[11,"min","","Returns the minimum element of an iterator.",389,null],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",389,null],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",389,null],[11,"rev","","Reverses an iterator&#39;s direction.",389,null],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",389,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",389,null],[11,"cycle","","Repeats an iterator endlessly.",389,null],[11,"sum","","Sums the elements of an iterator.",389,null],[11,"product","","Iterates over the entire iterator, multiplying all the elements",389,null],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",389,null],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",389,null],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",389,null],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",389,null],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",389,null],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",389,null],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",389,null],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",389,null],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",396,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",508,null],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",508,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[3,"Once","","An iterator that yields an element exactly once.",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",399,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",403,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",392,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",392,null],[10,"into_iter","","Creates an iterator from a value.",392,null],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",509,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[3,"Empty","","An iterator that yields nothing.",null,null],[3,"StepBy","","An adapter for stepping range iterators by a custom amount.",null,null],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[0,"usize","bitflags::__core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","bitflags::__core::usize","",null,null],[17,"MAX","","",null,null],[0,"default","bitflags::__core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","bitflags::__core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",388,{"inputs":[],"output":{"name":"self"}}],[0,"marker","bitflags::__core","Primitive traits and marker types representing basic &#39;kinds&#39; of types.",null,null],[8,"Send","bitflags::__core::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be &quot;unsized&quot; to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[3,"PhantomData","","`PhantomData&lt;T&gt;` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[0,"str","bitflags::__core","Unicode string slices.",null,null],[6,"Utf16Units","bitflags::__core::str","",null,null],[3,"EncodeUtf16","","External iterator for a string&#39;s UTF-16 code units.",null,null],[3,"LinesAny","","Created with the method [`lines_any()`].",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",510,null],[10,"from_str","","Parses a string `s` to return a value of this type.",510,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",378,null],[12,"next","","Index of the first byte of the next `char`",378,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[3,"Split","","Created with the method [`split()`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[3,"CharIndices","","Iterator for a string&#39;s characters and their byte offsets.",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","bitflags::__core::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",511,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",511,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",511,null],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",511,null],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",511,null],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",316,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",316,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",316,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",512,null],[10,"next","","Performs the next search step starting from the front.",512,null],[11,"next_match","","Find the next `Match` result. See `next()`",512,null],[11,"next_reject","","Find the next `Reject` result. See `next()`",512,null],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",513,null],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",513,null],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",513,null],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"RSplitTerminator","bitflags::__core::str","Created with the method [`rsplit_terminator()`].",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[3,"Bytes","","External iterator for a string&#39;s bytes.\nUse with the `std::iter` module.",null,null],[0,"intrinsics","bitflags::__core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","bitflags::__core::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_cxchg_failrelaxed","","",null,null],[5,"atomic_cxchg_failacq","","",null,null],[5,"atomic_cxchg_acq_failrelaxed","","",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","",null,null],[5,"atomic_cxchgweak","","",null,null],[5,"atomic_cxchgweak_acq","","",null,null],[5,"atomic_cxchgweak_rel","","",null,null],[5,"atomic_cxchgweak_acqrel","","",null,null],[5,"atomic_cxchgweak_relaxed","","",null,null],[5,"atomic_cxchgweak_failrelaxed","","",null,null],[5,"atomic_cxchgweak_failacq","","",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,{"inputs":[],"output":{"name":"t"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior\nwhere y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in\nundefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in &#39;v&#39;,\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust&#39;s &quot;try catch&quot; construct which invokes the function pointer `f` with\nthe data pointer `data`.",null,null],[0,"cmp","bitflags::__core","Functionality for ordering and comparison.",null,null],[8,"PartialEq","bitflags::__core::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",393,null],[11,"ne","","This method tests for `!=`.",393,null],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",321,null],[13,"Equal","","An ordering where a compared value is equal [to another].",321,null],[13,"Greater","","An ordering where a compared value is greater [than another].",321,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",407,null],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",394,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",394,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",394,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",394,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",394,null],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[[8,"Error"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"TryFromIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[3,"EscapeDefault"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[4,"Cow"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[4,"ErrorKind"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"],[3,"AssertUnwindSafe"],[3,"AssertRecoverSafe"],[4,"Prefix"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"Select"],[3,"Handle"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"OnceState"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"PoisonError"],[4,"TryLockError"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sigset_t"],[3,"stat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"PanicInfo"],[3,"Location"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Drain"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Rc"],[3,"Weak"],[3,"Unique"],[3,"Shared"],[3,"IntoIter"],[3,"Drain"],[3,"Slice"],[3,"TraitObject"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Any"],[3,"TypeId"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"PhantomData"],[3,"EncodeUtf16"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"Ordering"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"EnumSet"],[3,"Iter"],[4,"Bound"],[3,"Wrapping"],[4,"FpCategory"],[3,"NonZero"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Default"],[8,"Iterator"],[8,"Into"],[8,"ToString"],[8,"IntoIterator"],[8,"PartialEq"],[8,"PartialOrd"],[8,"AsRef"],[8,"ExactSizeIterator"],[8,"FnOnce"],[8,"AsMut"],[8,"DoubleEndedIterator"],[3,"Weak"],[3,"Arc"],[3,"RawVec"],[8,"Extend"],[8,"ToOwned"],[8,"FnMut"],[8,"SliceConcatExt"],[8,"Ord"],[8,"Fn"],[8,"From"],[8,"Drop"],[8,"Clone"],[8,"AsciiExt"],[8,"One"],[8,"Zero"],[8,"Read"],[8,"Seek"],[8,"Write"],[8,"BufRead"],[8,"ToSocketAddrs"],[8,"MetadataExt"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"PermissionsExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[8,"DirEntryExt"],[8,"DirBuilderExt"],[8,"CommandExt"],[8,"ExitStatusExt"],[8,"JoinHandleExt"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[3,"ReseedWithDefault"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[8,"Rng"],[8,"FnBox"],[8,"Borrow"],[8,"BorrowMut"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Repr"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"TryInto"],[8,"TryFrom"],[3,"Utf16Encoder"],[3,"SplitWhitespace"],[8,"Debug"],[8,"Write"],[8,"LowerHex"],[8,"Binary"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperHex"],[8,"Octal"],[8,"UpperExp"],[8,"Display"],[8,"Step"],[8,"FromIterator"],[8,"FromStr"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"]]};
searchIndex["hex"] = {"doc":"","items":[[4,"FromHexError","hex","",null,null],[13,"InvalidHexCharacter","","",0,null],[12,"c","hex::FromHexError","",0,null],[12,"index","","",0,null],[13,"InvalidHexLength","hex","",0,null],[8,"ToHex","","",null,null],[10,"to_hex","","",1,null],[11,"write_hex","","",1,null],[8,"FromHex","","",null,null],[16,"Error","","",2,null],[10,"from_hex","","",2,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"fmt","","",0,null],[11,"from_hex","collections::vec","",3,{"inputs":[{"name":"t"}],"output":{"name":"result"}}]],"paths":[[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[3,"Vec"]]};
initSearch(searchIndex);
